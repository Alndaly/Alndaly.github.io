<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VIM-开始</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch01_starting_vim/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch01_starting_vim/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-起步"><a href="#第1章-起步" class="headerlink" title="第1章 起步"></a>第1章 起步</h1><p>在本章，您将了解从终端启动Vim的几种不同方法。我写这本教程时使用的Vim版本是8.2。如果您使用Neovim或老版本的Vim，大部分情况下方法是通用的，但注意个别命令可能无效。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我不会给出在某台特定机器上安装Vim的详细指令。好消息是，大部分Unix-based电脑应该预装了Vim。如果没有，大部分发行版也应该有关于如何安装Vim的指令。</p><p>从Vim的官方网站或官方仓库可以获得下载链接：</p><ul><li><a href="https://www.vim.org/download.php">Vim 官网</a></li><li><a href="https://github.com/vim/vim">Vim 官方仓库</a></li><li><a href="https://hub.fastgit.org/vim/vim">Vim 官方仓库镜像</a></li></ul><h2 id="Vim命令"><a href="#Vim命令" class="headerlink" title="Vim命令"></a>Vim命令</h2><p>当您安装好Vim后，在终端运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">vim<br></code></pre></td></tr></table></figure><p>您应该会看到一个介绍界面。这就是您用来处理文本的工作区。不像其它大部分文本编辑器和IDE，Vim是一个模式编辑器。如果您想输入”hello”，您需要使用’i’命令切换到插入模式。按下’ihello<Esc>‘可以在工作区插入文本”hello”。</p><h2 id="退出Vim"><a href="#退出Vim" class="headerlink" title="退出Vim"></a>退出Vim</h2><p>有好几种不同的方法都可以退出Vim。（译者注：在stackflow论坛上，有个著名的问题“如何退出Vim”，五年来，有超过100万开发者遇到相同的问题。^_^，这件事已经成为了开发者中的一个梗）。最常用的退出方法是在Vim中输入：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:quit</span><br></code></pre></td></tr></table></figure><p>您可以使用简写<code>:q</code>。这是一个命令行模式的命令(command-line mode：Vim的另一种模式)。如果您在普通模式输入<code>:</code>，光标将移动到屏幕底部，在这里您可以输入命令。在后面的第15章，您会学到关于命令行模式更多信息。如果您处于插入模式，按下<code>:</code>将会在屏幕上直接显示”:”(冒号)。因此，您需要按下<code>&lt;Esc&gt;</code>键切换回普通模式。顺带说一下，在命令行模式也可以通过按<code>&lt;Esc&gt;</code>键切换回普通模式。您将会注意到，在Vim的好几种模式下都可以通过按<code>&lt;Esc&gt;</code>键切回普通模式。</p><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><p>若要保存您的修改，在Vim中输入：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">:<span class="hljs-built_in">write</span><br></code></pre></td></tr></table></figure><p>您也可以输入简写’:w’。如果这是一个新建的文件，您必须给出文件名才能保存。下面的命令使文件保存为名为’file.txt’的文件，在Vim命令行运行：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">:w <span class="hljs-built_in">file</span>.txt<br></code></pre></td></tr></table></figure><p>如果想保存并退出，可以将’:w’和’:q’命令联起来，在Vim命令行中输入：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:wq</span><br></code></pre></td></tr></table></figure><p>如果想不保存修改而强制退出，可以在’:q’命令后加’!’（叹号）,在Vim命令行中：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:q!</span><br></code></pre></td></tr></table></figure><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>在本指南全文中，我将向您提及好几种Vim的帮助页面。您可以通过输入<code>:help &#123;命令&#125;</code>(<code>:h</code>是简写)进入相关命令的帮助文档。可以向<code>:h</code>命令传递主题、命令名作为参数。比如，如果想查询退出Vim的方法，在vim中输入：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">:<span class="hljs-keyword">h</span> <span class="hljs-keyword">write</span>-<span class="hljs-keyword">quit</span><br></code></pre></td></tr></table></figure><p>我是怎么知道应该搜索”write-quit”这个关键词的呢？实际上我也不知道，我仅仅只是输入’:h quit’，然后按<code>&lt;Tab&gt;</code>。Vim会自动显示相关联的关键词供用户选择。如果您需要查询一些信息，只需要输入<code>:h</code>后接关键词，然后按<code>&lt;Tab&gt;</code>。</p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>如果想在终端中使用Vim打开名为(‘hello1.txt’)，在终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim hello1.txt<br></code></pre></td></tr></table></figure><p>可以一次打开多个文件，在终端中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim hello1.txt hello2.txt hello3.txt<br></code></pre></td></tr></table></figure><p>Vim会在不同的buffers中打开’hello1.txt’，’hello2.txt’，’hello3.txt’。在下一章您将学到关于buffers的知识。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>您可以在终端中向<code>vim</code>命令传递参数。  </p><p>如果想查看Vim的当前版本，在终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim --version<br></code></pre></td></tr></table></figure><p>终端中将显示您当前Vim的版本和所有支持的特性，’+’表示支持的特性，’-‘表示不支持的特性。本教程中的一些操作需要您的Vim支持特定的特性。比如，在后面的章节中提到可以使用<code>:history</code>查看Vim的命令行历史记录。您的Vim必须包含<code>+cmdline_history</code>这一特性，这条命令才能正常使用。一般情况下，如果您通过主流的安装源下载Vim的话，您安装的Vim是支持所有特性的，</p><p>您在终端里做的很多事情都可以在Vim内部实现。比如，在Vim程序中也可以查看当前Vim版本，您可以运行下面的命令，在Vim中输入：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">:<span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>如果您想打开<code>hello.txt</code>文件后迅速执行一条命令，您可以向<code>vim</code>传递一个<code>+&#123;cmd&#125;</code>选项。</p><p>在Vim中，您可以使用<code>:s</code>命令（<code>substitue</code>的缩写）替换文本。如果您想打开<code>hello.txt</code>后立即将所有的”pancake”替换成”bagel”，在终端中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim +%s/pancake/bagel/g hello.txt<br></code></pre></td></tr></table></figure><p>该命令可以被叠加，在终端中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim +%s/pancake/bagel/g +%s/bagel/egg/g +%s/egg/donut/g hello.txt<br></code></pre></td></tr></table></figure><p>Vim会将所有”pancake” 实例替换为”bagel”，然后将所有”bagel”替换为”egg”，然后将所有”egg”替换为”donut”（在后面的章节中您将学到如何替换）。</p><p>您同样可以使用<code>c</code>标志来代替<code>+</code>语法，在终端中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -c %s/pancake/bagel/g hello.txt<br>vim -c %s/pancake/bagel/g -c %s/bagel/egg/g -c %s/egg/donut/g hello.txt<br></code></pre></td></tr></table></figure><h2 id="打开多个窗口"><a href="#打开多个窗口" class="headerlink" title="打开多个窗口"></a>打开多个窗口</h2><p>您可以使用<code>o</code>和<code>O</code>选项使Vim打开后分别显示为水平或垂直分割的窗口。</p><p>若想将Vim打开为2个水平分割的窗口，在终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -o2<br></code></pre></td></tr></table></figure><p>若想将Vim打开为5个水平分割的窗口，在终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -o5<br></code></pre></td></tr></table></figure><p>若想将Vim打开为5个水平分割的窗口，并使前两个窗口显示<code>hello1.txt</code>和<code>hello2.txt</code>的内容，在终端中运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -o5 hello1.txt hello2.txt<br></code></pre></td></tr></table></figure><p>若想将Vim打开为2个垂直分割的窗口、5个垂直分割的窗口、5个垂直分割窗口并显示2个文件，在终端中分别运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -O<br>vim -O5<br>vim -O5 hello1.txt hello2.txt<br></code></pre></td></tr></table></figure><h2 id="挂起"><a href="#挂起" class="headerlink" title="挂起"></a>挂起</h2><p>如果您编辑时想将Vim挂起，您可以按下<code>Ctrl-z</code>。同样，您也可以使用<code>:stop</code>或<code>:suspend</code>命令达到相同的效果。若想从挂起状态返回，在终端中运行<code>fg</code>命令。</p><h2 id="聪明的启动Vim"><a href="#聪明的启动Vim" class="headerlink" title="聪明的启动Vim"></a>聪明的启动Vim</h2><p>您可以向<code>vim</code>命令传递不同的选项(option)和标志(flag)，就像其他终端命令一样。其中一个选项是命令行命令（<code>+&#123;cmd&#125;</code>或<code>-c cmd</code>）。当您读完本教程学到更多命令后，看看您是否能将相应命令应用到Vim的启动中。同样，作为一个终端命令，您可以将<code>vim</code>命令和其他终端命令联合起来。比如，您可以将<code>ls</code>命令的输出重定向到Vim中编辑，命令是<code>ls -l | vim -</code>。</p><p>若要了解更多Vim终端命令，查看<code>man vim</code>。若要了解更多关于Vim编辑器的知识，继续阅读本教程，多使用<code>:help</code>命令。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-缓冲区(Buffers)，窗口(Windows)和选项卡(Tabs)</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch02_buffers_windows_tabs/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch02_buffers_windows_tabs/</url>
    
    <content type="html"><![CDATA[<h1 id="第2章-缓冲区-Buffers-，窗口-Windows-和选项卡-Tabs"><a href="#第2章-缓冲区-Buffers-，窗口-Windows-和选项卡-Tabs" class="headerlink" title="第2章 缓冲区(Buffers)，窗口(Windows)和选项卡(Tabs)"></a>第2章 缓冲区(Buffers)，窗口(Windows)和选项卡(Tabs)</h1><p>(译者注：在Vim中，Buffers缓冲区，Windows窗口，Tabs选项卡是专有名词。为适应不同读者的翻译习惯，确保没有歧义，本文将不对Buffers、Windows、Tabs这三个词进行翻译)。  </p><p>如果您使用过现代文本编辑器，您很可能对Windows和tabs这两个概念是非常熟悉的。但Vim使用了三个关于显示方面的抽象概念：buffers, windows, 还有tabs。在本章，我将向您解释什么是buffers, windows和tabs，以及它们在Vim中如何工作。</p><p>在开始之前，确保您的vimrc文件中开启了<code>set hidden</code>选项。若没有配置该选项，当您想切换buffer且当前buffer没有保存时，Vim将提示您保存文件（如果您想快速切换，您不会想要这个提示）。我目前还没有讲vimrc，如果您没有vimrc配置文件，那就创建一个。它通常位于根目录下，名字叫<code>.vimrc</code>。我的vimrc位于<code>~/.vimrc</code>。要查看您自己的vimrc文件应该放置在哪，可以在Vim命令模式中输入<code>:h vimrc</code>。在vimrc文件中，添加：</p><figure class="highlight powershell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set</span> <span class="hljs-keyword">hidden</span><br></code></pre></td></tr></table></figure><p>保存好vimrc文件，然后激活它(在vimrc文件中运行<code>:source %</code>)。</p><h2 id="Buffers"><a href="#Buffers" class="headerlink" title="Buffers"></a>Buffers</h2><p><em>buffer</em>到底是什么？</p><p>buffer就是内存中的一块空间，您可以在这里写入或编辑文本。当您在Vim中打开一个文件时，文件的数据就与一个buffer绑定。当您在Vim中打开3个文件，您就有3个buffers。</p><p>创建两个可使用的空文件，分别名为<code>file1.js</code>和<code>file2.js</code>（如果可能，尽量使用Vim来创建）。在终端中运行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim file1.js<br></code></pre></td></tr></table></figure><p>这时您看到的是<code>file1.js</code>的 <em>buffer</em> 。每当您打开一个新文件，Vim总是会创建一个新的buffer。</p><p>退出Vim。这一次，打开两个新文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim file1.js file2.js<br></code></pre></td></tr></table></figure><p>Vim当前显示的是<code>file1.js</code>的buffer，但它实际上创建了两个buffers：<code>file1.js</code>buffer和<code>file2.js</code>buffer。运行<code>:buffers</code>命令可以查看所有的buffers（另外，您也可以使用<code>:ls</code>和<code>:files</code>命令）。您应该会 <em>同时</em> 看到列出来的<code>file1.js</code>和<code>file2.js</code>。运行<code>vim file1 file2 file3 ... filen</code>创建n个buffers。每一次您打开一个新文件，Vim就为这个文件创建一个新的buffer。</p><p>要遍历所有buffers，有以下几种方法：</p><ul><li><code>:bnext</code> 切换至下一个buffer（<code>:bprevious</code>切换至前一个buffer）。</li><li><code>:buffer</code> + 文件名。（按下<code>&lt;Tab&gt;</code>键Vim会自动补全文件名）。 </li><li><code>:buffer</code> + <code>n</code>, n是buffer的编号。比如，输入<code>:buffer 2</code>将使您切换到buffer #2。</li><li>按下<code>Ctrl-O</code>将跳转至跳转列表中旧的位置，对应的，按下<code>Ctrl-I</code>将跳转至跳转列表中新的位置。这并不是属于buffer的特有方法，但它可以用来在不同的buffers中跳转。我将在第5章详细讲述关于跳转的知识。</li><li>按下<code>Ctrl-^</code>跳转至先前编辑过的buffer。</li></ul><p>一旦Vim创建了一个buffer，它将保留在您的buffers列表中。若想删除它，您可以输入<code>:bdelete</code>。这条命令也可以接收一个buffer编号（<code>:bdlete 3</code>将删除buffer #3）或一个文件名（<code>:bdelete</code>然后按<code>&lt;Tab&gt;</code>自动补全文件名）。</p><p>我学习buffer时最困难的事情就是理解buffer如何工作，因为我当时的思维已经习惯了使用主流文本编辑器时关于窗口的概念。要理解buffer，可以打个很好的比方，就是打牌的桌面。如果您有2个buffers，就像您有一叠牌（2张）。您只能看见顶部的牌，虽然您知道在它下面还有其他的牌。如果您看见<code>file1.js</code>buffer，那么<code>file1.js</code>就是顶部的牌。虽然您看不到其他的牌<code>file2.js</code>，但它实际上就在那。如果您切换buffers到<code>file2.js</code>，那么<code>file2.js</code>这张牌就换到了顶部，而<code>file1.js</code>就换到了底部。</p><p>如果您以前没有用过Vim，这是一个新的概念。花上几分钟理解一下。</p><h2 id="退出Vim"><a href="#退出Vim" class="headerlink" title="退出Vim"></a>退出Vim</h2><p>顺带说一句，如果您已经打开了多个buffers，您可以使用quit -all来关闭所有的buffers：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:qall</span><br></code></pre></td></tr></table></figure><p>如果您想关闭所有buffers但不保存，仅需要在后面加<code>!</code>（叹号）就行了：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:qall!</span><br></code></pre></td></tr></table></figure><p>若要保存所有buffers然后退出，请运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:wqall</span><br></code></pre></td></tr></table></figure><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>一个window就是在buffer上的一个视口。如果您使用过主流的编辑器，Windows这个概念应该很熟悉。大部分文本编辑器具有显示多个窗口的能力。在Vim中，您同样可以拥有多个窗口。</p><p>让我们从终端再次打开<code>file1.js</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim file1.js<br></code></pre></td></tr></table></figure><p>先前我说过，您看到的是<code>file1.js</code>的buffer。但这个说法并不完整，现在这句话得更正一下，您看到的是<code>file1.js </code>的buffer通过 <strong>一个窗口</strong> 显示出来。窗口就是您查看的buffer所使用的视口。</p><p>先不忙急着退出Vim，在Vim中运行：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">:<span class="hljs-built_in">split</span> file2.js<br></code></pre></td></tr></table></figure><p>现在您看到的是两个buffers通过 <strong>两个窗口</strong> 显示出来。上面的窗口显示的是<code>file2.js</code>的buffer。而下面的窗口显示的是<code>file1.js</code>的buffer。</p><p>如果您想在窗口之间导航，使用这些快捷键：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tp">Ctrl-<span class="hljs-keyword">W</span> H    移动光标到左边的窗口<br>Ctrl-<span class="hljs-keyword">W</span> J    移动光标到下面的窗口<br>Ctrl-<span class="hljs-keyword">W</span> K    移动光标到上面的窗口<br>Ctrl-<span class="hljs-keyword">W</span> L    移动光标到右边的窗口<br></code></pre></td></tr></table></figure><p>现在，在Vim中运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:vsplit</span> file3.js<br></code></pre></td></tr></table></figure><p>您现在看到的是三个窗口显示三个buffers。一个窗口显示<code>file3.js</code>的buffer，一个窗口显示<code>file2.js</code>的buffer，还有一个窗口显示<code>file1.js</code>的buffer。</p><p>您可以使多个窗口显示同一个buffer。当光标位于左上方窗口时，输入：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">:<span class="hljs-built_in">buffer</span> file2.js<br></code></pre></td></tr></table></figure><p>现在两个窗口显示的都是<code>file2.js</code>的buffer。如果您现在在这两个窗口中的某一个输入内容，您会看到所有显示<code>file2.js</code>buffer的窗口都在实时更新。</p><p>要关闭当前的窗口，您可以按<code>Ctrl-W C</code>或输入<code>:quit</code>。当您关闭一个窗口后，buffers仍然会在列表中。（可以运行<code>:buffers</code>来确认这一点）。</p><p>这里有一些普通模式下关于窗口的命令：</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tp">Ctrl-<span class="hljs-keyword">W</span> V    打开一个新的垂直分割的窗口<br>Ctrl-<span class="hljs-keyword">W</span> S    打开一个新的水平分割的窗口<br>Ctrl-<span class="hljs-keyword">W</span> C    关闭一个窗口<br>Ctrl-<span class="hljs-keyword">W</span> O    除了当前窗口，关闭所有其他的窗口<br></code></pre></td></tr></table></figure><p>另外，下面的列表列出了一些有用的关于windows的命令行命令</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tcl">:vsplit <span class="hljs-keyword">filename</span>    垂直分割当前窗口，并在新窗口中打开名为<span class="hljs-keyword">filename</span>的文件。<br>:<span class="hljs-keyword">split</span> <span class="hljs-keyword">filename</span>     水平分割当前窗口，并在新窗口中打开名为<span class="hljs-keyword">filename</span>的文件。<br>:new <span class="hljs-keyword">filename</span>       创建一个新窗口并打开名为<span class="hljs-keyword">filename</span>的文件。<br></code></pre></td></tr></table></figure><p>花一点时间理解上面的知识。要了解更多信息，可以查看帮助<code>:h window</code>。</p><h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><p>Tabs就是windows的集合。它就像窗口的布局。在大部分的现代文本编辑器（还有现代互联网浏览器）中，一个tab意味着打开一个文件&#x2F;页面，当您关闭标签，相应的文件&#x2F;页面就消失了。但在Vim中，tab并不表示打开了一个文件。当您在Vim中关闭一个tab，您并不是关闭一个文件。您仅仅关闭了窗口布局。文件的数据依然存储在内存中的buffers中。</p><p>让我们运行几个命令看看Vim中tabs的功能。打开<code>file1.js</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim file1.js<br></code></pre></td></tr></table></figure><p>若要在新tab中打开<code>file2.js</code>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:tabnew</span> file2.js<br></code></pre></td></tr></table></figure><p>当然您可以按<code>&lt;Tab&gt;</code>让Vim自动补全 <em>新tab</em> 中将要打开的文件名（啰嗦几句，请理解作者的幽默 ）。</p><p>下面的列表列出了一些有用的关于tab导航的命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">tabnew</span> <span class="hljs-keyword">file</span>.txt    在<span class="hljs-keyword">tab</span>中打开一个文件<br>:<span class="hljs-keyword">tabclose</span>           关闭当前<span class="hljs-keyword">tab</span><br>:<span class="hljs-keyword">tabnext</span>            切换至下一个<span class="hljs-keyword">tab</span><br>:<span class="hljs-keyword">tabprevious</span>        切换至前一个<span class="hljs-keyword">tab</span><br>:<span class="hljs-keyword">tablast</span>            切换至最后一个<span class="hljs-keyword">tab</span><br>:<span class="hljs-keyword">tabfirst</span>           切换至第一个<span class="hljs-keyword">tab</span><br></code></pre></td></tr></table></figure><p>您可以输入<code>gt</code>切换到下一个标签页（对应的，可以用<code>gT</code>切换到前一个标签页）。您也可以传递一个数字作为参数给<code>gt</code>，这个数字是tab的编号。若想切换到第3个tab，输入<code>3gt</code>。</p><p>拥有多个tabs的好处是，您可以在不同的tab中使用不同的窗口布局。也许，您想让您的第1个tab包含3个垂直分割的窗口，然后让第2个tab为水平分割和垂直分割混合的窗口布局。tab是完成这件工作的完美工具!</p><p>若想让Vim启动时就包含多个tabs，您可以在终端中运行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -p file1.js file2.js file3.js<br></code></pre></td></tr></table></figure><h2 id="三维移动"><a href="#三维移动" class="headerlink" title="三维移动"></a>三维移动</h2><p>在windows之间移动就像在笛卡尔坐标系的二维平面上沿着X-Y轴移动。您可以使用<code>Ctrl-W H/J/K/L</code>移动到上面、右侧、下面、以及左侧的窗口。</p><p>在buffer之间移动就像在笛卡尔坐标系的Z轴上穿梭。想象您的buffer文件在Z轴上呈线性排列，您可以使用<code>:bnext</code>和<code>bprevious</code>在Z轴上一次一个buffer地遍历。您也可以使用<code>:buffer 文件名/buffer编号</code>在Z轴上跳转到任意坐标。</p><p>结合window和buffer的移动，您可以在 <em>三维空间</em> 中移动。您可以使用window导航命令移动到上面、右侧、下面、或左侧的窗口（X-Y平面导航）。因为每个window都可能包含了多个buffers，您可以使用buffer移动命令向前、向后移动（Z轴导航）。</p><h2 id="用聪明的方法使用Buffers、Windows、以及Tabs"><a href="#用聪明的方法使用Buffers、Windows、以及Tabs" class="headerlink" title="用聪明的方法使用Buffers、Windows、以及Tabs"></a>用聪明的方法使用Buffers、Windows、以及Tabs</h2><p>您已经学习了什么是buffers、windows、以及tabs，也学习了它们如何在Vim中工作。现在您对它们有了更好地理解，您可以把它们用在您自己的工作流程中。</p><p>每个人都有不同的工作流程，以下示例是我的工作流程：</p><ul><li>首先，对于某个特定任务，我先使用buffers存储所有需要的文件。Vim就算打开很多buffer，速度一般也不会减慢。另外打开多个buffers并不会使我的屏幕变得拥挤。我始终只会看到1个buffer（假设我只有1个window），这可以让我注意力集中在1个屏幕上。当我需要使用其他文件时，可以快速切换至对应文件的buffer。</li><li>当比对文件、读文档、或追踪代码流时，我使用多窗口来一次查看多个buffers。我尽量保持屏幕上的窗口数不超过3个，因为超过3个屏幕将变得拥挤（我使用的是小型笔记本）。当相应工作完成后，我就关掉多余的窗口。窗口越少可以使注意力更集中。</li><li>我使用<a href="https://github.com/tmux/tmux/wiki">tmux</a>windows来代替tabs。通常一次使用多个tmux窗口。比如，一个tmux窗口用来写客户端代码，一个用来写后台代码。</li></ul><p>由于编辑风格不同，我的工作流程可能和您的工作流程不同，这没关系。您可以在实践中去探索适合您自己工作流程的编码风格。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-打开和搜索文件</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch03_searching_files/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch03_searching_files/</url>
    
    <content type="html"><![CDATA[<h1 id="第3章-打开和搜索文件"><a href="#第3章-打开和搜索文件" class="headerlink" title="第3章 打开和搜索文件"></a>第3章 打开和搜索文件</h1><p>本章的目的是向您介绍如何在Vim中快速搜索，能够快速搜索是提高您的Vim工作效率的重要途径。当我解决了如何快速搜索文件这个问题后，我就决定改为完全使用Vim来工作。</p><p>本章划分为两个部分：一是如何不依赖插件搜索；二是使用<a href="https://github.com/junegunn/fzf.vim">fzf插件</a>搜索。让我们开始吧！</p><h2 id="打开和编辑文件"><a href="#打开和编辑文件" class="headerlink" title="打开和编辑文件"></a>打开和编辑文件</h2><p>要在Vim中打开一个文件，您可以使用<code>:edit</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">edit</span> file.txt<br></code></pre></td></tr></table></figure><p>如果<code>file.txt</code>已经存在，就会打开<code>file.txt</code>buffer。如果<code>file.txt</code>不存在，会创建一个新buffer名为<code>file.txt</code>。</p><p><code>:edit</code>命令支持使用<code>&lt;Tab&gt;</code>进行自动补全。比如，如果您的文件位于<a href="https://rubyonrails.org/">Rails</a>应用控制器的用户控制器目录<code>./app/controllers/users_controllers.rb</code>内，您可以使用<code>&lt;Tab&gt;</code>对文件路径名进行快速扩展。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">:<span class="hljs-keyword">edit</span> a&lt;<span class="hljs-built_in">Tab</span>&gt;c&lt;<span class="hljs-built_in">Tab</span>&gt;u&lt;<span class="hljs-built_in">Tab</span>&gt;<br></code></pre></td></tr></table></figure><p><code>:edit</code>可以接收通配符参数。<code>*</code>匹配当前目录下的任意文件。如果您只想查找当前目录下后缀名为<code>.yml</code>的文件：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">:<span class="hljs-keyword">edit</span> *.yml&lt;<span class="hljs-built_in">Tab</span>&gt;<br></code></pre></td></tr></table></figure><p>Vim将列出当前目录下所有<code>.yml</code>文件供您选择。</p><p>您可以使用<code>**</code>进行递归的搜索。如果您想查找当前项目文件夹下所有<code>*.md</code>文件，但您不知道在哪个目录，您可以这样做：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">edit</span> **/*.md<span class="hljs-symbol">&lt;Tab&gt;</span><br></code></pre></td></tr></table></figure><p><code>:edit</code>可以用于运行<code>netrw</code>（Vim的内置文件浏览器）。使用方法是，给<code>:edit</code>一个目录参数而不是文件名就行了：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">edit</span> .<br>:<span class="hljs-built_in">edit</span> test/unit/<br></code></pre></td></tr></table></figure><h2 id="使用find命令搜索文件"><a href="#使用find命令搜索文件" class="headerlink" title="使用find命令搜索文件"></a>使用find命令搜索文件</h2><p>您可以使用<code>:find</code>命令搜索文件。比如：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">:<span class="hljs-keyword">find</span> <span class="hljs-keyword">package</span>.json<br>:<span class="hljs-keyword">find</span> app<span class="hljs-regexp">/controllers/u</span>sers_controller.rb<br></code></pre></td></tr></table></figure><p><code>:find</code>命令同样支持自动补全：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">find</span> <span class="hljs-keyword">p</span><span class="hljs-symbol">&lt;Tab&gt;</span>                <span class="hljs-comment">&quot; to find package.json</span><br>:<span class="hljs-keyword">find</span> <span class="hljs-keyword">a</span><span class="hljs-symbol">&lt;Tab&gt;</span><span class="hljs-keyword">c</span><span class="hljs-symbol">&lt;Tab&gt;</span><span class="hljs-keyword">u</span><span class="hljs-symbol">&lt;Tab&gt;</span>    <span class="hljs-comment">&quot; to find app/controllers/users_controller.rb</span><br></code></pre></td></tr></table></figure><p>您可能注意到<code>:find</code>和<code>:edit</code>看起来很像。它们的区别是什么呢？</p><h2 id="Find-和-Path"><a href="#Find-和-Path" class="headerlink" title="Find 和 Path"></a>Find 和 Path</h2><p>两者的区别在于，<code>:find</code>命令根据<code>path</code>选项配置的路径查找文件，而<code>:edit</code>不会。让我们了解一点关于<code>path</code>选项的知识。一旦您学会如何修改您的路径，<code>:find</code>命令能变成一个功能强大的搜索工具。先查看一下您的<code>path</code>是什么：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">:<span class="hljs-built_in">set</span> <span class="hljs-built_in">path</span>?<br></code></pre></td></tr></table></figure><p>默认情况下，您的<code>path</code>内容很可能是这样的：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">path=.,<span class="hljs-regexp">/usr/i</span>nclude,,<br></code></pre></td></tr></table></figure><ul><li><code>.</code> 意思是在当前文件所在目录下搜索。(译者注：注意不是命令行输入pwd返回的当前目录，而是 <strong>当前所打开的文件</strong> 所在的目录)</li><li><code>,</code> means to search in the current directory.(译者注：此处貌似作者有点小错误，逗号<code>,</code>应该是表示路径之间的分割符。连续的两个<code>,,</code>（两个逗号之间为空）才表示当前目录)</li><li><code>/usr/include</code> 表示在C编译器头文件目录下搜索。</li></ul><p>前两个配置非常重要，第3个现在可以被忽略。您这里应该记住的是：您可以修改您自己的路径。让我们假设您的项目结构是这样的：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">app/<br>  assets/<br>  controllers/<br>    application_controller<span class="hljs-selector-class">.rb</span><br>    comments_controller<span class="hljs-selector-class">.rb</span><br>    users_controller<span class="hljs-selector-class">.rb</span><br>    ...<br></code></pre></td></tr></table></figure><p>如果您想从根目录跳到<code>users_controller.rb</code>，您将不得不经过好几层目录（按好几次<code>&lt;Tab&gt;</code>）。一般说来，当您处理一个framework时，90%的时间您都在某个特定的目录下。在这种情况下，您只关心如何用最少的按键跳到<code>controllers/</code>目录。那么<code>path</code>设置可以减少这个途程。</p><p>您只需要将<code>app/controllers/</code>添加到当前<code>path</code>选项。以下是操作步骤：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:set path+=app<span class="hljs-regexp">/controllers/</span><br></code></pre></td></tr></table></figure><p>现在您的路径已经更新，当您输入<code>:find u&lt;Tab&gt;</code>时，Vim将会在<code>app/controllers/</code>目录内搜索所有以”u”开头的文件。</p><p>如果您有一个嵌套的目录<code>controllers/</code>，比如<code>app/controllers/account/users_controller.rb</code>，Vim就找不到<code>users_controllers</code>了。您必须改为添加<code>:set path+=app/controllers/**</code>，这样自动补全才会找到<code>users_controller.rb</code>。这太棒了！您现在可以只需要按1次键就可找到users controller。</p><p>您可能会想将整个项目文件夹添加到<code>path</code>中，这样当您按<code>&lt;Tab&gt;</code>，Vim将在所有文件夹内搜索您要找的文件，就像这样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">set</span> path+=<span class="hljs-variable">$PWD</span>/**<br></code></pre></td></tr></table></figure><p><code>$PWD</code> 表示的是当前工作目录。如果您尝试将整个项目路径加到<code>path</code>中，并希望让所有文件名可以用<code>&lt;Tab&gt;</code>补全，虽然对于小项目没问题，但如果您的项目中包含大量文件时，这会显著降低您的搜索速度。我建议仅仅将您最常访问的文件&#x2F;目录添加到<code>path</code>。（译者注：不知道是不是因为系统环境不一样的原因，译者使用的是windows下的Vim8.2，$PWD 这个环境变量在译者的vim中不起作用，必须在vimrc文件中添加一句<code>let $PWD=getcwd()</code>才行）。</p><p>您可以将<code>set path+=&#123;您需要添加的目录&#125;</code>添加到您的vimrc文件中。更新<code>path</code>仅花费几秒钟，但可以为您的工作节省很多时间。</p><h2 id="使用Grep命令在文件中搜索"><a href="#使用Grep命令在文件中搜索" class="headerlink" title="使用Grep命令在文件中搜索"></a>使用Grep命令在文件中搜索</h2><p>如果您想在文件内部查找（搜索文件中的词句），您可以使用grep。Vim有两个方法可以完成这个工作：</p><ul><li>内置grep （<code>:vim</code>。没错，就是<code>:vim</code>，它是<code>:vimgrep</code>的简写）。</li><li>外部grep (<code>:grep</code>)。</li></ul><p>让我们首先仔细看看内置grep。<code>:vim</code>有以下语法：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">:vim <span class="hljs-regexp">/pattern/</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><ul><li><code>/pattern/</code> 是您要搜索的内容的正则表达式。</li><li><code>file</code> 是文件参数。您可以传入多个参数。Vim将在文件中搜索所有匹配正则表达式的内容。类似于<code>:find</code>，您可以传入*和**通配符。</li></ul><p>比如，要在<code>app/controllers/</code>目录下所有ruby文件(<code>.rb</code>)中，查找所有的”breakfast”字符串:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:vim <span class="hljs-regexp">/breakfast/</span> app<span class="hljs-regexp">/controllers/</span>**/*.rb<br></code></pre></td></tr></table></figure><p>输入上面的命令后，您将会被导航到第一个结果。Vim的<code>vim</code>搜索命令使用<code>quickfix</code>进行处理。要查看所有搜索结果，运行<code>:copen</code>会打开一个<code>quickfix</code>窗口。下面有一些有用的quickfix命令，可以让您提高效率：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:copen</span>        打开quickfix窗口<br><span class="hljs-symbol">:cclose</span>       关闭quickfix窗口<br><span class="hljs-symbol">:cnext</span>        跳到下一个错误<br><span class="hljs-symbol">:cprevious</span>    跳到前一个错误<br><span class="hljs-symbol">:colder</span>       跳到旧的错误列表<br><span class="hljs-symbol">:cnewer</span>       跳到新的错误列表<br></code></pre></td></tr></table></figure><p>要了解更多关于quickfix的信息，使用<code>:h quickfix</code>查看帮助信息。</p><p>您可能注意到运行内置grep(<code>:vim</code>)命令时，如果匹配结果数量较多时系统速度会变慢。这是因为Vim将每一个搜索结果读入内存。Vim加载每一个匹配的文件就像它们被编辑一样。如果Vim查到大量文件，它将消耗很多内存。</p><p>让我们谈谈外置grep。默认情况下，它使用终端命令<code>grep</code>。要想在<code>app/controllers/</code>目录中搜索字符串”lunch”，您可以这样做：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">:<span class="hljs-keyword">grep</span> -R <span class="hljs-string">&quot;lunch&quot;</span> app<span class="hljs-regexp">/controllers/</span><br></code></pre></td></tr></table></figure><p>注意这里不是使用<code>/pattern/</code>，它遵循的是终端grep的语法<code>&quot;pattern&quot;</code>，它同样使用’quickfix’来显示所有的匹配结果。</p><p>Vim使用<code>grepprg</code>变量来决定运行<code>:grep</code>时，应该使用哪个外部程序。所以您并不是非得使用终端的<code>grep</code>命令。稍后我将为您演示如何改变外部grep程序的默认值。</p><h2 id="用Netrw浏览文件"><a href="#用Netrw浏览文件" class="headerlink" title="用Netrw浏览文件"></a>用Netrw浏览文件</h2><p><code>netrw</code>是Vim的内置文件浏览器，当查看项目的目录结构时很有用。要运行<code>netrw</code>，您需要在您的<code>.vimrc</code>中做以下设置：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">set</span> nocp<br>filetype <span class="hljs-keyword">plugin</span> <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure><p>由于<code>netrw</code>是一个很宽泛的话题，我将紧紧介绍它的基本用法，这应该已经足够了。您可以在启动Vim时运行<code>netrw</code>，只需要传给Vim一个目录参数（而不是文件参数）就行了。比如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim .<br>vim src<span class="hljs-regexp">/client/</span><br>vim app<span class="hljs-regexp">/controllers/</span><br></code></pre></td></tr></table></figure><p>要想从Vim内部运行<code>netrw</code>，您可以使用<code>:edit</code>命令，传给他一个目录而不是文件名：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">edit</span> .<br>:<span class="hljs-built_in">edit</span> src/client/<br>:<span class="hljs-built_in">edit</span> app/controllers/<br></code></pre></td></tr></table></figure><p>也有其他方法，不需要传递目录参数就运行<code>netrw</code>窗口：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">:Explore     从当前文件启动netrw。<br><span class="hljs-meta">:Sexplore    Sex_Plore?不是开玩笑:)，在顶部水平分割的窗口打开netrw。</span><br>:Vexplore    在左侧垂直分割的窗口打开netrw。<br></code></pre></td></tr></table></figure><p>您可以使用Vim动作(motions，在后面的章节中将详细讲述)在<code>netrw</code>中导航。如果您要创建、删除、重命名文件或文件夹，下面有一些关于<code>netrw</code>的有用命令：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-comment">%    创建新文件</span><br>d    创建新目录<br>R    重命名文件/目录<br>D    删除文件/目录<br></code></pre></td></tr></table></figure><p><code>:h netrw</code> 的信息非常复杂，如果您有时间可以看看。</p><p>如果您觉得 <code>netrw</code> 过于单调乏味，<a href="https://github.com/tpope/vim-vinegar">vim-vinegar</a>是netrw的一个改进插件。如果您想找一个不同的文件浏览器，<a href="https://github.com/preservim/nerdtree">NERDTree</a> 是一个很好的选择。去看看吧。</p><h2 id="Fzf插件"><a href="#Fzf插件" class="headerlink" title="Fzf插件"></a>Fzf插件</h2><p>您现在已经学会了如何使用Vim的内置工具去搜索文件，那么让我们学习一下如何用插件实现这些功能吧。</p><p>现代文本编辑器相比Vim，有一个功能设计得很好，那就是文件搜索和模糊搜索的简化。在本章的下半部分，我将向您演示如何使用<a href="https://github.com/junegunn/fzf.vim">fzf.vim</a>插件，在Vim中轻松实现功能强大的搜索功能。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先，确保您下载了<a href="https://github.com/junegunn/fzf">fzf</a>和<a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>。按照它们在github仓库上的指令一步步做。成功安装后，命令<code>fzf</code>和<code>rg</code>应该就可以用了。</p><p>Ripgrep是一个类似grep（从名字上就看得出）的搜索工具。一般说来，它比grep要快，而且还有很多有用的特性。Fzf是一个多用途的命令行模糊搜索工具，您可以讲它与其他命令联合起来使用，包括ripgrep。联合起来后，它们成为一个功能强大的搜索工具。</p><p>Fzf默认并不使用ripgrep，所以我们需要设置<code>FZF_DEFAULT_COMMAND</code>变量告诉fzf使用ripgrep命令。在我的<code>.zshrc</code>（如果您用bash，应该是<code>.bashrc</code>）文件内，我有以下设置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">if</span><span class="hljs-built_in"> type </span>rg &amp;&gt; /dev/<span class="hljs-literal">null</span>; then<br>  <span class="hljs-built_in">export</span> <span class="hljs-attribute">FZF_DEFAULT_COMMAND</span>=<span class="hljs-string">&#x27;rg --files&#x27;</span><br>  <span class="hljs-built_in">export</span> <span class="hljs-attribute">FZF_DEFAULT_OPTS</span>=<span class="hljs-string">&#x27;-m&#x27;</span><br>fi<br></code></pre></td></tr></table></figure><p>注意<code>FZF_DEFAULT_OPTS</code>变量中的<code>-m</code>。这个设置允许我们按下<code>&lt;Tab</code>或<code>&lt;Shift-Tab&gt;</code>后进行多重选择。如果仅想让fzf在Vim中能够工作，这个设置不是必须的，但我认为这是一个有用的设置。当您想在多个文件中执行搜索和替换，进行少量修改时，它会很方便。fzf命令可以接收很多标志，但我不会再这里讲。要想了解更多信息，可以查看<a href="https://github.com/junegunn/fzf#usage">fzf’s 仓库</a>，或者使用<code>man fzf</code>。要想让fzf使用ripgrep，您至少得有这个设置<code>export FZF_DEFAULT_COMMAND=&#39;rg&#39;</code>。</p><p>安装好了fzf和ripgrep后，让我们再安装fzf的插件。在这个例子中，我使用的是<a href="https://github.com/junegunn/vim-plug">vim-plug</a>插件管理器，当然您可以使用其他插件管理器。</p><p>将下列配置添加到您的<code>.vimrc</code>中。因为您需要使用<a href="https://github.com/junegunn/fzf.vim">fzf.vim</a>插件。（同样是由fzf的作者在维护）</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sml"><span class="hljs-type">Plug</span> <span class="hljs-symbol">&#x27;junegunn</span>/fzf.vim&#x27;<br><span class="hljs-type">Plug</span> <span class="hljs-symbol">&#x27;junegunn</span>/fzf&#x27;, &#123; <span class="hljs-symbol">&#x27;do&#x27;</span>: &#123; -&gt; fzf#install<span class="hljs-literal">()</span> &#125; &#125;<br></code></pre></td></tr></table></figure><p>添加后，您需要打开vim，运行<code>:PlugInstall</code>。这条命令将会安装所有您在<code>vimrc</code>文件中定义了但尚未安装的插件。 在我的例子中，将会安装<code>fzf.vim</code>和<code>fzf</code>。</p><p>要了解更多关于此插件的信息，您可以查看<a href="https://github.com/junegunn/fzf/blob/master/README-VIM.md">fzf.vim 的仓库</a>。</p><h2 id="Fzf的语法"><a href="#Fzf的语法" class="headerlink" title="Fzf的语法"></a>Fzf的语法</h2><p>要想高效的使用fzf，您首先得了解一些fzf的基础语法。幸运的是，这个列表比较短：</p><ul><li><code>^</code> 表示前缀精确匹配。要搜索一个以”welcome”开头的短语：<code>^welcom</code>。</li><li><code>$</code> 表示后缀精确匹配。要搜索一个以”my friends”结尾的短语：<code>friends$</code>。</li><li><code>&#39;</code> 表示精确匹配。要搜索短语”welcom my friends”：<code>&#39;welcom my friends</code>。</li><li><code>|</code> 表示”或者”匹配。要搜索”friends”或”foes”：<code>friends | foes</code>。</li><li><code>!</code> 表示反向匹配。要搜索一个包含”welcome”但不包含”friends”的短语：<code>welcome !friends</code>。</li></ul><p>您可以混合起来使用。比如，<code>^hello | ^welcome friends$</code>将搜索以”welcome”或”hello”开头，并且以”friends”结束的短语。</p><h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><p>要想在Vim内使用fzf.vim插件搜索文件，您可以使用<code>:Files</code>方法。在Vim中运行<code>:Files</code>，您将看到fzf搜索提示符。</p><p>因为您将频繁地使用这个命令，最好建立一个键盘映射，我把它映射到<code>Ctrl-f</code>。在我的vimrc配置中，有这个设置：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nnoremap &lt;silent&gt; &lt;C-f&gt; <span class="hljs-symbol">:Files&lt;CR&gt;</span><br></code></pre></td></tr></table></figure><h2 id="在文件中查找"><a href="#在文件中查找" class="headerlink" title="在文件中查找"></a>在文件中查找</h2><p>要想在文件内部搜索，您可以使用<code>:Rg</code>命令。</p><p>同样，因为您可能将频繁的使用这个命令，让我们给它一个键盘映射。我的映射在<code>&lt;Leader&gt;f</code>。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nnoremap &lt;silent&gt; &lt;<span class="hljs-title class_">Leader</span>&gt;f <span class="hljs-symbol">:Rg&lt;CR&gt;</span><br></code></pre></td></tr></table></figure><h2 id="其他搜索"><a href="#其他搜索" class="headerlink" title="其他搜索"></a>其他搜索</h2><p>Fzf.vim提供了许多其他命令。这里我不会一个个仔细讲，您可以去<a href="https://github.com/junegunn/fzf.vim#commands">这里</a>查看更多信息。</p><p>这是我的fzf键盘映射：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml">nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>b :Buffers<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">C-f</span>&gt;</span> :Files<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>f :Rg<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>/ :BLines<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>&#x27; :Marks<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>g :Commits<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>H :Helptags<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>hh :History<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>h: :History:<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br>nnoremap <span class="hljs-tag">&lt;<span class="hljs-name">silent</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">Leader</span>&gt;</span>h/ :History/<span class="hljs-tag">&lt;<span class="hljs-name">CR</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="将Grep替换为Rg"><a href="#将Grep替换为Rg" class="headerlink" title="将Grep替换为Rg"></a>将Grep替换为Rg</h2><p>正如前面提到的，Vim有两种方法在文件内搜索：<code>:vim</code>和<code>:grep</code>。您可以使用<code>grepprg</code>这个关键字重新指定<code>:grep</code>使用的外部搜索工具。我将向您演示如何设置Vim，使得当运行<code>:grep</code>命令时，使用ripgrep代替终端的grep。</p><p>现在，让我们设置<code>grepprg</code>来使<code>:grep</code>使用ripgrep。将下列设置添加到您的vimrc：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-keyword">set</span> grepprg=rg\ <span class="hljs-params">--vimgrep</span>\ <span class="hljs-params">--smart-case</span>\ <span class="hljs-params">--follow</span><br></code></pre></td></tr></table></figure><p>上面的一些选项可以随意修改！要想了解更多关于这些选项的含义，请使用<code>man rg</code>了解详情。</p><p>当您更新<code>grepprg</code>选项后，现在当您运行<code>:grep</code>，它将实际运行<code>rg --vimgrep --smart-case --follow</code>而不是<code>grep</code>。如果您想使用ripgrep搜索”donut”，您可以运行一条更简洁的命令<code>:grep &quot;donut&quot;</code>，而不是<code>:grep &quot;donut&quot; . -R</code></p><p>就像老的<code>:grep</code>一样，新的<code>:grep</code>同样使用quickfix窗口来显示结果。</p><p>您可能好奇，“很好，但我从没在Vim中使用过<code>:grep</code>，为什么我不能直接使用<code>:Rg</code>命令在文件中搜索呢？究竟什么时候我必须使用<code>:grep</code>？”。</p><p>这个问题问得很好。在Vim中，当您需要在多个文件中执行搜索和替换时，您可能必须使用<code>:grep</code>这个命令。我马上就会讲这个问题。</p><h2 id="在多文件中搜索和替换"><a href="#在多文件中搜索和替换" class="headerlink" title="在多文件中搜索和替换"></a>在多文件中搜索和替换</h2><p>现代文本编辑器，比如VSCode中，在多个文件中搜索和替换一个字符串是很简单的事情。在这一节，我将向您演示如何在Vim中轻松实现这个。</p><p>第一个方法是在您的项目中替换 <strong>所有</strong> 的匹配短句。您得使用<code>:grep</code>命令。如果您想将所有”pizza”替换为”donut”，下面是操作方法：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">:<span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;pizza&quot;</span><br>:cfdo %s<span class="hljs-regexp">/pizza/</span>donut/g | update<br></code></pre></td></tr></table></figure><p>让我们来分析一下这条命令：</p><ol><li><code>:grep pizza</code>使用ripgrep去搜索所有”pizza”（顺带说一句，就算您不给<code>grepprg</code>重新赋值让它使用ripgrep，这条命令依然有效，但您可能不得不使用<code>:grep &quot;pizza&quot; . -R</code>命令，而不是<code>:grep &quot;pizza&quot;</code>）。</li><li><code>:cfdo</code>会在您的quickfix列表中所有文件里，执行您传递给它的命令。在这个例子中，您的命令是一条替换命令<code>%s/pizza/donut/g</code>。管道符号(<code>|</code>)是一个链接操作符。命令<code>update</code>在每个文件被替换后，立刻保存。在后面的章节中，我将深入介绍替换命令。</li></ol><p>第二个方法是在您选择文件中执行搜索和替换。用这个方法，您可以手动选择您想执行搜索和替换的文件。下面是操作方法：</p><ol><li>首先清空您的buffer。让您的buffer列表仅包含您所需要的文件，这一点很有必要。您可以重启Vim，也可以运行<code>:%bd | e#</code>命令（<code>%bd</code>关闭所有buffer，而<code>e#</code>打开您当前所在的文件）。</li><li>运行<code>:Files</code>。</li><li>选择好您想搜索-替换的文件。要选择多个文件，使用<code>&lt;Tab&gt;</code>或<code>&lt;Shift-Tab&gt;</code>。当然，您必须使多文件标志(<code>-m</code>)位于<code>FZF_DEFAULT_OPTS</code>中。</li><li>运行<code>:bufdo %s/pizza/donut/g | update</code>。命令<code>:bufdo %s/pizza/donut/g | update</code>看起来和前面的<code>:cfdo %s/pizza/donut/g | update</code>很像，区别在于，(<code>:cfdo</code>)替换所有quickfix中的实体，而(<code>:bufdo</code>)替换所有buffer中的实体。</li></ol><h2 id="用聪明的方法学习搜索"><a href="#用聪明的方法学习搜索" class="headerlink" title="用聪明的方法学习搜索"></a>用聪明的方法学习搜索</h2><p>在文本编辑时，搜索是一个很实用的技巧。学会在Vim中如何搜索，将显著提高您的文本编辑工作流程效率。</p><p>Fzf.vim插件就像一个游戏规则改变者。我无法想象使用Vim没有它的情景。当最开始使用Vim时，如果有一个好的搜索工具，我想是非常重要的。我看见很多人过渡到Vim时的艰难历程，就是因为Vim缺少了现代编辑器所拥有的一些关键功能特性，比如简单快捷且功能强大的搜索功能。我希望本章将帮助您更轻松地向Vim过渡。</p><p>您同时也看到了Vim的扩展性，即使用插件或外部程序扩展搜索功能的能力。将来，记住您想在Vim中拓展的功能。很有可能已经有人写好了相关插件，已经有现成的程序了。下一章，您将学习Vim中非常重要的主题：Vim语法。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-语法</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch04_vim_grammar/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch04_vim_grammar/</url>
    
    <content type="html"><![CDATA[<h1 id="第04章-Vim-语法"><a href="#第04章-Vim-语法" class="headerlink" title="第04章 Vim 语法"></a>第04章 Vim 语法</h1><p>刚接触Vim时很容易被Vim许多复杂的命令吓到，如果你看到一个Vim的用户使用<code>gUfV</code>或<code>1GdG</code>，你可能不能立刻想到这些命令是在做什么。这一章中，我将把Vim命令的结构拆分成一个简单的语法规则进行讲解。</p><p>这一章将是本书中最重要的一章，一旦你理解了Vim命令的语法结构，你将能够和Vim”说话”。注意，在这一章中当我讨论Vim语言时，我讨论并不是<br>Vimscript(Vim自带的插件编写和自定义设置的语言)，这里我讨论的是Vim中normal模式的下的命令的通用规则。</p><h2 id="如何学习一门语言"><a href="#如何学习一门语言" class="headerlink" title="如何学习一门语言"></a>如何学习一门语言</h2><p>我并不是一个英语为母语的人，当我13岁移民到美国时我学习的英语，我会通过做三件事情建立我的语言能力：</p><ol><li>学习语法规则</li><li>扩展我的词汇量</li><li>练习，练习，练习</li></ol><p>同样的，为了说好Vim语言，你需要学习语法规则，增加词汇量，并且不断练习直到你可以把执行命令变成肌肉记忆。</p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><p>你只需要知道一个Vim语言的语法规则：</p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">verb</span> + noun <span class="hljs-comment"># 动词 + 名词</span><br></code></pre></td></tr></table></figure><p>这就类似与在英语中的祈使句：</p><ul><li>“Eat(verb) a donut(noun)”</li><li>“Kick(verb) a ball(noun)”</li><li>“Learn(verb) the Vim Editor(noun)”</li></ul><p>现在你需要的就是用Vim中基本的动词和名字来建立你的词汇表</p><h2 id="名词-动作-Motion"><a href="#名词-动作-Motion" class="headerlink" title="名词(动作 Motion)"></a>名词(动作 Motion)</h2><p>我们这里将 <strong>动作 Motion</strong> 作为名词， <strong>动作Motion</strong>用来在Vim中到处移动。下面列出了一些常见的<strong>动作</strong>的例子：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">h</span>左<br>j下<br>k上<br>l右<br>w向前移动到下一个单词的开头<br>&#125;跳转到下一个段落<br><span class="hljs-variable">$</span>跳转到当前行的末尾<br></code></pre></td></tr></table></figure><p>在之后的章节你将学习更多的关于<strong>动作</strong>的内容，所以如果你不理解上面这些<strong>动作</strong>也不必担心。</p><h2 id="动词-操作符-Operator"><a href="#动词-操作符-Operator" class="headerlink" title="动词(操作符 Operator)"></a>动词(操作符 Operator)</h2><p>根据<code>:h operator</code>，Vim共有16个<strong>操作符</strong>，然而根据我的经验，学习这3个<strong>操作符</strong>在80%的情况下就已经够用了</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">y</span><span class="hljs-function"><span class="hljs-title">yank</span>(复制)</span><br><span class="hljs-variable">d</span><span class="hljs-function"><span class="hljs-title">delete</span>(删除)</span><br><span class="hljs-variable">c</span><span class="hljs-variable">change</span> 删除文本，将删除的文本存到寄存器中，进入插入模式<br></code></pre></td></tr></table></figure><p>顺带说一句，当你yank一段文本后，您可以使用<code>p</code>将它粘贴到光标后，或使用<code>P</code>粘贴到光标前。</p><h2 id="动词（操作符-Operator）和名词（动作-motions）的结合"><a href="#动词（操作符-Operator）和名词（动作-motions）的结合" class="headerlink" title="动词（操作符 Operator）和名词（动作 motions）的结合"></a>动词（操作符 Operator）和名词（动作 motions）的结合</h2><p>现在你已经知道了基本的动词和名词，我们来用一下我们的语法规则，动词和名词的结合！假设你有下面这段文本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> learn = <span class="hljs-string">&quot;Vim&quot;</span>;<br></code></pre></td></tr></table></figure><ul><li>复制当前位置到行尾的所有内容：<code>y$</code></li><li>删除当前位置到下一个单词的开头：<code>dw</code></li><li>修改当前位置到这个段落的结尾：<code>c&#125;</code></li></ul><p><strong>动作 motions</strong>也接受数字作为参数(这个部分我将在下个章节展开)，如果你需要向上移动3行，你可以用<code>3k</code>代替按3次<code>k</code>，数字可应用在Vim语法中。</p><ul><li>向左拷贝2个字符：<code>y2h</code></li><li>删除后两个单词：<code>d2w</code></li><li>修改后面两行：<code>c2j</code></li></ul><p>目前，你也许需要想很久才能完成一个简单的命令，不过我刚开始时也是这样，我也经历过类似的挣扎的阶段但是不久我的速度就快了起来，你也一样。唯一途径就是重复、重复再重复。</p><p>作为补充，行级的 <strong>操作符 operations</strong> (作用在整行中的操作符)在文本编辑中和其他的 <strong>操作符</strong> 一样，Vim允许你通过按两次 <strong>操作符</strong>使它执行行级的操作，例如<code>dd</code>，<code>yy</code>，<code>cc</code>来执行删除，复制或修改整个行。您可以使用其他operations试一下（比如<code>gUgU</code>）。</p><p>666!从这可以看出Vim命令的一种执行模式。但是到目前为止还没有结束，Vim有另一种类型的名词：文本对象(text object)</p><h2 id="更多名词-文本对象-Text-Objects"><a href="#更多名词-文本对象-Text-Objects" class="headerlink" title="更多名词(文本对象 Text Objects)"></a>更多名词(文本对象 Text Objects)</h2><p>想象一下你现在正在某个被括号包围的文本中例如<code>(hello Vim)</code>，你现在想要删掉括号中的所有内容，你会怎样快速的完成它？是否有一种方法能够把括号中内容作为整体删除呢？</p><p>答案是有的。文本通常是结构化的，特别是代码中，文本经常被放置在小括号、中括号、大括号、引号等当中。Vim提供了一种处理这种结构的文本对象的方法。</p><p>文本对象可以被 <strong>操作符 operations</strong> 使用，这里有两类文本对象：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span> + <span class="hljs-selector-tag">object</span>  内部文本对象<br><span class="hljs-selector-tag">a</span> + <span class="hljs-selector-tag">object</span>  外部文本对象<br></code></pre></td></tr></table></figure><p><strong>内部文本对象</strong>选中的部分不包含包围文本对象的空白或括号等，<strong>外部文本对象</strong>则包括了包围内容的空白或括号等对象。外部对象总是比内部对象选中的内容更多。如果你的光标位于一对括号内部，例如<code>(hello Vim)</code>中：</p><ul><li>删除括号内部的内容但保留括号：<code>di(</code></li><li>删除括号以及内部的内容：<code>da(</code></li></ul><p>让我们看一些别的例子，假设你有这样一段Javascript的函数，你的光标停留在”Hello”中的”H”上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> hello = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello Vim&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>删除整个”Hello Vim”：<code>di(</code></li><li>删除整个函数(被{}包含)：<code>di&#123;</code></li><li>删除”Hello”这个词：<code>diw</code></li></ul><p>文本对象很强大因为你可以在同一个位置指向不同的内容，可以删除一对小括号中的文本，也可以是当前大括号中的函数体，也可以是当前单词。这一点也很好记忆，当你看到<code>di(</code>，<code>di&#123;</code>和<code>diw</code>时，你也可以很好的意识到他们表示的是什么：小括号，大括号，单词。</p><p>让我们来看最后一个例子。假设你有这样一些html的标签的文本：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Header1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph1<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Paragraph2<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果你的光标位于”Header1”文本上：</p><ul><li>删除”Header1”：<code>dit</code></li><li>删除<code>&lt;h1&gt;Header1&lt;/h1&gt;</code>：<code>dat</code></li></ul><p>如果你的光标在”div”文本上：</p><ul><li>删除<code>h1</code>和所有<code>p</code>标签的行：<code>dit</code></li><li>删除所有文本：<code>dat</code></li><li>删除”div”：<code>di&lt;</code></li></ul><p>下面列举的一些通常见到的文本对象：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 1c">w     一个单词<br>p     一个段落<br>s     一个句子<br>(或)  一对()<br>&#123;或&#125;  一对&#123;&#125;<br>[或]  一对[]<br>&lt;或&gt;  一对&lt;&gt;<br>t     XML标签<br><span class="hljs-string">&quot;     一对&quot;&quot;</span><br>&#x27;     一对&#x27;&#x27;<br>`     一对``<br></code></pre></td></tr></table></figure><p>你可以通过<code>:h text-objects</code>了解更多</p><h2 id="结合性和语法"><a href="#结合性和语法" class="headerlink" title="结合性和语法"></a>结合性和语法</h2><p>在学习Vim的语法之后，让我们来讨论一下Vim中的结合性以及为什么在文本编辑器中这是一个强大的功能。</p><p>结合性意味着你有很多可以组合起来完成更复杂命令的普通命令，就像你在编程中可以通过一些简单的抽象建立更复杂的抽象，在Vim中你可以通过简单的命令的组合执行更复杂的命令。Vim语法正是Vim中命令的可结合性的体现。</p><p>Vim的结合性最强大之处体现在它和外部程序结合时，Vim有一个 <strong>过滤操作符</strong><code>!</code>可以用外部程序过滤我们的文本。假设你有下面这段混乱的文本并且你想把它用tab格式化的更好看的一些：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">Id|<span class="hljs-type">Name</span>|<span class="hljs-type">Cuteness</span><br><span class="hljs-number">01</span>|<span class="hljs-type">Puppy</span>|<span class="hljs-type">Very</span><br><span class="hljs-number">02</span>|<span class="hljs-type">Kitten</span>|<span class="hljs-type">Ok</span><br><span class="hljs-number">03</span>|<span class="hljs-type">Bunny</span>|<span class="hljs-type">Ok</span><br></code></pre></td></tr></table></figure><p>这件事情通过Vim命令不太容易完成，但是你可以通过终端提供的命令<code>column</code>很快的完成它，当你的光标位于”Id”上时，运行<code>!&#125;column -t -s &quot;|&quot;</code>，你的文本就变得整齐了许多：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">Id  Name    Cuteness<br><span class="hljs-number">01</span>  Puppy   Very<br><span class="hljs-number">02</span>  Kitten  <span class="hljs-literal">Ok</span><br><span class="hljs-number">03</span>  Bunny   <span class="hljs-literal">Ok</span><br></code></pre></td></tr></table></figure><p>让我们分解一下上面那条命令，动词是<code>!</code>(<strong>过滤操作符</strong>)，名词是<code>&#125;</code>(到下一个段落)。<strong>过滤操作符</strong><code>!</code>接受终端命令作为另一个参数，因此我把<code>column -t -s &quot;|&quot;</code>传给它。我不想详细描述<code>column</code>是如何工作的，但是总之它格式化了文本。</p><p>假设你不止想格式化你的文本，还想只展示<code>Ok</code>结尾的行，你知道<code>awk</code>命令可以做这件事情，那么你可以这样做：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">!&#125;column -t -s <span class="hljs-string">&quot;|&quot;</span> | awk <span class="hljs-string">&#x27;NR &gt; 1 &amp;&amp; /Ok/&#123;print <span class="hljs-subst">$0</span>&#125;&#x27;</span><br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">02 </span> Kitten  Ok<br><span class="hljs-symbol">03 </span> Bunny   Ok<br></code></pre></td></tr></table></figure><p>666！管道竟然在Vim中也能起作用。</p><p>这就是Vim的结合性的强大之处。你知道的动词 <strong>操作符</strong>，名词 <strong>动作</strong>，终端命令越多，你组建复杂操作的能力成倍增长。</p><p>换句话说，假设你只知道四个<strong>动作</strong>：<code>w, $, &#125;, G</code>和删除操作符(<code>d</code>)，你可以做8件事：按四种方式移动(<code>w, $, &#125;, G</code>)和删除4种文本对象(<code>dw, d$, d&#125;, dG</code>)。如果有一天你学习了小写变大写的<strong>操作符</strong>(<code>gU</code>)，你的Vim工具箱中多的不是1种工具，而是4种：<code>gUw, gU$, gU&#125;, gUG</code>。现在你的Vim工具箱中就有12种工具了。如果你知道10个<strong>动作</strong>和5个<strong>操作符</strong>，那么你就有60种工具(50个操作+10个移动)。另外，行号动作(<code>nG</code>)给你了<code>n</code>种<strong>动作</strong>，其中<code>n</code>是你文件中的行数(例如前往第5行，<code>5G</code>)。搜索动作(<code>/</code>)实际上给你带来无限数量的<strong>动作</strong>因为你可以搜索任何内容。你知道多少终端命令，外部命令操作符(<code>!</code>)就给你了多少种过滤工具。使用Vim这种能够组合的工具，所有你知道的东西都可以被串起来完成更复杂的操作。你知道的越多，你就越强大。</p><p>这种具有结合性的行为也正符合Unix的哲学：<em>一个命令做好一件事</em>。<strong>动作</strong>只需要做一件事：前往X。<strong>操作符</strong>只需要做一件事：完成Y。通过结合一个<strong>操作符</strong>和一个<strong>动作</strong>，你就获得了YX：在X上完成Y。</p><p>甚至，<strong>动作</strong>和<strong>操作符</strong>都是可拓展的，你可以自己创造<strong>动作</strong>和<strong>操作符</strong>去丰富你的Vim工具箱，<a href="https://github.com/kana/vim-textobj-user"><code>Vim-textobj-user</code></a>插件允许你创建自己的文本对象，同时包含有<a href="https://github.com/kana/vim-textobj-user/wiki">一系列定义好的文本对象</a>。</p><p>另外，如果你不知道我刚才使用的<code>column</code>和<code>awk</code>命令也没有关系，重要的是Vim可以和终端命令很好的结合起来。</p><h2 id="聪明地学习语法"><a href="#聪明地学习语法" class="headerlink" title="聪明地学习语法"></a>聪明地学习语法</h2><p>你刚刚学完Vim唯一的语法规则：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">verb + <span class="hljs-built_in">noun</span><br></code></pre></td></tr></table></figure><p>我学Vim中最大的”AHA moment”之一是当我刚学完大写命令(<code>gU</code>)时，想要把一个单词变成大写，我本能的运行了<code>gUiW</code>，它居然成功了，我光标所在的单词都大写了。我正是从那是开始理解Vim的。我希望你也会在不久之后有你自己的”AHA moment”，如果之前没有的话。</p><p>这一章的目标是向你展现Vim中的<code>verb+noun</code>模式，因此之后你就可以像学习一门新的语言一样渐进的学习Vim而不是死记每个命令的组合。</p><p>学习这种模式并且理解其中的含义，这是聪明的学习方式。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-在文件中移动</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch05_moving_in_file/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch05_moving_in_file/</url>
    
    <content type="html"><![CDATA[<h1 id="第05章-在文件中移动"><a href="#第05章-在文件中移动" class="headerlink" title="第05章 在文件中移动"></a>第05章 在文件中移动</h1><p>一开始，通过键盘移动会让你感觉特别慢特别不自在，但是不要放弃！一旦你习惯了它，比起鼠标你可以更快的在文件中去到任何地方。</p><p>这一章，你将学习必要的移动以及如何高效的使用它们。 记住，这一章所讲的并不是Vim的全部移动命令(motions)，我们的目标是介绍有用的移动来快速提高效率。 如果你需要学习更多的移动命令，查看<code>:h motion.txt</code>。</p><h2 id="字符导航"><a href="#字符导航" class="headerlink" title="字符导航"></a>字符导航</h2><p>最基本的移动单元是上下左右移动一个字符。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs mipsasm">h   左<br><span class="hljs-keyword">j </span>  下<br>k   上<br>l   右<br></code></pre></td></tr></table></figure><p>你也可以通过方向键进行移动，如果你只是初学者，使用任何你觉得最舒服的方法都没有关系。</p><p>我更喜欢<code>hjkl</code>因为我的右手可以保持在键盘上的默认姿势，这样做可以让我更快的敲到周围的键。 为了习惯它，我实际上在刚开始的时候通过<code>~/.vimrc</code>关闭了方向键：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;Up&gt;</span> <span class="hljs-symbol">&lt;NOP&gt;</span><br><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;Down&gt;</span> <span class="hljs-symbol">&lt;NOP&gt;</span><br><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;Left&gt;</span> <span class="hljs-symbol">&lt;NOP&gt;</span><br><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;Right&gt;</span> <span class="hljs-symbol">&lt;NOP&gt;</span><br></code></pre></td></tr></table></figure><p>也有一些插件可以帮助改掉这个坏习惯，其中有一个叫<a href="https://github.com/takac/vim-hardtime">vim-hardtime</a>。 让我感到惊讶的是，我只用了几天就习惯了使用<code>hjkl</code>。</p><p>另外，如果你想知道为什么Vim使用<code>hjkl</code>进行移动，<em>这实际上是因为Bill Joy写VI用的Lear-Siegler ADM-3A终端没有方向键，而是把<code>hjkl</code>当做方向键</em>。</p><p>如果你想移动到附近的某个地方，比如从一个单词的一个部分移动到另一个部分，我会使用<code>h</code>和<code>l</code>。 如果我需要在可见的范围内上下移动几行，我会使用<code>j</code>和<code>k</code>。 如果我想去更远的地方，我倾向于使用其他移动命令。</p><h2 id="相对行号"><a href="#相对行号" class="headerlink" title="相对行号"></a>相对行号</h2><p>我觉得设置<code>number</code>和<code>relativenumber</code>非常有用，你可以在<code>~/.vimrc</code>中设置:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">set</span> relativenumber <span class="hljs-built_in">number</span><br></code></pre></td></tr></table></figure><p>这将会展示当前行号和其他行相对当前行的行号。</p><p>为什么这个功能有用呢？这个功能能够帮助我知道我离我的目标位置差了多少行，有了它我可以很轻松的知道我的目标行在我下方12行，因此我可以使用<code>12j</code>去前往。 否则，如果我在69行，我的目标是81行，我需要去计算81-69&#x3D;12行，这太费劲了，当我需要去一个地方时，我需要思考的部分越少越好。</p><p>这是一个100%的个人偏好，你可以尝试<code>relativenumber</code>&#x2F;<code>norelativenumber</code>，<code>number</code>&#x2F;<code>nonumber</code> 然后选择自己觉得最有用的。</p><h2 id="对移动计数"><a href="#对移动计数" class="headerlink" title="对移动计数"></a>对移动计数</h2><p>在继续之前，让我们讨论一下”计数”参数。 一个移动(motion)可以接受一个数字前缀作为参数，上面我提到的你可以通过<code>12j</code>向下移动12行，其中<code>12j</code>中的<code>12</code>就是计数数字。</p><p>你使用带计数的移动的语法如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-string">[计数]</span> + 移动<br></code></pre></td></tr></table></figure><p>你可以把这个应用到所有移动上，如果你想向右移动9个字符，你可以使用<code>9l</code>来代替按9次<code>l</code>。 当你学到了更多的动作时，你都可以试试给定计数参数。</p><h2 id="单词导航"><a href="#单词导航" class="headerlink" title="单词导航"></a>单词导航</h2><p>我们现在移动一个更长的单元：单词(word)。 你可以通过<code>w</code>移动到下一个单词的开始，通过<code>e</code>移动到下一个单词的结尾，通过<code>b</code>移动到上一个单词的开始，通过<code>ge</code>移动到前一个单词的结尾。</p><p>另外，为了和上面说的单词(word)做个区分，还有一种移动的单元：词组(WORD)。 你可以通过<code>W</code>移动到下一个词组的开始，通过<code>E</code>移动到下一个词组的结尾，通过<code>B</code>移动到前一个词组的开头，通过<code>gE</code>移动到前一个词组的结尾。 为了方便记忆，所以我们选择了词组和单词这两个词，相似但有些区分。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs armasm">w移动到下一个单词的开头<br>W移动到下一个词组的开头<br>e移动到下一个单词的结尾<br>E移动到下一个词组的结尾<br><span class="hljs-keyword">b</span>移动到前一个单词的开头<br><span class="hljs-keyword">B</span>移动到前一个词组的开头<br><span class="hljs-symbol">ge</span>移动到前一个单词的结尾<br><span class="hljs-symbol">gE</span>移动到前一个词组的结尾<br></code></pre></td></tr></table></figure><p>词组和单词到底有什么相同和不同呢？单词和词组都按照非空字符被分割，一个单词指的是一个只包含<code>a-zA-Z0-9</code>字符串，一个词组指的是一个包含除了空字符(包括空格，tab，EOL)以外的字符的字符串。 你可以通过<code>:h word</code>和<code>:h WORD</code>了解更多。</p><p>例如，假如你有下面这段内容：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const hello <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>当你光标位于这行的开头时，你可以通过<code>l</code>走到行尾，但是你需要按21下，使用<code>w</code>，你需要6下，使用<code>W</code>只需要4下。 单词和词组都是短距离移动的很好的选择。</p><p>然而，之后你可以通过当前行导航只按一次从<code>c</code>移动到<code>;</code>。</p><h2 id="当前行导航"><a href="#当前行导航" class="headerlink" title="当前行导航"></a>当前行导航</h2><p>当你在进行编辑的时候，你经常需要水平地在一行中移动，你可以通过<code>0</code>跳到本行第一个字符，通过<code>$</code>跳到本行最后一个字符。 另外，你可以使用<code>^</code>跳到本行第一个非空字符，通过<code>g_</code>跳到本行最后一个非空字符。 如果你想去当前行的第n列，你可以使用<code>n|</code>。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">0</span>跳到本行第一个字符<br>^跳到本行第一个非空字符<br>g_      跳到本行最后一个非空字符<br>$跳到本行最后一个字符<br><span class="hljs-built_in">n</span>|      跳到本行第<span class="hljs-built_in">n</span>列<br></code></pre></td></tr></table></figure><p>你也可以在本行通过<code>f</code>和<code>t</code>进行行内搜索，<code>f</code>和<code>t</code>的区别在于<code>f</code>会停在第一个匹配的字母上，<code>t</code>会停在第一个匹配的字母前。 因此如果你想要搜索并停留在”h”上，使用<code>fh</code>。 如果你想搜索第一个”h”并停留在它的前一个字母上，可以使用<code>th</code>。 如果你想去下一个行内匹配的位置，使用<code>;</code>，如果你想去前一个行内匹配的位置，使用<code>,</code>。</p><p><code>F</code>和<code>T</code>是<code>f</code>和<code>t</code>对应的向后搜索版本。如果想向前搜索”h”，可以使用<code>Fh</code>，使用<code>;</code>，保持相同的搜索方向搜索下一个匹配的字母。 注意，<code>;</code>不是总是向后搜索，<code>;</code>表示的是上一次搜索的方向，因此如果你使用的<code>F</code>，那么使用<code>;</code>时将会向前搜索使用<code>,</code>时向后搜索。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs excel">f   在同一行向后搜索第一个匹配<br>F   在同一行向前搜索第一个匹配<br><span class="hljs-built_in">t</span>   在同一行向后搜索第一个匹配，并停在匹配前<br><span class="hljs-built_in">T</span>   在同一行向前搜索第一个匹配，并停在匹配前<br>;   在同一行重复最近一次搜索<br>,   在同一行向相反方向重复最近一次搜索<br></code></pre></td></tr></table></figure><p>回到上一个例子：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const hello <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>当你的光标位于行的开头时，你可以通过按一次键<code>$</code>去往行尾的最后一个字符”;”。 如果想去往”world”中的”w”，你可以使用<code>fw</code>。 一个建议是，在行内目标附近通过寻找重复出现最少的字母例如”j”，”x”，”z”来前往行中的该位置更快。</p><h2 id="句子和段落导航"><a href="#句子和段落导航" class="headerlink" title="句子和段落导航"></a>句子和段落导航</h2><p>接下来两个移动的单元是句子和段落。</p><p>首先我们来聊聊句子。 一个句子的定义是以<code>.!?</code>和跟着的一个换行符或空格，tab结尾的。 你可以通过<code>)</code>和<code>(</code>跳到下一个和上一个句子。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(   跳到前一个句子</span><br><span class="hljs-comment">)</span>   跳到下一个句子<br></code></pre></td></tr></table></figure><p>让我们来看一些例子，你觉得哪些字段是句子哪些不是? 可以尝试在Vim中用<code>(</code>和<code>)</code>感受一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> am <span class="hljs-selector-tag">a</span> sentence. <span class="hljs-selector-tag">I</span> am another sentence because <span class="hljs-selector-tag">I</span> end with <span class="hljs-selector-tag">a</span> period. <span class="hljs-selector-tag">I</span> am still <span class="hljs-selector-tag">a</span> sentence when ending with an exclamation point! What about question <span class="hljs-selector-tag">mark</span>? <span class="hljs-selector-tag">I</span> am not quite <span class="hljs-selector-tag">a</span> sentence because of the hyphen - and neither semicolon ; nor colon :<br><br>There is an empty line above me.<br><br></code></pre></td></tr></table></figure><p>另外，如果你的Vim中遇到了无法将一个以<code>.</code>结尾的字段并且后面跟着一个空行的这种情况判断为一个句子的问题，你可能处于<code>compatible</code>的模式。 运行<code>:set nocompatible</code>可以修复。 在Vi中，一个句子是以<strong>两个</strong>空格结尾的，你应该总是保持的<code>nocompatible</code>的设置。</p><p>接下来，我们将讨论什么是段落。 一个段落可以从一个空行之后开始，也可以从段落选项(<code>paragraphs</code>)中”字符对”所指定的段落宏的每个集合开始。</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;   跳转到上一个段落</span><br><span class="hljs-template-variable">&#125;</span><span class="language-xml">   跳转到下一个段落</span><br></code></pre></td></tr></table></figure><p>如果你不知道什么是段落宏，不用担心，重要的是一个段落总是以一个空行开始和结尾， 在大多数时候总是对的。</p><p>我们来看这个例子。 你可以尝试着使用<code>&#125;</code>和<code>&#123;</code>进行导航，也可以试一试<code>()</code>这样的句子导航。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">Hello. How are you? I am great, thanks!<br>Vim <span class="hljs-keyword">is</span> awesome.<br>It may <span class="hljs-keyword">not</span> easy <span class="hljs-keyword">to</span> learn <span class="hljs-keyword">it</span> <span class="hljs-keyword">at</span> <span class="hljs-keyword">first</span>...- <span class="hljs-keyword">but</span> we are <span class="hljs-keyword">in</span> this together. Good luck!<br><br>Hello again.<br><br>Try <span class="hljs-keyword">to</span> move <span class="hljs-keyword">around</span> <span class="hljs-keyword">with</span> ), (, &#125;, <span class="hljs-keyword">and</span> &#123;. Feel how they work.<br>You got this.<br></code></pre></td></tr></table></figure><p>你可以通过<code>:h setence</code>和<code>:h paragraph</code>了解更多。</p><h2 id="匹配导航"><a href="#匹配导航" class="headerlink" title="匹配导航"></a>匹配导航</h2><p>程序员经常编辑含有代码的文件，这种文件内容会包含大量的小括号，中括号和大括号，并且可能会把你搞迷糊你当前到底在哪对括号里。 许多编程语言都用到了小括号，中括号和大括号，你可能会迷失于其中。 如果你在它们中的某一对括号中，你可以通过<code>%</code>跳到其中一个括号或另一个上(如果存在)。 你也可以通过这种方法弄清你是否各个括号都成对匹配了。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-comment">%    Navigate to another match, usually works for (), [], &#123;&#125;</span><br></code></pre></td></tr></table></figure><p>我们来看一段Scheme代码示例因为它用了大量的小括号。 你可以在括号中用<code>%</code>移动</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name"><span class="hljs-built_in">define</span></span> (<span class="hljs-name">fib</span> n)<br>  (<span class="hljs-name"><span class="hljs-built_in">cond</span></span> ((<span class="hljs-name"><span class="hljs-built_in">=</span></span> n <span class="hljs-number">0</span>) <span class="hljs-number">0</span>)<br>        ((<span class="hljs-name"><span class="hljs-built_in">=</span></span> n <span class="hljs-number">1</span>) <span class="hljs-number">1</span>)<br>        (<span class="hljs-name"><span class="hljs-built_in">else</span></span><br>          (<span class="hljs-name"><span class="hljs-built_in">+</span></span> (<span class="hljs-name">fib</span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> n <span class="hljs-number">1</span>)) (<span class="hljs-name">fib</span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span> n <span class="hljs-number">2</span>)))<br>        )))<br></code></pre></td></tr></table></figure><p>我个人喜欢使用类似<a href="https://github.com/frazrepo/vim-rainbow">vim-rainbow</a>这样的可视化指示插件来作为<code>%</code>的补充。 通过<code>:h %</code>了解更多。</p><h2 id="行号导航"><a href="#行号导航" class="headerlink" title="行号导航"></a>行号导航</h2><p>你可以通过<code>nG</code>调到行号为<code>n</code>的行，例如如果你想跳到第7行，你可以使用<code>7G</code>，跳到第一行使用<code>gg</code>或<code>1G</code>，跳到最后一行使用<code>G</code>。</p><p>有时你不知道你想去的位置的具体行号，但是知道它大概在整个文件的70%左右的位置，你可以使用<code>70%</code>跳过去，可以使用<code>50%</code>跳到文件的中间。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">gg      跳转到第一行<br>G       跳转到最后一行<br>nG      跳转到第<span class="hljs-built_in">n</span>行<br><span class="hljs-built_in">n</span>%      跳到文件的<span class="hljs-built_in">n</span>%<br></code></pre></td></tr></table></figure><p>另外，如果你想看文件总行数，可以用<code>CTRL-g</code>查看。</p><h2 id="窗格导航"><a href="#窗格导航" class="headerlink" title="窗格导航"></a>窗格导航</h2><p>为了移动到当前窗格的顶部，中间，底部，你可以使用<code>H</code>，<code>M</code>和<code>L</code>。</p><p>你也可以给<code>H</code>和<code>L</code>传一个数字前缀。 如果你输入<code>10H</code>你会跳转到窗格顶部往下数10行的位置，如果你输入<code>3L</code>，你会跳转到距离当前窗格的底部一行向上数3行的位置。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs excel">H   跳转到屏幕的顶部<br>M   跳转到屏幕的中间<br>L   跳转到屏幕的底部<br>nH  跳转到距离顶部<span class="hljs-built_in">n</span>行的位置<br>nL  跳转到距离底部<span class="hljs-built_in">n</span>行的位置<br></code></pre></td></tr></table></figure><h2 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h2><p>在文件中滚动，你有三种速度可以选择： 滚动一整页(<code>CTRL-F</code>&#x2F;<code>CTRL-B</code>)，滚动半页(<code>CTRL-D</code>&#x2F;<code>CTRL-U</code>)，滚动一行<code>CTRL-E</code>&#x2F;<code>CTRL-Y</code>)。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Ctrl</span>-e    向下滚动一行<br><span class="hljs-symbol">Ctrl</span>-d    向下滚动半屏<br><span class="hljs-symbol">Ctrl</span>-f    向下滚动一屏<br><span class="hljs-symbol">Ctrl</span>-y    向上滚动一行<br><span class="hljs-symbol">Ctrl</span>-u    向上滚动半屏<br><span class="hljs-symbol">Ctrl</span>-<span class="hljs-keyword">b</span>    向上滚动一屏<br></code></pre></td></tr></table></figure><p>你也可以相对当前行进行滚动</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">zt</span>    将当前行置于屏幕顶部附近<br>zz    将当前行置于屏幕中央<br>zb    将当前行置于屏幕底部<br></code></pre></td></tr></table></figure><h2 id="搜索导航"><a href="#搜索导航" class="headerlink" title="搜索导航"></a>搜索导航</h2><p>通常，你已经知道这个文件中有一个字段，你可以通过搜索导航非常快速的定位你的目标。 你可以通过<code>/</code>向下搜索，也可以通过<code>?</code>向上搜索一个字段。 你可以通过<code>n</code>重复最近一次搜索，<code>N</code>向反方向重复最近一次搜索。</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">/   向后搜索一个匹配<br>?   向前搜素一个匹配<br><span class="hljs-built_in">n</span>   重复上一次搜索(和上一次方向相同)<br><span class="hljs-built_in">N</span>   重复上一次搜索(和上一次方向相反)<br></code></pre></td></tr></table></figure><p>假设你有一下文本：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">one</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;01&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">one</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;one&quot;</span><span class="hljs-comment">;</span><br>let onetwo <span class="hljs-operator">=</span> <span class="hljs-number">12</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>你可以通过<code>/let</code>搜索”let”，然后通过<code>n</code>快速的重复搜索下一个”let”，如果需要向相反方向搜索，可以使用<code>N</code>。 如果你用<code>?let</code>搜索，会得到一个向前的搜索，这时你使用<code>n</code>，它会继续向前搜索，就和<code>?</code>的方向一致。(<code>N</code>将会向后搜索”let”)。</p><p>你可以通过<code>:set hlsearch</code>设置搜索高亮。 这样，当你搜索<code>/let</code>，它将高亮文件中所有匹配的字段。 另外，如果你通过<code>:set incsearch</code>设置了增量搜索，它将在你输入时不断匹配的输入的内容。 默认情况下，匹配的字段会一直高亮到你搜索另一个字段，这有时候很烦人，如果你希望取消高亮，可以使用<code>:nohlsearch</code>。 因为我经常使用这个功能，所以我会设置一个映射：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nnoremap &lt;esc&gt;&lt;esc&gt; <span class="hljs-symbol">:noh&lt;return&gt;&lt;esc&gt;</span><br></code></pre></td></tr></table></figure><p>你可以通过<code>*</code>快速的向前搜索光标下的文本，通过<code>#</code>快速向后搜索光标下的文本。 如果你的光标位于一个字符串”one”上，按下<code>*</code>相当于<code>/\&lt;one\&gt;</code>。<br><code>/\&lt;one\&gt;</code>中的<code>\&lt;</code>和<code>\&gt;</code>表示整词匹配，使得一个更长的包含”one”的单词不会被匹配上，也就是说它会匹配”one”，但不会匹配”onetwo”。 如果你的光标在”one”上并且你想向后搜索完全或部分匹配的单词，例如”one”和”onetwo”，你可以用<code>g*</code>替代<code>*</code>。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">*   向后查找光标所在的完整单词<br><span class="hljs-meta">#   向前查找光标所在的完整单词</span><br>g*  向后搜索光标所在的单词<br>g<span class="hljs-meta">#  向前搜索光标所在的单词</span><br></code></pre></td></tr></table></figure><h2 id="位置标记"><a href="#位置标记" class="headerlink" title="位置标记"></a>位置标记</h2><p>你可以通过标记保存当前位置并在之后回到这个位置，就像文本编辑中的书签。 你可以通过<code>mx</code>设置一个标记，其中<code>x</code>可以是<code>a-zA-Z</code>。 有两种办法能回到标记的位置： 用<code> `x</code>精确回到(行和列)，或者用<code>&#39;x</code>回到行级位置。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">ma    用<span class="hljs-keyword">a</span>标签标记一个位置<br>`<span class="hljs-keyword">a</span>    精确回到<span class="hljs-keyword">a</span>标签的位置(行和列)<br><span class="hljs-string">&#x27;a    跳转到a标签的行</span><br></code></pre></td></tr></table></figure><p><code>a-z</code>的标签和<code>A-Z</code>的标签存在一个区别，小写字母是局部标签，大写字母是全局标签(也称文件标记)。</p><p>我们首先说说局部标记。 每个buffer可以有自己的一套局部标记，如果打开了两个文件，我可以在第一个文件中设置标记”a”(<code>ma</code>)，然后在另一个文件中设置另一个标记”a”(<code>ma</code>)。</p><p>不像你可以在每个buffer中设置一套局部标签，你只能设置一套全局标签。 如果你在<code>myFile.txt</code>中设置了标签<code>mA</code>，下一次你在另一个文件中设置<code>mA</code>时，A标签的位置会被覆盖。 全局标签有一个好处就是，即使你在不同的项目红，你也可以跳转到任何一个全局标签上，全局标签可以帮助你在文件间切换。</p><p>使用<code>:marks</code>查看所有标签，你也许会注意到除了<code>a-zA-Z</code>以外还有别的标签，其中有一些例如：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">&#x27;&#x27;</span>   在当前<span class="hljs-built_in">buffer</span>中跳转回到上一次跳转前的最后一行<br><span class="hljs-string">``</span>  在当前<span class="hljs-built_in">buffer</span>中跳转回到上一次跳转前的最后一个位置<br><span class="hljs-string">`[  跳转到上一次修改或拷贝的文本的开头</span><br><span class="hljs-string">`</span>]  跳转到上一次修改或拷贝的文本的结尾<br><span class="hljs-string">`&lt;  跳转到最近一次可视模式下选择的部分的开头</span><br><span class="hljs-string">`</span>&gt;  跳转到最近一次可视模式下选择的部分的结尾<br><span class="hljs-string">`0  跳转到退出Vim前编辑的最后一个文件</span><br></code></pre></td></tr></table></figure><p>除了上面列举的，还有更多标记，我不会在这一一列举因为我觉得它们很少用到，不过如果你很好奇，你可以通过<code>: marks</code>查看。</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>最后，我们聊聊Vim中的跳转你通过任意的移动可以在不同文件中或者同一个的文件的不同部分间跳转。 然而并不是所有的移动都被认为是一个跳转。 使用<code>j</code>向下移动一行就不被看做一个跳转，即使你使用<code>10j</code>向下移动10行，也不是一个跳转。 但是你通过<code>10G</code>去往第10行被算作一个跳转。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">&#x27;   跳转到标记的行<br>`   跳转到标记的位置(行和列)<br>G   跳转到行<br>/   向后搜索<br>?   向前搜索<br>n   重复上一次搜索，相同方向<br>N   重复上一次搜索，相反方向<br>%   查找匹配<br>(   跳转上一个句子<br>)   跳转下一个句子<br>&#123;   跳转上一个段落<br>&#125;   跳转下一个段落<br>L   跳转到当前屏幕的最后一行<br>M   跳转到当前屏幕的中间<br>H   跳转到当前屏幕的第一行<br>[[  跳转到上一个小节<br>]]  跳转到下一个小节<br>:s  替换<br>:<span class="hljs-keyword">tag</span>  <span class="hljs-title">跳转到tag</span>定义<br></code></pre></td></tr></table></figure><p>我不建议你把上面这个列表记下来，一个大致的规则是，任何大于一个单词或超过当前行导航的移动都可能是一个跳转。 Vim保留了你移动前位置的记录，你可以通过<code>:jumps</code>查看这个列表，如果想了解更多，可以查看<code>:h jump-motions</code>。</p><p>为什么跳转有用呢? 因为你可以在跳转列表中通过<code>Ctrl-o</code>和<code>Ctrl-i</code>在记录之间向上或向下跳转到对应位置。 你可以在不同文件中进行跳转，这将是我之后会讲的部分。</p><h2 id="聪明地学习导航"><a href="#聪明地学习导航" class="headerlink" title="聪明地学习导航"></a>聪明地学习导航</h2><p>如果你是Vim的新手，这有很多值得你学，我不期望任何人能够立刻记住每样知识点，做到不用思考就能执行这需要一些时间。</p><p>我想，最好的开始的办法就是从一些少量的必要的移动开始记。 我推荐你从<code>h,j,k,l,w,b,G,/,?,n</code>开始，不断地重复这10个移动知道形成肌肉记忆，这花不了多少时间。</p><p>为了让你更擅长导航，我有两个建议：</p><ol><li>注意重复的动作。 如果你发现你自己在重复的使用<code>l</code>，你可以去找一个方法让你前进的更快，然后你会发现你可以用<code>w</code>在单词间移动。 如果你发现你自己的重复的使用<code>w</code>，你可以看看是否有一种方法能让你直接到行尾，然后你会想到可以用<code>$</code>。 如果你可以口语化的表达你的需求，Vim中大概就会有一种方法去完成它。</li><li>当你学习任何一个新的移动时，多需要花一定的时间直到你可以不经过思考直接完成它。</li></ol><p>最后，为了提高效率你不需要知道所有的Vim的命令，大多数Vim用户也都不知道，你只需要学习当下能够帮助你完成任务的命令。</p><p>慢慢来，导航技巧是Vim中很重要的技巧，每天学一点并且把它学好。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-输入模式</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch06_insert_mode/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch06_insert_mode/</url>
    
    <content type="html"><![CDATA[<h1 id="第06章-输入模式"><a href="#第06章-输入模式" class="headerlink" title="第06章 输入模式"></a>第06章 输入模式</h1><p>输入模式是大部分文本编辑器的默认模式，在这个模式下，所敲即所得。</p><p>尽管如此，这并不代表输入模式没什么好学的。Vim的输入模式包含许多有用功能。在这一章节中，你将能够学到如何利用Vim输入模式中的特性来提升你的输入效率。</p><h2 id="进入输入模式的方法"><a href="#进入输入模式的方法" class="headerlink" title="进入输入模式的方法"></a>进入输入模式的方法</h2><p>我们有很多方式从普通模式进入输入模式，下面列举出了其中的一些方法：</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">i</span>    从光标之前的位置开始输入文本<br><span class="hljs-selector-tag">I</span>    从当前行第一个非空字符之前的位置之前开始输入文本<br><span class="hljs-selector-tag">a</span>    在光标之后的位置追加文本<br><span class="hljs-selector-tag">A</span>    在当前行的末尾追加文本<br>o    在光标位置下方新起一行并开始输入文本<br>O    在光标位置的上方新起一行并开始输入文本<br>s    删除当前光标位置的字符并开始输入文本<br>S    删除当前行并开始输入文本<br>gi   从当前缓冲区上次结束输入模式的地方开始输入文本<br>gI   在当前行的第一列的位置开始输入文本<br></code></pre></td></tr></table></figure><p>值得注意的是这些命令的小写&#x2F;大写模式，每一个小写命令都有一个与之对应的大写命令。如果你是初学者，不用担心记不住以上整个命令列表，可以从 <code>i</code> 和 <code>a</code>两条命令开始，这两条命令足够在入门阶段使用了，之后再逐渐地掌握更多其他的命令。</p><h2 id="退出输入模式的方法"><a href="#退出输入模式的方法" class="headerlink" title="退出输入模式的方法"></a>退出输入模式的方法</h2><p>下面列出了一些从输入模式退出到普通模式的方法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">esc</span>&gt;</span>     退出输入模式进入普通模式<br>Ctrl-[    退出输入模式进入普通模式<br>Ctrl-c    与 Ctrl-[ 和 <span class="hljs-tag">&lt;<span class="hljs-name">esc</span>&gt;</span>功能相同, 但是不检查缩写<br></code></pre></td></tr></table></figure><p>我发现<code> esc</code>键在键盘上太远了，很难够到，所以我在我的机器上将<code> caps lock</code> 映射成了<code>esc</code>键。 如果你搜索Bill Joy（Vi的作者）的ADM-3A 键盘， 你会发现<code>esc</code>键并不是像现在流行的键盘布局一样在键盘的最左上方，而是在<code>q</code>键的左边，所以我认为将<code>caps lock</code> 映射成<code>esc</code>键是合理的。</p><p>另一个Vim用户中常见的习惯是用以下的配置方法在输入模式中把<code>esc</code>映射到<code>jj</code>或者<code>jk</code>。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">inoremap</span> jj <span class="hljs-symbol">&lt;esc&gt;</span><br><span class="hljs-keyword">inoremap</span> jk <span class="hljs-symbol">&lt;esc&gt;</span><br></code></pre></td></tr></table></figure><h2 id="重复输入模式"><a href="#重复输入模式" class="headerlink" title="重复输入模式"></a>重复输入模式</h2><p>你可以在进入输入模式之前传递一个计数参数. 比如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-number">10i</span><br></code></pre></td></tr></table></figure><p>如果你输入“hello world!”然后退出输入模式， Vim将重复这段文本10次。这个方法对任意一种进入输入模式的方式都有效（如：<code>10I</code>, <code>11a</code>, <code>12o</code>）</p><h2 id="在输入模式中删除大块文本"><a href="#在输入模式中删除大块文本" class="headerlink" title="在输入模式中删除大块文本"></a>在输入模式中删除大块文本</h2><p>当你输入过程中出现一些输入错误时，一直重复地用<code>backspace</code>来删除的话会非常地繁琐。更为合理的做法是切换到普通模式并使用<code>d</code>来删除错误。或者，你能用以下命令在输入模式下就删除一个或者多个字符：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">Ctrl-h    删除一个字符<br>Ctrl-w    删除一个单词<br>Ctrl-u    删除一整行<br></code></pre></td></tr></table></figure><p>此外，这些快捷键也支持在 命令行模式 和 Ex模式 中使用（命令行模式和Ex模式将会在之后的章节中介绍）</p><h2 id="用寄存器进行输入"><a href="#用寄存器进行输入" class="headerlink" title="用寄存器进行输入"></a>用寄存器进行输入</h2><p>寄存器就像是内存里的暂存器一样，可供存储和取出文本。在输入模式下，可以使用快捷键<code>Ctrl-r</code>加上寄存器的标识来从任何有标识的寄存器输入文本。有很多标识可供使用，但是在这一章节中你只需要知道以（a-z)命名的寄存器是可以使用的就足够了。</p><p>让我们在一个具体的例子中展示寄存器的用法，首先你需要复制一个单词到寄存器a中，这一步可以用以下这条命令来完成：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;ayiw</span><br></code></pre></td></tr></table></figure><ul><li><code>&quot;a</code> 告诉Vim你下一个动作的目标地址是寄存器a</li><li><code>yiw</code> 复制一个内词（inner word），可以回顾Vim语法章节查看具体语法。</li></ul><p>现在寄存器a存放着你刚复制的单词。在输入模式中，使用以下的快捷键来粘贴存放在寄存器a中文本：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">Ctrl-r <span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure><p>Vim中存在很多种类型的寄存器，我会在后面的章节中介绍更多他们的细节。</p><h2 id="页面滚动"><a href="#页面滚动" class="headerlink" title="页面滚动"></a>页面滚动</h2><p>你知道在输入模式中也是可以进行页面滚动的吗？在输入模式下，如果你使用快捷键<code>Ctrl-x</code>进入<code>Ctrl-x</code>子模式，你可以进行一些额外操作，页面滚动正是其中之一。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Ctrl-<span class="hljs-keyword">x</span> Ctrl-y    向上滚动页面<br>Ctrl-<span class="hljs-keyword">x</span> Ctrl-e    向下滚动页面<br></code></pre></td></tr></table></figure><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><p>Vim在进入<code>Ctrl-x</code>子模式后（和页面滚动一样），有一个自带的自动补全功能。尽管它不如intellisense或者其他的语言服务器协议（LSP）一样好用，但是也算是一个锦上添花的内置功能了。</p><p>下面列出了一些适合入门时学习的自动补全命令：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">Ctrl-<span class="hljs-keyword">x</span> Ctrl-l   补全一整行<br>Ctrl-<span class="hljs-keyword">x</span> Ctrl-n   从当前文件中补全文本<br>Ctrl-<span class="hljs-keyword">x</span> Ctrl-i   从引用（include）的文件中补全文本<br>Ctrl-<span class="hljs-keyword">x</span> Ctrl-f   补全一个文件名<br></code></pre></td></tr></table></figure><p>当你出发自动补全时，Vim会显示一个选项弹窗，可以使用<code>Ctrl-n</code>和<code>Ctrl-p</code>来分别向上和向下浏览选项。</p><p>Vim也提供了两条不需要进入<code>Ctrl-x</code>模式就能使用的命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">Ctrl-n             使用下一个匹配的单词进行补全<br>Ctrl-<span class="hljs-selector-tag">p</span>             使用上一个匹配的单词进行补全<br></code></pre></td></tr></table></figure><p>通常Vim会关注所有缓冲区（buffer）中的文本作为自动补全的文本来源。如果你打开了一个缓冲区，其中一行是”Chocolate donuts are the best”：</p><ul><li>当你输入”Choco”然后使用快捷键<code>Ctrl-x Ctrl-l</code>， Vim会进行匹配并输出这一整行的文本。</li><li>当你输入”Choco”然后使用快捷键<code>Ctrl-p</code>，Vim会进行匹配并输出”Chocolate”这个单词。</li></ul><p>Vim的自动补全是一个相当大的话题，以上只是冰山一角，想要进一步学习的话可以使用<code>:h ins-completion</code>命令进行查看。</p><h2 id="执行普通模式下的命令"><a href="#执行普通模式下的命令" class="headerlink" title="执行普通模式下的命令"></a>执行普通模式下的命令</h2><p>你知道Vim可以在输入模式下执行普通模式的命令吗？</p><p>在输入模式下， 如果你按下<code>Ctrl-o</code>，你就会进入到<code>insert-normal</code>（输入-普通）子模式。如果你关注一下左下角的模式指示器，通常你将看到<code>-- INSERT --</code> ，但是按下<code>Ctrl-o</code>后就会变为<code>-- (insert) --</code>。 在这一模式下，你可以执行一条普通模式的命令，比如你可以做以下这些事：</p><p><strong>设置居中以及跳转</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">Ctrl-o zz       居中窗口<br>Ctrl-o H<span class="hljs-regexp">/M/</span>L    跳转到窗口的顶部<span class="hljs-regexp">/中部/</span>底部<br>Ctrl-o <span class="hljs-string">&#x27;a       跳转到标志&#x27;</span>a处<br></code></pre></td></tr></table></figure><p><strong>重复文本</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Ctrl</span>-o <span class="hljs-number">100</span>ihello    输入 <span class="hljs-string">&quot;hello&quot;</span> <span class="hljs-number">100</span> 次<br></code></pre></td></tr></table></figure><p><strong>执行终端命令</strong></p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">Ctrl-o !! curl https://google.com    运行curl命令<br>Ctrl-o !! pwd                        运行pwd命令<br></code></pre></td></tr></table></figure><p><strong>快速删除</strong></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Ctrl</span><span class="hljs-operator">-</span><span class="hljs-variable">o</span> <span class="hljs-variable">dtz</span>    从当前位置开始删除文本，直到遇到字母<span class="hljs-string">&quot;z&quot;</span><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">-</span><span class="hljs-variable">o</span> <span class="hljs-built_in">D</span>      从当前位置开始删除文本，直到行末<br></code></pre></td></tr></table></figure><h2 id="聪明地学习输入模式"><a href="#聪明地学习输入模式" class="headerlink" title="聪明地学习输入模式"></a>聪明地学习输入模式</h2><p>如果你和我一样是从其他文本编辑器转到Vim的，你或许也会觉得一直待在输入模式下很有诱惑力，但是我强烈反对你在没有输入文本时，却仍然待在输入模式下。应该养成当你的双手没有在输入时，就退出到普通模式的好习惯。</p><p>当你需要进行输入时，先问问自己将要输入的文本是否已经存在。如果存在的话，试着复制或者移动这段文本而不是手动输入它。再问问自己是不是非得进入输入模式，试试能不能尽可能地使用自动补全来进行输入。尽量避免重复输入同一个单词。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-点命令</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch07_the_dot_command/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch07_the_dot_command/</url>
    
    <content type="html"><![CDATA[<h1 id="点命令"><a href="#点命令" class="headerlink" title="点命令"></a>点命令</h1><p>在编辑文本时，我们应该尽可能地避免重复的动作。在这一章节中，你将会学习如何使用点命令来重放上一个修改操作。点命令是最简单的命令，然而又是减少重复操作最为有用的命令。</p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>正如这个命令的名字一样，你可以通过按下<code>.</code>键来使用点命令。</p><p>比如，如果你想将下面文本中的所有”let“替换为”const”：</p><figure class="highlight abnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>首先，使用<code>/let</code>来进行匹配。</li><li>接着，使用<code>cwconst&lt;esc&gt;</code>来将”let”替换成”const”。</li><li>第三步，使用<code>n</code>来找到下一个匹配的位置。</li><li>最后，使用点命令(<code>.</code>)来重复之前的操作。</li><li>持续地使用<code>n . n .</code>直到每一个匹配的词都被替换。</li></ul><p>在这个例子里面，点命令重复的是<code>cwconst&lt;esc&gt;</code>这一串命令，它能够帮你将需要8次输入的命令简化到只需要敲击一次键盘。</p><h2 id="什么才算是修改操作？"><a href="#什么才算是修改操作？" class="headerlink" title="什么才算是修改操作？"></a>什么才算是修改操作？</h2><p>如果你查看点命令的定义的话(<code>:h .</code>),文档中说点命令会重复上一个修改操作，那么什么才算是一个修改操作呢？</p><p>当你使用普通模式下的命令来更新（添加，修改或者删除）当前缓冲区中的内容时，你就是在执行一个修改操作了。其中的例外是使用命令行命令进行的修改（以<code>：</code>开头的命令），这些命令不算作修改操作。</p><p>在第一个例子中，你看到的<code>cwconst&lt;esc&gt;</code>就是一个修改操作。现在假设你有以下这么一个句子：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">pancake,</span> potatoes, fruit-juice,<br></code></pre></td></tr></table></figure><p>我们来删除从这行开始的位置到第一个逗号出现的位置。你可以使用<code>df,</code>来完成这个操作,使用<code>.</code>来重复两次直到你将整个句子删除。</p><p>让我们再来试试另一个例子：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-built_in">pancake,</span> potatoes, fruit-juice,<br></code></pre></td></tr></table></figure><p>这一次你只需要删除所有的逗号，不包括逗号前面的词。我们可以使用<code>f,</code>来找到第一个逗号，再使用<code>x</code>来删除光标下的字符。然后使用用<code>.</code>来重复两次，很简单对不对？等等！这样做行不通(只会重复删除光标下的一个字符，而不是删除逗号)！为什么会这样呢？</p><p>在Vim里，修改操作是不包括移动（motions）的，因为移动(motions)不会更新缓冲区的内容。当你运行<code>f,x</code>，你实际上是在执行两个独立的操作：<code>f,</code>命令只移动光标，而<code>x</code>更新缓冲区的内容，只有后者算作修改动作。和之前例子中的<code>df,</code>进行一下对比的话，你会发现<code>df,</code>中的<code>f,</code>告诉删除操作<code>d</code>哪里需要删除，是整个删除命令<code>df,</code>的一部分。</p><p>让我们想想办法完成这个任务。在你运行<code>f,</code>并执行<code>x</code>来删除第一个逗号后，使用<code>;</code>来继续匹配<code>f</code>的下一个目标（下一个逗号）。之后再使用<code>.</code>来重复修改操作，删除光标下的字符。重复<code>; . ; .</code>直到所有的逗号都被删除。完整的命令即为<code>f,x;.;.</code>。</p><p>再来试试下一个例子：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pancake</span><br><span class="hljs-attribute">potatoes</span><br><span class="hljs-attribute">fruit-juice</span><br></code></pre></td></tr></table></figure><p>我们的目标是给每一行的结尾加上逗号。从第一行开始，我们执行命令<code>A,&lt;esc&gt;j</code>来给结尾加上逗号并移动到下一行。现在我们知道了<code>j</code>是不算作修改操作的，只有<code>A,</code>算作修改操作。你可以使用<code>j . j . </code>来移动并重复修改操作。完整的命令是<code>A,&lt;esc&gt;j</code>。</p><p>从你按下输入命令（A）开始到你退出输入模式（<esc>）之间的所有输入都算作是一整个修改操作。</p><h2 id="重复多行修改操作"><a href="#重复多行修改操作" class="headerlink" title="重复多行修改操作"></a>重复多行修改操作</h2><p>假设你有如下的文本：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br>const foo <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bar&quot;</span><span class="hljs-comment">;</span><br>let four <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment">;</span><br>let five <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-comment">;</span><br>let six <span class="hljs-operator">=</span> <span class="hljs-string">&quot;6&quot;</span><span class="hljs-comment">;</span><br>let seven <span class="hljs-operator">=</span> <span class="hljs-string">&quot;7&quot;</span><span class="hljs-comment">;</span><br>let eight <span class="hljs-operator">=</span> <span class="hljs-string">&quot;8&quot;</span><span class="hljs-comment">;</span><br>let nine <span class="hljs-operator">=</span> <span class="hljs-string">&quot;9&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>你的目标是删除除了含有”foo”那一行以外的所有行。首先，使用<code>d2j</code>删除前三行。之后跳过”foo”这一行，在其下一行使用点命令两次来删除剩下的六行。完整的命令是<code>d2jj..</code>。</p><p>这里的修改操作是<code>d2j</code>，<code>2j</code>不是一个移动(motion)操作，而是整个删除命令的一部分。</p><p>我们再来看看下一个例子：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">zlet zzone <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>zlet zztwo <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>zlet zzthree <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br>let four <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>我们的目标是删除所有的’z’。从第一行第一个字符开始，首先，在块可视化模式下使用<code>Ctrl-vjj</code>来选中前三行的第一个’z’字母。如果你对块可视化模式不熟悉的话也不用担心，我会在下一章节中进行介绍。在选中前三行的第一个’z’后，使用<code>d</code>来删除它们。接着用<code>w</code>移动到下一个z字母上，使用<code>..</code>重复两次之前选中加删除的动作。完整的命令为<code>Ctrl-vjjdw..</code>。</p><p>你删除一列上的三个’z‘的操作(<code>Ctrl-vjjd</code>)被看做一整个修改操作。可视化模式中的选择操作可以用来选中多行，作为修改动作的一部分。</p><h2 id="在修改中包含移动操作"><a href="#在修改中包含移动操作" class="headerlink" title="在修改中包含移动操作"></a>在修改中包含移动操作</h2><p>让我们来重新回顾一下本章中的第一个例子。这个例子中我们使用了<code>/letcwconst&lt;esc&gt;</code>紧接着<code>n . n .</code>将下面的文本中的’let’都替换成了’const’。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>其实还有更快的方法来完成整个操作。当你使用<code>/let</code>搜索后，执行<code>cgnconst&lt;Esc&gt;</code>，然后<code>. . .</code>。</p><p><code>gn</code>是一个移动并选择的动作，它向前搜索和上一个搜索的模式（本例中为<code>/let</code>）匹配的位置，并且 <strong>自动对匹配的文本进行可视化模式下的选取</strong>。想要对下一个匹配的位置进行替换的话，你不再需要先移动在重复修改操作（<code>n . n .</code>），而是简单地使用<code>. .</code>就能完成。你不需要再进行移动操作了，因为找到下一个匹配的位置并进行选中成为了修改操作的一部分了。</p><p>当你在编辑文本时，应该时刻关注像<code>gn</code>命令这种能一下子做好几件事的移动操作。</p><blockquote><p>（译者在这里研究了一会，并做了不少实验，总结规律是：单独的motion(第4章中所说的名词)不算修改操作，而opeartor(动词)+motion(名词)时(请回顾第4章)，motion被视为一个完整的修改操作中的一部分。再看一个例子，看看<code>/</code>命令是如何被包含在一个修改操作中的：</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">b</span><br>foo<br>c<br>d<br>foo<br>e<br>f<br></code></pre></td></tr></table></figure><blockquote><p>假设你的光标在第一行的a上，执行命令<code>d/foo&lt;Esc&gt;</code>，Vim会删除a,b。然后<code>.</code>，Vim会删除foo, c, d，再按<code>.</code>，Vim什么也不做，因为后面没有”foo”了。在这个例子中，<code>/foo</code>是一个motion（名词），是Vim语法(动词+名词：operator + motion)的一部分，前面的<code>d</code>则是动词。<code>d/foo&lt;Esc&gt;</code>这条命令的功能是：从当前光标所在位置开始删除，直到遇到”foo”为止。后面的点命令就重复这个功能，第二次按<code>.</code>之所以Vim什么也不做，是因为找不到下一个匹配了，所以这条命令就失效了。</p></blockquote><h2 id="聪明地学习点命令"><a href="#聪明地学习点命令" class="headerlink" title="聪明地学习点命令"></a>聪明地学习点命令</h2><p>点命令的强大之处在于使用仅仅1次键盘敲击代替好几次敲击。对于<code>x</code>这种只需一次敲击键盘就能完成的修改操作来说，点命令或许不会带来什么收益。但是如果你的上一个修改操作是像<code>cgnconst&lt;esc&gt;</code>这种复杂命令的话，使用点命令来替代就有非常可观的收益了。</p><p>在进行编辑时，思考一下你正将进行的操作是否是可以重复的。举个例子，如果我需要删除接下来的三个单词，是使用<code>d3w</code>更划算，还是<code>dw</code>再使用<code>.</code>两次更划算？之后还会不会再进行删除操作？如果是这样的话，使用<code>dw</code>好几次确实比<code>d3w</code>更加合理，因为<code>dw</code>更加有复用性。在编辑时应该养成“修改操作驱动”的观念。</p><p>点命令非常简单但又功能强大，帮助你开始自动化处理简单的任务。在后续的章节中，你将会学习到如何使用Vim的宏命令来自动化处理更多复杂的操作。但是首先，还是让我们来学习一下如何使用寄存器来存取文本吧。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-寄存器</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch08_registers/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch08_registers/</url>
    
    <content type="html"><![CDATA[<h1 id="第08章-寄存器"><a href="#第08章-寄存器" class="headerlink" title="第08章 寄存器"></a>第08章 寄存器</h1><p>学习Vim中的寄存器就像第一次学习线性代数一样，除非你学习了他们，否则你会觉得自己根本不需要它们。</p><p>你可能已经在复制或删除文本并用<code>p</code>或<code>P</code>粘贴它们到别处的时候使用过Vim的寄存器了。但是，你知道Vim总共有10种不同类型的寄存器吗？如果正确地使用Vim寄存器，将帮助您从重复的输入中解放出来。</p><p>在这一章节中，我会介绍Vim的所有寄存器类型，以及如何有效地使用它们。</p><h2 id="寄存器的10种类型"><a href="#寄存器的10种类型" class="headerlink" title="寄存器的10种类型"></a>寄存器的10种类型</h2><p>下面是Vim所拥有的10种寄存器类型：</p><ol><li>匿名寄存器（<code>&quot;&quot;</code>）.</li><li>编号寄存器(<code>&quot;0-9</code>).</li><li>小删除寄存器 (<code>&quot;-</code>).</li><li>命名寄存器 (<code>&quot;a-z</code>).</li><li>只读寄存器 (<code>&quot;:</code>, <code>&quot;.</code>, and <code>&quot;%</code>).</li><li>Buffer交替文件寄存器 (<code>&quot;#</code>).</li><li>表达式寄存器 (<code>&quot;=</code>).</li><li>选取和拖放寄存器(<code>&quot;*</code> and <code>&quot;+</code>).</li><li>黑洞寄存器 (<code>&quot;_</code>).</li><li>搜索模式寄存器 (<code>&quot;/</code>).</li></ol><h2 id="寄存器命令"><a href="#寄存器命令" class="headerlink" title="寄存器命令"></a>寄存器命令</h2><p>要使用寄存器，您必须先使用命令将内容存储到寄存器，以下是一些存值到寄存器中的操作：</p><figure class="highlight llvm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm">y    复制<br><span class="hljs-keyword">c</span>    删除文本并进入输入模式<br>d    删除文本<br></code></pre></td></tr></table></figure><p>其实还有更多的寄存器写入操作（比如<code>s</code>或<code>x</code>），但是上面列出的是最常用的一些。根据经验看来，如果一个操作删除了文本，那么很有可能这个操作将移除的文本存入寄存器中了。</p><p>想要从寄存器中取出（粘贴）文本，你可以用以下的命令：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>    在光标位置之后粘贴文本<br><span class="hljs-selector-tag">P</span>    在光标位置之前粘贴文本<br></code></pre></td></tr></table></figure><p><code>p</code>和<code>P</code>都可以接受计数和一个寄存器标志作为参数。比如，想要把最近复制的文本粘贴10次的话可以用<code>10p</code>。想粘贴寄存器”a”中的文本，可以用<code>&quot;ap</code>。想将寄存器“a”中的文本粘贴10次的话，可以使用<code>10&quot;ap</code>。注意，从技术层面讲，命令<code>p</code>实际上表示的是”put”(放置)，而不是”paste”(粘贴)，使用粘贴只是因为它更符合传统习惯。</p><p>从某个特定寄存器中读取文本的通用语法是<code>&quot;x</code>，其中<code>x</code>是这个寄存器的标志。</p><h2 id="在输入模式中使用寄存器"><a href="#在输入模式中使用寄存器" class="headerlink" title="在输入模式中使用寄存器"></a>在输入模式中使用寄存器</h2><p>在这一章节中你学到的东西在输入模式中也同样适用。想要获取寄存器”a”中的文本，通常可以使用<code>&quot;ap</code>来进行。不过当你在输入模式下时，你需要运行<code>Ctrl-r a</code>。在输入模式下使用寄存器的语法是：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Ctrl-r x</span><br></code></pre></td></tr></table></figure><p>其中<code>x</code>是寄存器标志。既然你现在已经知道如何存储和访问寄存器了，让我们学点更深入的吧。</p><h2 id="匿名寄存器-quot-quot"><a href="#匿名寄存器-quot-quot" class="headerlink" title="匿名寄存器(&quot;&quot;)"></a>匿名寄存器(<code>&quot;&quot;</code>)</h2><p>想从匿名寄存器中获取文本，可以使用<code>&quot;&quot;p</code>。 匿名寄存器默认存储着你最近一次复制，修改或删除的文本。如果再进行另一次复制，修改或删除，Vim会自动替换匿名寄存器中的文本。匿名寄存器和电脑上粘贴板的功能很接近。</p><p>默认情况下，<code>p</code>(或者<code>P</code>)是和匿名寄存器相关联的（从现在起我将使用<code>p</code>而不是<code>&quot;&quot;p</code>来指代匿名寄存器）。</p><h2 id="编号寄存器-quot-0-9"><a href="#编号寄存器-quot-0-9" class="headerlink" title="编号寄存器(&quot;0-9)"></a>编号寄存器(<code>&quot;0-9</code>)</h2><p>编号寄存器会自动以升序来进行填充。一共有两种不同的编号寄存器：复制寄存器(<code>0</code>)和其他编号寄存器(<code>1-9</code>)。让我们先来讨论复制寄存器。</p><h3 id="复制寄存器-quot-0"><a href="#复制寄存器-quot-0" class="headerlink" title="复制寄存器 (&quot;0)"></a>复制寄存器 (<code>&quot;0</code>)</h3><p>如果你使用<code>yy</code>来复制一整行文本，事实上Vim会将文本存放两个寄存器中：</p><ol><li>匿名寄存器 (<code>p</code>).</li><li>复制寄存器 (<code>&quot;0p</code>).</li></ol><p>在你又复制其他不同的文本后，Vim会自动替换匿名寄存器和复制寄存器(<code>0</code>)中的内容。其他的任何操作都不会被存放在<code>0</code>号寄存器中。这可以为你提供方便，因为除非你再进行另一次复制，否则你已经复制的内容会一直在寄存器中，无论你进行多少次修改和删除。</p><p>比如，如果你：</p><ol><li>复制一整行 (<code>yy</code>)</li><li>删除一整行(<code>dd</code>)</li><li>再删除另一行 (<code>dd</code>)</li></ol><p>复制寄存器中的文本仍然是第一步中复制的文本。</p><p>如果你:</p><ol><li>复制一整行 (<code>yy</code>)</li><li>删除一整行 (<code>dd</code>)</li><li>复制另一行 (<code>yy</code>)</li></ol><p>复制寄存器中的内容则是第三步中复制的内容。</p><p>还有一个小技巧，在输入模式下，你可以使用<code>Ctrl-r 0</code>快速地粘贴你刚才复制的内容。</p><h3 id="编号寄存器-quot-1-9"><a href="#编号寄存器-quot-1-9" class="headerlink" title="编号寄存器 (&quot;1-9)"></a>编号寄存器 (<code>&quot;1-9</code>)</h3><p>当你修改或者删除至少一整行的文本时，这部分文本会按时间顺序被存储在1-9号编号寄存器中。（编号越小时间距离越近）</p><p>比如，你有以下这些文本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-built_in">line</span> <span class="hljs-literal">three</span><br><span class="hljs-built_in">line</span> <span class="hljs-literal">two</span><br><span class="hljs-built_in">line</span> <span class="hljs-literal">one</span><br></code></pre></td></tr></table></figure><p>当你的光标在文本“line three”上时,使用<code>dd</code>来一行一行地删除这些文本。在所有文本都已经删除后，1号寄存器中的内容应该是”line one”（时间上最近的文本）， 2号寄存器则包含”line two”(时间上第二近的文本)，3号寄存器中则包含”line three”（最早删除的文本）。普通模式下可以使用<code>&quot;1p</code>来获取1号寄存器中的内容。</p><p>编号寄存器的编号在使用点命令时会自动增加。比如，如果你的1号编号寄存器（<code>&quot;1</code>）中的内容为”line one”， 2号寄存器（<code>&quot;2</code>）为”line two”, 三号寄存器（<code>&quot;3</code>）”line three”,你可以使用以下的技巧来连续地粘贴他们：</p><ul><li>使用<code>&quot;1p</code>来粘贴1号寄存器中的内容。</li><li>使用<code>.</code> (点命令)来粘贴2号寄存器（<code>&quot;2</code>）中的内容。</li><li>使用<code>.</code> (点命令)来粘贴3号寄存器（<code>&quot;3</code>）中的内容。</li></ul><p>在连续地使用点命令时，Vim会自动的增加编号寄存器的编号。这个技巧对于所有的编号寄存器都适用。如果你从5号寄存器开始(<code>&quot;5P</code>), 点命令<code>.</code>会执行<code>&quot;6P</code>,再次使用<code>.</code>则会执行<code>&quot;7P</code>,等等。</p><p>小型的删除比如单词删除（<code>dw</code>)或者单词修改(<code>cw</code>)不会被存储在编号寄存器中，它们被存储在小删除寄存器(<code>&quot;-</code>)中，我将在接下来的一小节讨论小删除寄存器。</p><h2 id="小删除寄存器-quot"><a href="#小删除寄存器-quot" class="headerlink" title="小删除寄存器(&quot;-)"></a>小删除寄存器(<code>&quot;-</code>)</h2><p>不足一行的修改或者删除都不会被存储在0-9号编号寄存器中，而是会被存储在小删除寄存器 (<code>&quot;-</code>)中。</p><p>比如:</p><ol><li>删除一个单词 (<code>diw</code>)</li><li>删除一行文本 (<code>dd</code>)</li><li>删除一行文本 (<code>dd</code>)</li></ol><p><code>&quot;-p</code> 会给你第一步中删除的单词。</p><p>另一个例子:</p><ol><li>删除一个单词(<code>diw</code>)</li><li>删除一行文本 (<code>dd</code>)</li><li>删除一个单词 (<code>diw</code>)</li></ol><p><code>&quot;-p</code> 会给出第三步中删除的单词。类似地, <code>&quot;1p</code> 会给出第二步中删除的一整行文本。不幸的是我们没有办法获取第一步中删除的单词，因为小删除寄存器只能存储一个文本。然而，如果你想保存第一步中删除的文本，你可以使用命名寄存器来完成。</p><h2 id="命名寄存器-quot-a-z"><a href="#命名寄存器-quot-a-z" class="headerlink" title="命名寄存器 (&quot;a-z)"></a>命名寄存器 (<code>&quot;a-z</code>)</h2><p>命名寄存器是Vim中用法最丰富的寄存器。a-z命名寄存器可以存储复制的，修改的和被删除的文本。不像之前介绍的3种寄存器一样，它们会自动将文本存储到寄存器中，你需要显式地告诉Vim你要使用命名寄存器，你拥有完整的控制权。</p><p>为了复制一个单词到寄存器”a”中，你可以使用命令<code>&quot;ayiw</code>。</p><ul><li><code>&quot;a</code>告诉Vim下一个动作（删除&#x2F;修改&#x2F;复制）会被存储在寄存器”a”中</li><li><code>yiw</code>复制这个单词</li></ul><p>为了从寄存器”a”中获取文本，可以使用命令<code>&quot;ap</code>。你可以使用以26个字母命名的寄存器来存储26个不同的文本。</p><p>有时你可能会想要往已有内容的命名寄存器中继续添加内容，这种情况下，你可以追加文本而不是全部重来。你可以使用大写版本的命名寄存器来进行文本的追加。比如，假设你的”a”寄存器中已经存有文本”Hello”，如果你想继续添加”world”到寄存器”a”中，你可以先找到文本”world”然后使用<code>&quot;Aiw</code>来进行复制,即可完成追加。</p><h2 id="只读寄存器-quot-quot-quot"><a href="#只读寄存器-quot-quot-quot" class="headerlink" title="只读寄存器(&quot;:, &quot;., &quot;%)"></a>只读寄存器(<code>&quot;:</code>, <code>&quot;.</code>, <code>&quot;%</code>)</h2><p>Vim有三个只读寄存器：<code>.</code>,<code>:</code>和<code>%</code>，它们的用法非常简单：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">.    存储上一个输入的文本<br>:    存储上一次执行的命令<br>%    存储当前文件的文件名<br></code></pre></td></tr></table></figure><p>如果你写入”Hello Vim”,之后再运行<code>&quot;.p</code>就会打印出文本”Hello Vim”。如果你想要获得当前文件的文件名，可以运行命令<code>&quot;%p</code>。如果你运行命令<code>:s/foo/bar/g</code>，再运行<code>&quot;:p</code>的话则会打印出文本”s&#x2F;foo&#x2F;bar&#x2F;g”。</p><h2 id="Buffer交替文件寄存器-quot"><a href="#Buffer交替文件寄存器-quot" class="headerlink" title="Buffer交替文件寄存器 (&quot;#)"></a>Buffer交替文件寄存器 (<code>&quot;#</code>)</h2><p>在Vim中，<code>#</code>通常代表交替文件。交替文件指的是你上一个打开的文件，想要插入交替文件的名字的话，可以使用命令<code>&quot;#p</code>。</p><h2 id="表达式寄存器-quot"><a href="#表达式寄存器-quot" class="headerlink" title="表达式寄存器 (&quot;=)"></a>表达式寄存器 (<code>&quot;=</code>)</h2><p>Vim有一个表达式寄存器，<code>&quot;=</code>,用于计算表达式的结果。</p><p>你可以使用以下命令计算数学表达式<code>1+1</code>的值：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;=1+1&lt;Enter&gt;p</span><br></code></pre></td></tr></table></figure><p>在这里，你在告诉Vim你正在使用表达式寄存器<code>&quot;=</code>，你的表达式是（<code>1+1</code>），你还需要输入<code>p</code>来得到结果。正如之前所提到的，你也可以在输入模式中访问寄存器。想要在输入模式中计算数学表达式的值，你可以使用：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Ctrl</span>-r =<span class="hljs-number">1</span>+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>你可以使用<code>@</code>来从任何寄存器中获取表达式并用表达式寄存器计算其值。如果你希望从寄存器”a”中获取文本：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;=@a</span><br></code></pre></td></tr></table></figure><p>之后输入<code>&lt;enter&gt;</code>，再输入<code>p</code>。类似地，想在输入模式中得到寄存器”a”中的值可以使用：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Ctrl-r</span> =@a<br></code></pre></td></tr></table></figure><p>表达式是Vim中非常宏大的一个话题，所以我只会在这里介绍一些基础知识，我将会在之后的VimScript章节中进一步讲解更多关于表达式的细节。</p><h2 id="选取和拖放寄存器-quot-quot"><a href="#选取和拖放寄存器-quot-quot" class="headerlink" title="选取和拖放寄存器 (&quot;*, &quot;+)"></a>选取和拖放寄存器 (<code>&quot;*</code>, <code>&quot;+</code>)</h2><p>你难道不觉得有些时候你需要从某些外部的程序中复制一些文本并粘贴到Vim中吗，或者反过来操作？有了Vim的选取和拖放寄存器你就能办到。Vim有两个选取寄存器：<code>quotestar</code> (<code>&quot;*</code>) 和 <code>quoteplus</code> (<code>&quot;+</code>)。你可以用它们来访问从外部程序中复制的文本。</p><p>如果你在运行一个外部程序（比如Chrome浏览器），然后你使用<code>Ctrl-c</code>(或者<code>Cmd-c</code>,取决于你的操作系统)复制了一部分文本，通常你是没有办法在Vim里使用<code>p</code>来粘贴这部分文本的。但是，Vim的两个寄存器<code>&quot;+</code>和<code>&quot;*</code>都是和你系统的粘贴板相连接的，所以你可以使用<code>&quot;+p</code>和<code>&quot;*p</code>来粘贴这些文本。反过来，如果你使用<code>&quot;+yiw</code>或者<code>&quot;*yiw</code>在Vim中复制了一些文本，你可以使用<code>Ctrl-v</code>（或者<code>Cmd-v</code>）。值得注意的是这个方法只在你的Vim开启了<code>+clipboard</code>选项时才有用，可以在命令行中运行<code>vim --version</code>查看这一选项。如果你看见<code>-clipboard</code>的话，则需要安装一下支持Vim粘贴板的配置。</p><p>你也许会想如果<code>&quot;*</code>和<code>&quot;+</code>能办到的事完全相同，那为什么Vim需要两个不同的寄存器呢？一些机器使用的是X11窗口系统，这一系统有3个类型的选项：首选，次选和粘贴板。如果你的机器使用的是X11的话,Vim使用的是<code>quotestar</code> (<code>&quot;*</code>)寄存器作为X11的首选选项，并使用 <code>quoteplus</code> (<code>&quot;+</code>)作为粘贴板选项。这只在你的Vim配置里开启了<code>xterm_clipboard</code> 选项时才有效（<code>vim --version</code>中的<code>+xterm_clipboard</code>）。如果你的的Vim配置中没有 <code>xterm_clipboard</code>也不是什么大问题。这只是意味着<code>quotestar</code> 和<code>quoteplus</code>两个寄存器是可以互相替代的。</p><p>我发觉使用<code>=*p</code>或者<code>=+p</code>的话比较麻烦，为了使Vim仅使用<code>p</code>就能粘贴从外部程序复制的文本，你可以在你的<code>vimrc</code>配置文件中加入下面一行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">clipboard</span>=unnamed<br></code></pre></td></tr></table></figure><p>现在当我从外部程序中复制文本时，我可以使用匿名寄存器<code>p</code>来进行粘贴。我也可以在Vim中复制文本后在外部程序中使用<code>Ctrl-v</code>来粘贴。如果你的Vim开启了 <code>+xterm_clipboard</code>设置，你或许会想同时也使用<code>unnamed</code>和<code>unnamedplus</code>的粘贴板选项。</p><h2 id="黑洞寄存器-quot"><a href="#黑洞寄存器-quot" class="headerlink" title="黑洞寄存器 (&quot;_)"></a>黑洞寄存器 (<code>&quot;_</code>)</h2><p>你每次删除或修改文本的时候，这部分文本都会自动保存在Vim的寄存器中。有些时候你并不希望把什么东西都往寄存器里存，这该怎么办到呢？</p><p>你可以使用黑洞寄存器（<code>&quot;_</code>）。想要删除一行并且不将其存储在任何寄存器中时，可以使用<code>&quot;_dd</code>命令.</p><p>它是和 <code>/dev/null</code> 类似的寄存器。</p><h2 id="搜索模式寄存器-quot"><a href="#搜索模式寄存器-quot" class="headerlink" title="搜索模式寄存器 (&quot;/)"></a>搜索模式寄存器 (<code>&quot;/</code>)</h2><p>为了粘贴你的上一个搜索询问（<code>/</code> 或 <code>?</code>），你可以使用搜索模式寄存器(<code>&quot;/</code>)。使用命令 <code>&quot;/p</code>就能粘贴上一个搜索的条目。</p><h2 id="查看所有的寄存器"><a href="#查看所有的寄存器" class="headerlink" title="查看所有的寄存器"></a>查看所有的寄存器</h2><p>你可以使用<code>:register</code>命令来查看你的所有寄存器。如果你只想查看”a”,”1”和”-“寄存器的内容的话则可以使用命令<code>:register a 1 -</code>。</p><p>有一个Vim的插件叫做 <a href="https://github.com/junegunn/vim-peekaboo">vim-peekaboo</a> ,可以让你查看到寄存器的内容，在普通模式下输入<code>&quot;</code>或<code>@</code> 即可，或者在输入模式中输入<code>Ctrl-r</code>。我发现这个插件相当的有用，因为大多数时候我是记不住我的寄存器中的内容的。值得一试！</p><h2 id="执行寄存器"><a href="#执行寄存器" class="headerlink" title="执行寄存器"></a>执行寄存器</h2><p>命名寄存器不只可以用来存放文本，你还可以借助<code>@</code>来执行宏命令。我会在下一章节中介绍宏命令。</p><p>注意，因为宏命令时存储在Vim寄存器中的，使用宏时可能会覆盖存储的内容。如果你将文本”Hello Vim”存放在寄存器”a”中，并且之后你在同一个寄存器里记录了一个宏命令 (<code>qa&#123;macro-commands&#125;q</code>),那么这个宏命令将会覆盖之前存储的文本”Hello Vim”（你可以使用<code>@a</code>来执行寄存器中存储的宏命令）。</p><h2 id="清除寄存器"><a href="#清除寄存器" class="headerlink" title="清除寄存器"></a>清除寄存器</h2><p>从技术上来说，我们没有必要来清除任何寄存器，因为你下一个使用来存储文本的寄存器会自动覆盖该寄存器中之前的内容。然而，你可以通过记录一个空的宏命令来快速地清除任何命名寄存器。比如，如果你运行<code>qaq</code>，Vim就会在寄存器”a”中记录一个空的宏命令。</p><p>还有一种方法就是运行命令<code>:call setreg(&#39;a&#39;,&#39;hello register a&#39;)</code>,其中’a’代表的就是寄存器”a”。而”hello register a”就是你想存储的内容。</p><p>还有一种清除寄存器的方法就是使用表达式<code>:let @a = &#39;&#39;</code>来将寄存器”a 的值设为空的字符串。</p><h2 id="获取寄存器中的内容"><a href="#获取寄存器中的内容" class="headerlink" title="获取寄存器中的内容"></a>获取寄存器中的内容</h2><p>你可以使用<code>:put</code>命令来粘贴任何寄存器的内容。比如，如果你运行命令<code>:put a</code>,Vim就会打印出寄存器”a”的内容，这和<code>&quot;ap</code>非常像，唯一的区别在于在普通模式下命令<code>p</code>在当前光标位置之后打印寄存器的内容，而<code>:put</code>新起一行来打印寄存器的内容。</p><p>因为<code>:put</code>是一个命令行命令，您可以传一个地址给它。<code>:10put a</code>将会在当前光标下数10行，然后插入新行，内容为寄存器a中的内容。</p><p>一个很酷的技巧是将黑洞寄存器(<code>&quot;_</code>)传给<code>:put</code>命令。因为黑洞寄存器不保存任何值，<code>:put _</code>命令将插入一个新的空白行。您可将这个与全局命令联合起来，插入多个空行。比如，要在所有以文本”end”结尾的行下插入空行，使用<code>:g/end/put _</code>。在后面您将了解关于全局命令的知识。</p><h2 id="聪明地学习寄存器"><a href="#聪明地学习寄存器" class="headerlink" title="聪明地学习寄存器"></a>聪明地学习寄存器</h2><p>恭喜你成功地坚持到了最后！这一章有非常多的内容需要消化。如果你感觉被新的知识淹没，你要知道你并不孤单，当我最初开始学习Vim寄存器时也有这种感觉。</p><p>我并不认为你必须现在就记得所有的知识点。为了提高我们的生产效率，你可以从使用以下三类寄存器开始：</p><ol><li>匿名寄存器(<code>&quot;&quot;</code>).</li><li>命名寄存器 (<code>&quot;a-z</code>).</li><li>编号寄存器 (<code>&quot;0-9</code>).</li></ol><p>既然匿名寄存器是默认和<code>p</code>或<code>P</code>，你只需要学习两个寄存器：命名寄存器和编号寄存器。之后如果你需要用到其他的寄存器时你再逐渐地学习其他寄存器的用法，不用急，慢慢来。</p><p>普通人的短期记忆都是有极限的，大概每次只能记住5-7个信息。这就是为什么在我的日常编辑中，我只用3到7个命名寄存器的原因，我没有办法记住整整26个寄存器的内容。我通常从寄存器”a”开始用，之后用寄存器”b”,以字母表升序的顺序来使用。尝试一下各种方法，看看哪种最适合你。</p><p>Vim寄存器非常强大，合理使用的话能够避免你输入数不清的重复文本。但是现在，是时候学习一下宏命令了。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-宏命令</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch09_macros/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch09_macros/</url>
    
    <content type="html"><![CDATA[<h1 id="第09章-宏命令"><a href="#第09章-宏命令" class="headerlink" title="第09章 宏命令"></a>第09章 宏命令</h1><p>在编辑文件的时候，你会发现有时候你在反复地做一些相同的动作。如果你仅做一次，并在需要的时候调用这些动作岂不是会更好吗。通过 Vim 的宏命令，你可以将一些动作记录到 Vim 寄存器。</p><p>在本章中，你将会学习到如何通过宏命令自动完成一些普通的任务（另外，看你的文件在自动编辑是一件很酷的事情）。</p><h2 id="基本宏命令"><a href="#基本宏命令" class="headerlink" title="基本宏命令"></a>基本宏命令</h2><p>宏命令的基本语法如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs perl">qa                     开始记录动作到寄存器 a<br><span class="hljs-string">q (while recording)</span>    停止记录<br></code></pre></td></tr></table></figure><p>你可以使用小写字母 （a-z）去存储宏命令。并通过如下的命令去调用：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">@<span class="hljs-keyword">a</span>    Execute macro <span class="hljs-built_in">from</span> register <span class="hljs-keyword">a</span><br>@@    Execute <span class="hljs-keyword">the</span> <span class="hljs-keyword">last</span> executed macros<br></code></pre></td></tr></table></figure><p>假设你有如下的文本，你打算将每一行中的所有字母都变为大写。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hello</span><br><span class="hljs-attribute">vim</span><br><span class="hljs-attribute">macros</span><br><span class="hljs-attribute">are</span><br><span class="hljs-attribute">awesome</span><br></code></pre></td></tr></table></figure><p>将你的光标移动到 “hello” 栏的行首，并执行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">qa0<span class="hljs-built_in">gU</span><span class="hljs-variable">$jq</span><br></code></pre></td></tr></table></figure><p>上面命令的分解如下：</p><ul><li><code>qa</code> 开始记录一个宏定义并存储在 a 寄存器。</li><li><code>0</code> 移动到行首。</li><li><code>gU$</code> 将从光标到行尾的字母变为大写。</li><li><code>j</code> 移动到下一行。</li><li><code>q</code> 停止记录。</li></ul><p>调用 <code>@a</code> 去执行该宏命令。就像其他的宏命令一样，你也可以为该命令加一个计数。例如，你可以通过 <code>3@a</code> 去执行 <code>a</code> 命令3次。你也可以执行 <code>3@@</code> 去执行上一次执行过的宏命令3次。</p><h2 id="安全保护"><a href="#安全保护" class="headerlink" title="安全保护"></a>安全保护</h2><p>在执行遇到错误的时候，宏命令会自动停止。假如你有如下文本：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>. chocolate donut<br><span class="hljs-selector-tag">b</span>. mochi donut<br>c. powdered sugar donut<br>d. plain donut<br></code></pre></td></tr></table></figure><p>你想将每一行的第一个词变为大写，你可以使用如下的宏命令：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">qa0W~jq<br></code></pre></td></tr></table></figure><p>上面命令的分解如下：</p><ul><li><code>qa</code> 开始记录一个宏定义并存储在 a 寄存器。</li><li><code>0</code> 移动到行首。</li><li><code>W</code> 移动到下一个单词。</li><li><code>~</code> 将光标选中的单词变为大写。</li><li><code>j</code> 移动到下一行。</li><li><code>q</code> 停止记录。</li></ul><p>我喜欢对宏命令进行超过所需次数的调用，所以我通常使用 <code>99@a</code> 命令去执行该宏命令99次。使用该命令，Vim并不会真正执行这个宏99次，当 Vim 到达最后一行执行<code>j</code>时，它会发现无法再向下了，然后会抛出一个错误，并终止宏命令的执行。</p><p>实际上，遇到错误自动停止运行是一个很好的特性。否则，Vim 会继续执行该命令99次，尽管它已经执行到最后一行了。</p><h2 id="命令行执行宏"><a href="#命令行执行宏" class="headerlink" title="命令行执行宏"></a>命令行执行宏</h2><p>在正常模式执行 <code>@a</code> 并不是宏命令调用的唯一方式。你也可以在命令行执行 <code>：normal @a</code> 。<code>：normal</code> 会将任何用户添加的参数作为命令去执行。例如添加 <code>@a</code>，和在 normal mode 执行 <code>@a</code> 的效果是一样的。</p><p><code>:normal</code> 命令也支持范围参数。你可以在选择的范围内去执行宏命令。如果你只想在第二行和第三行执行宏命令，你可以执行 <code>：2,3 normal @a</code>。</p><h2 id="在多个文件中执行宏命令"><a href="#在多个文件中执行宏命令" class="headerlink" title="在多个文件中执行宏命令"></a>在多个文件中执行宏命令</h2><p>假如你有多个 <code>.txt</code> 文件，每一个文件包含不同的内容。并且你只想将包含有 “donut” 单词的行的第一个单词变为大写。假设，您的寄存器a中存储的内容是<code>0W~j</code>(就是前面例子中用到的宏命令),那么，您该如何快速完成这个操作呢？</p><p>第一个文件:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">## savory.txt</span><br>a. cheddar <span class="hljs-keyword">jalapeno </span>donut<br><span class="hljs-keyword">b. </span>mac n cheese donut<br>c. fried dumpling<br></code></pre></td></tr></table></figure><p>第二个文件:</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean">## sweet.txt<br>a. chocolate donut<br>b. chocolate pancake<br>c. powdered sugar donut<br></code></pre></td></tr></table></figure><p>第三个文件:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">## plain.txt</span><br>a. wheat <span class="hljs-keyword">bread</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">b. </span>plain donut<br></code></pre></td></tr></table></figure><p>你可以这么做:</p><ul><li><code>:args *.txt</code> 查找当前目录下的所有 <code>.txt</code> 文件。</li><li><code>:argdo g/donut/normal @a</code> 在 <code>:args</code> 中包含的每一个文件里执行一个全局命令 <code>g/donut/normal @a</code>。</li><li><code>:argdo update</code> 在 <code>:args</code> 中包含的每一个文件里执行 <code>update</code> 命令,保存修改后的内容。</li></ul><p>也许你对全局命令 <code>:g/donut/normal @a</code> 不是很了解，该命令会执行 <code>/donut/</code>搜索命令，然后在所有匹配的行中执行<code>normal @a</code> 命令。我会在后面的章节中介绍全局命令。</p><h2 id="递归执行宏命令"><a href="#递归执行宏命令" class="headerlink" title="递归执行宏命令"></a>递归执行宏命令</h2><p>你可以递归地执行宏命令，通过在记录宏命令时调用相同的宏寄存器来实现。假如你有如下文本，你希望改变第一个单词的大小写：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>. chocolate donut<br><span class="hljs-selector-tag">b</span>. mochi donut<br>c. powdered sugar donut<br>d. plain donut<br></code></pre></td></tr></table></figure><p>如下命令会递归地执行:</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">qaqqa0W~<span class="hljs-symbol">j@</span>aq<br></code></pre></td></tr></table></figure><p>上面命令的分解如下：</p><ul><li><code>qaq</code> 记录一个空白的宏命令到 “a” 。把宏命令记录在一个空白的命令中是必须的，因为你不会想将该命令包含有任何其他的东西。</li><li><code>qa</code> 开始录入宏命令到寄存器 “a”。</li><li><code>0</code> 移动到行首。</li><li><code>W</code> 移动到下一个单词。</li><li><code>~</code> 改变光标选中的单词的大小写。</li><li><code>j</code> 移动到下一行。</li><li><code>@a</code> 执行宏命令 “a”。当你记录该宏命令时，<code>@a</code> 应该是空白的，因为你刚刚调用了 <code>qaq</code>。</li><li><code>q</code> 停止记录。</li></ul><p>现在，让我们调用 <code>@a</code> 来查看 Vim 如何递归的调用该宏命令。</p><p>宏命令是如何知道何时停止呢？当宏执行到最后一行并尝试 <code>j</code> 命令时，发现已经没有下一行了，就会停止执行。</p><h2 id="增添一个已知宏"><a href="#增添一个已知宏" class="headerlink" title="增添一个已知宏"></a>增添一个已知宏</h2><p>如果你想在一个已经录制好的宏定义中添加更多的操作，与其重新录入它，不如选择修改它。在寄存器一章中，你学习了如何使用一个已知寄存器的大写字母来想该寄存器中添加内容。同样的，为了在寄存器”a”中添加更多的操作，你也可以使用大写字母”A”。</p><p>假设寄存器a中已经存储了这个宏命令:<code>qa0W~q</code>(该宏命令将某行的第二个词组的头一个字母执行改变大小写操作)，假设你想在这个基础上添加一些操作命令序列，使得每一行末尾添加一个句点，运行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">qAA.<span class="hljs-tag">&lt;<span class="hljs-name">esc</span>&gt;</span>q<br></code></pre></td></tr></table></figure><p>分解如下:</p><ul><li><code>qA</code> 开始在寄存器 “A” 中记录宏命令。</li><li><code>A.&lt;esc&gt;</code> 在行的末尾加上一个句点(这里的<code>A</code>是进入插入模式，不要和宏A搞混淆)，然后退出插入模式。</li><li><code>q</code> 停止记录宏命令。</li></ul><p>现在，当你执行<code>@a</code>时，它不仅将第二个词组的首字母转变大小写，同时还在行尾添加一个句点。</p><h2 id="修改一个已知宏"><a href="#修改一个已知宏" class="headerlink" title="修改一个已知宏"></a>修改一个已知宏</h2><p>如果想在一个宏的中间添加新的操作该怎么办呢？</p><p>假设您在寄存器a中已经存有一个宏命令<code>0W~A.&lt;Esc&gt;</code>，即改变首字母大小写，并在行尾添加句号。如果您想在改变首字母大小写和行尾添加句号之间，在单词”dount”前面加入”deep fried”。（因为唯一比甜甜圈好的东西就是炸甜甜圈）。</p><p>我会重新使用上一节使用过的文本:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span>. chocolate donut<br><span class="hljs-selector-tag">b</span>. mochi donut<br>c. powdered sugar donut<br>d. plain donut<br></code></pre></td></tr></table></figure><p>首先，让我们通过 <code>:put a</code> 调用一个已经录制好的宏命令（假设你上一节中保存在寄存器a中的宏命令还在）：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">0</span>W~<span class="hljs-keyword">A</span>.^[<br></code></pre></td></tr></table></figure><p><code>^[</code> 是什么意思呢？不记得了吗，你之前执行过 <code>0W~A.&lt;esc&gt;</code>。 <code>^[</code> 是 Vim 的 <strong>内部指令</strong>，表示 <code>&lt;esc&gt;</code>。通过这些指定的特殊键值组合，Vim 知道这些是内部代码的一些替代。一些常见的内部指令具有类似的替代，例如 <code>&lt;esc&gt;</code>，<code>&lt;backspace&gt;</code>，<code>&lt;enter&gt;</code>。还有一些其他的键值组合，但这不是本章的内容。</p><p>回到宏命令，在改变大小写之后的键后面（<code>~</code>），让我们添加（<code>$</code>）来移动光标到行末，回退一个单词（<code>b</code>），进入插入模式（<code>i</code>），输入”deep fried “ （别忽略”fried “后面的这个空格），之后退出插入模式（<code>&lt;esc&gt;</code>）。</p><p>完整的命令如下:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp"><span class="hljs-number">0</span><span class="hljs-keyword">W</span>~<span class="hljs-variable">$bideep</span> fried &lt;esc&gt;A.^[<br></code></pre></td></tr></table></figure><p>这里有一个问题，Vim 不能理解 <code>&lt;esc&gt;</code>。您不能依葫芦画瓢输入”<Esc>“，所以你需要将<code>&lt;Esc&gt;</code>写成内部代码的形式。在插入模式，在按下<code>&lt;esc&gt;</code>后按下 <code>Ctrl-v</code>，Vim 会打印 <code>^[</code>。 <code>Ctrl-v</code> 是一个插入模式的操作符，可以逐字地插入一个非数字字符。你的宏命令应该如下:</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp"><span class="hljs-number">0</span><span class="hljs-keyword">W</span>~<span class="hljs-variable">$bideep</span> fried ^[A.^[<br></code></pre></td></tr></table></figure><p>为了在寄存器“a”中添加修改后的指令，你可以通过在一个已知命名寄存器中添加一个新条目的方式来实现。在一行的行首，执行 <code>&quot;ay$</code>，使用寄存器 “a”来存储复制的文本。</p><p>现在，但你执行 <code>@a</code> 时，你的宏命令会自动改变第一个单词的大小写，在”donut”前面添加”deep fried “，之后在行末添加“.”。</p><p>另一个修改宏命令的方式是通过命令行表达式。执行 <code>:let @a=&quot;</code>，之后执行 <code>Ctrl-r Ctrl-r a</code>，这会将寄存器“a”的命令逐字打印出来。最后，别忘记在闭合的引号（<code>&quot;</code>）。如果你希望在编辑命令行表达式时插入内部码来使用特定的字符，你可以使用 <code>Ctrl-v</code>。</p><h2 id="拷贝宏"><a href="#拷贝宏" class="headerlink" title="拷贝宏"></a>拷贝宏</h2><p>你可以很轻松的将一个寄存器的内容拷贝到另一个寄存器。例如，你可以使用 <code>:let @z = @a</code> 将寄存器”a” 中的命令拷贝到寄存器”z”。 <code>@a</code> 表示寄存器“a”中存储的内容，你现在执行 <code>@z</code>，将会执行和 <code>@a</code> 一样的指令。</p><p>我发现对常用的宏命令创建冗余是很有用的。在我的工作流程中，我通常在前7个字母（a-g）上创建宏命令，并且我经常不加思索地把它们替换了。因此，如果我将很有用的宏命令移动到了字母表的末尾，就不用担心我在无意间把他们替换了。</p><h2 id="串行宏和并行宏"><a href="#串行宏和并行宏" class="headerlink" title="串行宏和并行宏"></a>串行宏和并行宏</h2><p>Vim 可以连续和同时运行宏命令，假设你有如下的文本：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123; FUNC1 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library1&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC3 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library3&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC4 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library4&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC5 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library5&quot;</span>;<br></code></pre></td></tr></table></figure><p>假如你希望把所有的 “FUNC” 字符变为小写，那么宏命令为如下：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">qa0f</span>&#123;<span class="hljs-keyword">gui</span>&#123;jq<br></code></pre></td></tr></table></figure><p>分解如下：</p><ul><li><code>qa</code> 开始记录宏命令到 “a” 寄存器。</li><li><code>0</code>移动到第一行。</li><li><code>f&#123;</code> 查找第一个 “{” 字符。</li><li><code>gui&#123;</code> 把括号内的文本（<code>i&#123;</code>）变为小写（<code>gu</code>）。</li><li><code>j</code> 移动到下一行。</li><li><code>q</code> 停止记录宏命令。</li></ul><p>现在，执行 <code>99@a</code> 在剩余的行修改。然而，假如在你的文本里有如下 import 语句会怎么样呢？</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-keyword">import</span> &#123; FUNC1 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library1&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library2&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC3 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library3&quot;</span>;<br><span class="hljs-keyword">import</span> foo <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;bar&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC4 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library4&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; FUNC5 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;library5&quot;</span>;<br></code></pre></td></tr></table></figure><p>执行 <code>99@a</code>，会只在前三行执行。而最后两行不会被执行，因为在执行第四行（包含“foo”）时<code>f&#123;</code>命令会遇到错误而停止，当宏串行执行时就会发生这样的情况。当然，你仍然可以移动到包含（“FUNC4”）的一行，并重新调用该命令。但是假如你希望仅调用一次命令就完成所有操作呢？</p><p>你可以并行地执行宏命令。</p><p>如本章前面所说，可以使用 <code>:normal</code> 去执行宏命令，（例如： <code>:3,5 normal @a</code> 会在 3-5行执行 a 寄存器中的宏命令）。如果执行 <code>:1,$ normal @a</code>，会在所有除了包含有 “foo” 的行执行，而且它不会出错。</p><p>尽管本质上来说，Vim 并不是在并行地执行宏命令，但表面上看，它是并行运行的。 Vim 会独立地在从第一行开始（<code>1,$</code>）每一行执行 <code>@a</code> 。由于 Vim 独立地在每一行执行命令，每一行都不会知道有一行（包含“foo”）会遇到执行错误。</p><h2 id="聪明地学习宏命令"><a href="#聪明地学习宏命令" class="headerlink" title="聪明地学习宏命令"></a>聪明地学习宏命令</h2><p>你在编辑器里做的很多事都是重复的。为了更好地编辑文件，请乐于发现这些重复性的行为。执行宏命令或者点命令，而不是做相同的动作两次。几乎所有你在 Vim 所作的事情都可以变为宏命令。</p><p>刚开始的时候，我发现宏命令时很棘手的，但是请不要放弃。有了足够的练习，你可以找到这种文本自动编辑的快乐。</p><p>使用某种助记符去帮助你记住宏命令是很有帮助的。如果你有一个创建函数（function）的宏命令，你可以使用 “f” 寄存器去录制它(<code>qf</code>)。如果你有一个宏命令去操作数字，那么使用寄存器 “n” 去记住它是很好的(<code>qn</code>)。用你想执行的操作时想起的第一个字符给你的宏命令命名。另外，我发现 “q” 是一个很好的宏命令默认寄存器，因为执行 <code>qq</code> 去调用宏命令是很快速而简单的。最后，我喜欢按照字母表的顺序去添加我的宏命令，例如从 <code>qa</code> 到 <code>qb</code> 再到 <code>qc</code>。</p><p>去寻找最适合你的方法吧。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-撤销</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch10_undo/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch10_undo/</url>
    
    <content type="html"><![CDATA[<h1 id="第10章-撤销"><a href="#第10章-撤销" class="headerlink" title="第10章 撤销"></a>第10章 撤销</h1><p>所有人都会犯各种各样的输入错误。因此对于任何一个现代的软件来说，撤销都是一个很基本的功能。 Vim 的撤销系统不仅支持撤销和取消撤销任何修改，而且支持存取不同的文本形态，让你能控制你输入的所有文本。在本章中，你将会学会如何执行撤销和 取消撤销文本，浏览撤销分支，反复撤销, 以及浏览改动时间线。 </p><h2 id="撤销-undo-，重做和行撤销-UNDO"><a href="#撤销-undo-，重做和行撤销-UNDO" class="headerlink" title="撤销(undo)，重做和行撤销(UNDO)"></a>撤销(undo)，重做和行撤销(UNDO)</h2><p>对于一个基本的 undo 操作，你可以执行 <code>u</code> 或者 <code>:undo</code>。</p><p>假设你有如下文本(注意”one”下面有一个空行)：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>然后添加另一个文本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><p>如果你执行 <code>u</code>，Vim 会删除 “two”。</p><p>Vim 是如何知道应该恢复多少修改呢？ 答案是，Vim每次仅恢复一次修改，这有点类似于点命令的操作（和 点命令不同之处在于，命令行命令也会被算作一次修改）。</p><p>要取消上一次的撤销，可以执行 <code>Ctrl-r</code> 或者 <code>:redo</code>。例如上面的例子中，当你执行撤销来删除 “two” 以后，你可以执行 <code>Ctrl-r</code> 来恢复被删除掉的文本。</p><p>Vim 也有另一个命令 <code>U</code> 可以实现 行撤销 (UNDO) 的功能，执行这个命令会撤销所有最新的修改。</p><p>那么，<code>U</code> 和 <code>u</code> 的区别是什么呢？首先，<code>U</code> 会删除 <em>最近修改的行中所有的</em> 的修改，而 <code>u</code> 一次仅删除一次修改。 其次，执行<code>u</code> 不会被算作一次修改操作，而执行 <code>U</code> 则会被算作一次修改。</p><p>让我们会的之前的例子：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><p>修改第二行的内容为 “three” (<code>ciwthree&lt;esc&gt;</code>):</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">three</span><br></code></pre></td></tr></table></figure><p>再次修改第二行的例子为 “four” (<code>ciwfour&lt;esc&gt;</code>):</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">four</span><br></code></pre></td></tr></table></figure><p>此时，如果你按下 <code>u</code>，你会看到 “three”。如果你再次按下 <code>u</code>，你会看到 “two”。然而，在第二行仍为 “four” 的时候，如果你按下 <code>U</code>，你会看到 </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>执行 <code>U</code> 会跳过中间所有修改，直接恢复到文件最初的状态（第二行为空）。另外，由于 UNO 实际上是执行了一个新的修改，因此你可以 UNDO 执行过的 UNDO。 执行 <code>U</code> 后 再次执行 <code>U</code> 会撤销 自己。假如你连续执行 <code>U</code>，那么你将看到第二行的文本不停地出现和消失。</p><p>就我个人而言，我几乎不会使用 <code>U</code>，因为很难记住文本最初的样子。（我几乎不使用它）</p><p>Vim 可以通过变量 <code>undolevels</code> 来选择最多可执行 undo 的次数。你可以通过 <code>:echo &amp;undolevels</code> 来查看当前的配置。我一般设置为 1000。如果你也想设置为 1000 的话，你可以执行 <code>:set undolevels=1000</code>。不用担心，你可以设置它为任何一个你想设置的值。</p><h2 id="断点插入操作"><a href="#断点插入操作" class="headerlink" title="断点插入操作"></a>断点插入操作</h2><p>在上文中我提到，<code>u</code> 每次恢复一个修改，类似于点命令。在每次进入 插入模式和退出插入模式之间的任何修改都被定义为一次修改。</p><p>如果你执行 <code>ione two three&lt;esc&gt;</code> 之后，按下 <code>u</code>，Vim 会同时删除 “one two three”，因为这是一笔修改。如果你每次只输入较短的文本，那这是可接受的；可假设你在一次插入模式中输入了大量的文本，而后退出了插入模式，可很快你意识到这中间有部分错误。此时，如果你按下 <code>u</code>，你会丢失上一次输入的所有内容。 因此，假设你按下 <code>u</code> 只删除你上一次输入的一部分文本岂不是会更好。</p><p>幸运的是，你可以拆分它。当你在插入模式时，按下 <code>Ctrl-G u</code> 会生成一个断点。例如，如果你执行 <code>ione &lt;Ctrl-G u&gt;two &lt;Ctrl-G u&gt;three&lt;esc&gt;</code>，之后你按下<code>u</code>，你仅会失去文本 “three”，再次执行 <code>u</code>，会删除 “two”。当你想要输入一长段内容时，应该有选择性地执行断点插入操作。在每一句话的末尾，两个段落的中间，或者每一行代码结束时插入断点是一个很好的选择，这可以帮助你快速从错误中恢复出来。</p><p>在插入模式中，执行删除操作时插入断点也非常有用。例如通过 <code>Ctrl-W</code> 删除光标前的单词时，以及 <code>Ctrl-U</code>删除光标前的所有文本时。一个朋友建议我使用如下的映射：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;c-u&gt;</span> <span class="hljs-symbol">&lt;c-g&gt;</span><span class="hljs-keyword">u</span><span class="hljs-symbol">&lt;c-u&gt;</span><br><span class="hljs-keyword">inoremap</span> <span class="hljs-symbol">&lt;c-w&gt;</span> <span class="hljs-symbol">&lt;c-g&gt;</span><span class="hljs-keyword">u</span><span class="hljs-symbol">&lt;c-w&gt;</span><br></code></pre></td></tr></table></figure><p>通过上述命令，你可以很轻松地恢复被删除的文本。</p><h2 id="撤销树"><a href="#撤销树" class="headerlink" title="撤销树"></a>撤销树</h2><p>Vim 将每一次修改存储在一个撤销树中。你打开一个空白文件，然后添加一段新文本:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>再插入一段新文本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><p>undo一次:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>插入一段不同的话：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">three</span><br></code></pre></td></tr></table></figure><p>再次 undo</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>再次插入另一段话：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">four</span><br></code></pre></td></tr></table></figure><p>现在如果你执行 undo,您将丢失刚刚添加的文本 “four” :</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>如果你再次执行 undo 操作：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>文本 “one” 也会丢失。对于大部分编辑器来说，找回文本 “two” 和 “three” 都是不可能的事情，但是对于 Vim 来说却不是这样。执行 <code>g+</code>，你会得到：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>再次执行 <code>g+</code> ，你将会看到一位老朋友:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><p>让我们继续执行 <code>g+</code>:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">three</span><br></code></pre></td></tr></table></figure><p>再一次执行 <code>g+</code> :</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">four</span><br></code></pre></td></tr></table></figure><p>在 Vim 中，你每一次执行 <code>u</code> 去做一次修改时，Vim都会通过创建一个”撤销分支”来保存之前的文本内容。在本例中，你输入”two”后, 执行 <code>u</code>，然后输入”three”，你就创建了一个叶子分支,保存了含有”two”的文本状态。此时，撤销树已经包含了至少两个叶子节点，主节点包含文本”three”（最新），而另一undo分支节点包含文本“two”。假如你执行了另一次撤销操作并且输入了”four”，那么此时会生成三个节点，一个主节点包含文本”four”, 以及另外两个节点分别存储了”three”和”two”。</p><p>为了在几个不同的节点状态间进行切换，你可以执行 <code>g+</code> 去获取一个较新的状态，以及执行 <code>g-</code> 去获取一个教旧的状态。 <code>u</code>， <code>Ctrl-R</code>， <code>g+</code>， 和 <code>g-</code> 之间的区别是，<code>u</code> and <code>Ctrl-R</code> 只可以在 <em>main</em> 节点之间进行切换，而<code>g+</code> 和 <code>g-</code> 可以在 <em>所有</em> 节点之间进行切换。</p><p>Undo 树并不可以很轻松地可视化。我发现一个插件 <a href="https://github.com/simnalamburt/vim-mundo">vim-mundo</a> 对于理解 undo 树很有帮助。花点时间去与它玩耍吧。 </p><h2 id="保存撤销记录"><a href="#保存撤销记录" class="headerlink" title="保存撤销记录"></a>保存撤销记录</h2><p>当你通过 Vim 打开一个文件，并且立即按下 <code>u</code>，Vim 很可能会显示 “<em>Already at oldest change</em>” 的警告。 </p><p>要想从最近的一次编辑工作中（在vim关闭文件再打开，算做一次新的编辑工作），在撤销历史中回滚，可以通过 <code>:wundo</code>命令使Vim 保存一份你的 undo 历史记录。</p><p>创建一个文件 <code>mynumbers.txt</code>. 输入:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br></code></pre></td></tr></table></figure><p>插入另一行文件 (确保你要么退出并重新进入插入模式，要么创建了断点):</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><p>插入新的一行:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br><span class="hljs-literal">three</span><br></code></pre></td></tr></table></figure><p>现在，创建你的撤销记录文件。 语法为 <code>:wundo myundofile</code>。 如果你需要覆盖一个已存在的文件，在 <code>wundo</code> 之后添加 <code>!</code>.</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:wundo!</span> mynumbers.undo<br></code></pre></td></tr></table></figure><p>退出 Vim。</p><p>此时，在目录下，应该有<code>mynumbers.txt</code> 和 <code>mynumbers.undo</code> 两个文件。再次打开 <code>mynumbers.txt</code> 文件并且按下 <code>u</code>，这是没有响应的。因为自打开文件后，你没有执行任何的修改。现在，通过执行 <code>:rundo</code> 来加载 undo 历史。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">rundo</span> mynumbers.<span class="hljs-keyword">undo</span><br></code></pre></td></tr></table></figure><p>此时，如果你按下 <code>u</code>，Vim 会删除 “three”。再次按下 <code>u</code>可以删除 “two”。这就好像你从来没有关闭过 Vim 一样。</p><p>如果你想要自动加载 undo 历史文件，你可以通过在你的 <code>.vimrc</code> 文件中添加如下代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">undodir</span>=~/.vim/undo_dir<br><span class="hljs-built_in">set</span> undofile<br></code></pre></td></tr></table></figure><p>我认为将所有的 undo 文件集中保存在一个文件夹中最好，例如在 <code>~/.vim</code> 目录下。 <code>undo_dir</code> 是随意的。 <code>set undofile</code> 告诉 Vim 打开 <code>undofile</code> 这个特性，因为该特性默认是关闭的。现在，无论你何时保存，Vim 都会自动创建和保存撤销的历史记录（在使用<code>undo_dir</code>目录前，请确保你已经创建了它）。</p><h2 id="时间旅行"><a href="#时间旅行" class="headerlink" title="时间旅行"></a>时间旅行</h2><p>是谁说时间旅行不存在。 Vim 可以通过 <code>:earlier</code> 命令将文本恢复为之前的状态。</p><p>假如有如下文本:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">one</span><br><br></code></pre></td></tr></table></figure><p>之后你输入了另一行:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br></code></pre></td></tr></table></figure><p>如果你输入 “two” 的时间少于10秒，那么你可以通过如下命令恢复到 “two” 还没被输入前的状态:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:earlier</span> <span class="hljs-number">10</span>s<br></code></pre></td></tr></table></figure><p>你可以使用 <code>:undolist</code> 去查看之前所做的修改。 <code>:earlier</code> 可以加上分钟 (<code>m</code>), 小时 (<code>h</code>), and 天 (<code>d</code>) 作为参数。 </p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:earlier</span> <span class="hljs-number">10</span>s    恢复到<span class="hljs-number">10</span>秒前的状态<br><span class="hljs-symbol">:earlier</span> <span class="hljs-number">10</span>m    恢复到<span class="hljs-number">10</span>分钟前的状态<br><span class="hljs-symbol">:earlier</span> <span class="hljs-number">10</span>h    恢复到<span class="hljs-number">10</span>小时前的状态<br><span class="hljs-symbol">:earlier</span> <span class="hljs-number">10</span>d    恢复到<span class="hljs-number">10</span>天前的状态<br><br></code></pre></td></tr></table></figure><p>另外，它同样接受一个<code>计数</code>作为参数，告诉vim恢复到老状态的次数。比如，如果运行<code>:earlier 2</code>,Vim将恢复到2次修改前的状态。功能类似于执行<code>g-</code>两次。同样，你可以运行<code>:earlier 10f</code>命令告诉vim恢复到10次保存前的状态。</p><p>这些参数同样作用于<code>:earlier</code>命令的对应版本:<code>:later</code>。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:later</span> <span class="hljs-number">10</span>s    恢复到<span class="hljs-number">10</span>秒后的状态<br><span class="hljs-symbol">:later</span> <span class="hljs-number">10</span>m    恢复到<span class="hljs-number">10</span>分钟后的状<br><span class="hljs-symbol">:later</span> <span class="hljs-number">10</span>h    恢复到<span class="hljs-number">10</span>小时后的状<br><span class="hljs-symbol">:later</span> <span class="hljs-number">10</span>d    恢复到<span class="hljs-number">10</span>天后的状态<br><span class="hljs-symbol">:later</span> <span class="hljs-number">10</span>     恢复到新状态<span class="hljs-number">10</span>次<br><span class="hljs-symbol">:later</span> <span class="hljs-number">10</span>f    恢复到<span class="hljs-number">10</span>次保存后的状态<br></code></pre></td></tr></table></figure><h2 id="聪明地学习撤销操作"><a href="#聪明地学习撤销操作" class="headerlink" title="聪明地学习撤销操作"></a>聪明地学习撤销操作</h2><p><code>u</code> 和 <code>Ctrl-R</code> 是两个不可缺少的 Vim 参数。请先学会它们。在我的工作流中，我并不使用 UNDO，然而我认为承认它存在是很好的。下一步，学会如何使用<code>:earlier</code> 和 <code>:later</code>，以及时间参数。在这之后，请花些时间理解 undo 树。 插件 <a href="https://github.com/simnalamburt/vim-mundo">vim-mundo</a> 对我的帮助很大。单独输入本章中展示的文本，并且查看撤销树的每一次改变。一旦你掌握它，你看待撤销系统的眼光一定不同。</p><p>在本章之前，你学习了如何在项目内查找任何文本，配合撤销，你可以在时间维度上查找任何一个文本。你现在可以通过位置和写入时间找到任何一个你想找的文本。你已经对 Vim 无所不能了。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-可视模式</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch11_visual_mode/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch11_visual_mode/</url>
    
    <content type="html"><![CDATA[<h1 id="第11章-可视模式"><a href="#第11章-可视模式" class="headerlink" title="第11章 可视模式"></a>第11章 可视模式</h1><p>高亮显示文本块并对其进行更改，是很多文本编辑器中的常见功能。 Vim也可以使用可视模式实现这一功能。在本章中，您将学习如何使用可视模式来有效地处理文本块。</p><h2 id="三种可视模式"><a href="#三种可视模式" class="headerlink" title="三种可视模式"></a>三种可视模式</h2><p>Vim有三种可视模式，分别是：</p><figure class="highlight nginx"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">v</span>         逐字符可视模式<br>V         逐行可视模式<br>Ctrl-v    逐块可视模式<br></code></pre></td></tr></table></figure><p>如果您有下列文字：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br><span class="hljs-literal">three</span><br></code></pre></td></tr></table></figure><p>逐字符可视模式用于选择单个字符。在第一行的第一个字符上按<code>v</code>。然后使用<code>j</code>跳转至下一行。它高亮显示从”one”到光标位置的所有文本。现在，如果您按<code>gU</code>，Vim将高亮显示的字符转为大写。</p><p>逐行可视模式适用于整行。按<code>V</code>并观看Vim选择光标的所在行。就像逐字符可视模式一样，如果您运行<code>gU</code>，Vim将高亮显示的字符转为大写。</p><p>逐块可视模式适用于行和列。与其他两种模式相比，它为您提供了更大的移动自由度。按<code>Ctrl-V</code>，Vim像逐字符可视模式一样高亮显示光标下的字符，但向下移动时，除非光标已经在行尾，否则不会高亮显示光标上方的整行，它跳转至下一行时高亮显示尽可能少的字符。尝试用<code>h/j/k/l</code>移动，并观察光标的移动。</p><p>在Vim窗口的左下方，您会看到显示<code>-- VISUAL --</code>，<code>-- VISUAL LINE --</code>或<code>-- VISUAL BLOCK --</code>以提示您所处的可视模式。</p><p>当您处于可视模式时，可以通过按<code>v</code>，<code>V</code>或<code>Ctrl-V</code>键切换到另一种可视模式。例如，如果您处于逐行可视模式，并且想要切换为逐块可视模式，请运行<code>Ctrl-V</code>。试试吧！</p><p>有三种退出可视模式的方法：<code>esc</code>，<code>Ctrl-C</code>和与当前可视模式相同的键。后者的意思是，如果您当前处于逐行可视模式(<code>V</code>)，则可以通过再次按<code>V</code>退出它。如果您处于字符可视模式，则可以通过按<code>v</code>退出它。如果您处于逐块可视模式，请按<code>Ctrl-V</code>。</p><p>实际上，还有另一种进入可视模式的方式：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gv</span>    转到上一个可视模式<br></code></pre></td></tr></table></figure><p>它将在与上次相同的高亮显示的文本块上启动相同的可视模式。</p><h2 id="可视模式导航"><a href="#可视模式导航" class="headerlink" title="可视模式导航"></a>可视模式导航</h2><p>在可视模式下，您可以使用Vim动作(motion)扩展高亮显示的文本块。</p><p>让我们使用之前使用的相同文本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br><span class="hljs-literal">three</span><br></code></pre></td></tr></table></figure><p>这次让我们从”two”行开始。按<code>v</code>进入字符可视模式(这里的方括号<code>[]</code>表示高亮显示的字符)：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">one<br><span class="hljs-string">[t]</span>wo<br>three<br></code></pre></td></tr></table></figure><p>按<code>j</code>，Vim将高亮显示从”two”行到”three”行的第一个字符的所有文本。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">one</span><br>[<span class="hljs-keyword">two</span><br>t]hree<br></code></pre></td></tr></table></figure><p>假设您刚刚意识到还需要高亮显示”one”行，因此按<code>k</code>。令您沮丧的是，它现在排除了”three”高亮。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">one<br><span class="hljs-string">[t]</span>wo<br>three<br></code></pre></td></tr></table></figure><p>有没有一种方法可以自由地扩展视觉选择范围，以向您想要的任何方向发展？</p><p>答案是肯定的。让我们先恢复光标到高亮显示”two”和”three”行的位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">one</span><br>[two<br>t]hree    <span class="hljs-operator">&lt;</span><span class="hljs-comment">-- 光标</span><br></code></pre></td></tr></table></figure><p>高亮区域跟随光标移动。如果要将其向上扩展到行”one”，则需要将光标移动到”two”，现在您的光标在”three”行上。这时可以用<code>o</code>或<code>O</code>切换光标位置。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">one</span><br>[two     <span class="hljs-operator">&lt;</span><span class="hljs-comment">-- 光标</span><br>t]hree<br></code></pre></td></tr></table></figure><p>现在，当您按<code>k</code>时，它不再缩小选择，而是向上扩展。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">[<span class="hljs-keyword">one</span><br><span class="hljs-keyword">two</span><br>t]hree<br></code></pre></td></tr></table></figure><p>在可视模式中使用<code>o</code>或<code>O</code>，光标会在高亮选择区域的开头和结尾跳转，以便与您扩展高亮区域。</p><h2 id="可视模式语法"><a href="#可视模式语法" class="headerlink" title="可视模式语法"></a>可视模式语法</h2><p>可视模式与普通模式使用相同的操作符(operations)。</p><p>例如，如果您有以下文字，然后您想在可视模式中删除前两行：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br><span class="hljs-literal">three</span><br></code></pre></td></tr></table></figure><p>用逐行可视模式(<code>V</code>)高亮显示”one”和”two”行：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">[<span class="hljs-keyword">one</span><br><span class="hljs-keyword">two</span>]<br>three<br></code></pre></td></tr></table></figure><p>按下<code>d</code>键将删除选择，类似于普通模式。请注意，与普通模式的语法规则有所不同，动词+名词不适用可视模式。虽然存在相同的动词(<code>d</code>)，但在可视模式下没有名词。可视模式下的语法规则是名词+动词(反过来了)，其中名词是高亮显示的文本。首先选择文本块，然后进行操作。</p><p>在普通模式下，有一些命令不需要名词(motion)，例如<code>x</code>删除光标下方的单个字符，还有<code>r</code>替换光标下方的字符(<code>rx</code>将当前光标下的字符替换为<code>x</code>)。在可视模式下，这些命令现在将应用于整个高亮显示的文本，而不是单个字符。回到高亮显示的文本：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata">[<span class="hljs-keyword">one</span><br><span class="hljs-keyword">two</span>]<br>three<br></code></pre></td></tr></table></figure><p>运行<code>x</code>会删除所有高亮显示的文本。</p><p>您可以使用此行为在markdown文本中快速创建标题。假设您需要快速下面的文本转换为一级markdown标题(“&#x3D;&#x3D;&#x3D;”):</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Chapter One</span><br></code></pre></td></tr></table></figure><p>首先，您使用<code>yy</code>复制文本，然后使用<code>p</code>粘贴文本：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-section">Chapter One</span><br><span class="hljs-section">Chapter One</span><br></code></pre></td></tr></table></figure><p>现在转到第二行，以逐行可视模式选择它：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-section">Chapter One</span><br><span class="hljs-comment">[Chapter One]</span><br></code></pre></td></tr></table></figure><p>在markdown中，您可以通过在文本下方添加一系列<code>=</code>来创建标题，因此您可以通过运行<code>r=</code>来替换整个高亮显示的文本：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Chapter One<br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>要了解有关可视模式下的运算符的更多信息，请查看<code>:h visual-operators</code>。</p><h2 id="可视模式和Ex命令"><a href="#可视模式和Ex命令" class="headerlink" title="可视模式和Ex命令"></a>可视模式和Ex命令</h2><p>您可以有选择地在高亮显示的文本块上应用Ex命令。如果您具有以下表达式,并想将前两行的”const”替换为”let”：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;one&quot;</span><span class="hljs-comment">;</span><br>const two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;two&quot;</span><span class="hljs-comment">;</span><br>const three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;three&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>用 <em>任意</em> 可视模式高亮显示前两行，然后运行替换命令<code>:s/const/let/g</code>：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;one&quot;</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;two&quot;</span><span class="hljs-comment">;</span><br>const three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;three&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>请注意，我说过您可以使用 <em>任何</em> 可视模式执行此操作。您不必高亮显示整个行即可在该行上运行Ex命令。只要您在每行上至少选择一个字符，就会应用Ex命令。</p><h2 id="跨多行编辑"><a href="#跨多行编辑" class="headerlink" title="跨多行编辑"></a>跨多行编辑</h2><p>您可以使用逐块可视模式在Vim中跨多行编辑文本。如果需要在每行末尾添加分号：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = <span class="hljs-string">&quot;one&quot;</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = <span class="hljs-string">&quot;two&quot;</span><br><span class="hljs-keyword">const</span> three = <span class="hljs-string">&quot;three&quot;</span><br></code></pre></td></tr></table></figure><p>将光标放在第一行上：</p><ul><li>进入逐块可视模式，并向下两行(<code>Ctrl-V jj</code>)。</li><li>高亮显示到行尾(<code>$</code>)。</li><li>按(<code>A</code>) ，然后键入”;”。</li><li>退出可视模式(<code>esc</code>)。</li></ul><p>您应该看到在每一行后面附加的 “;”。666! 有两种方法可以从逐块可视模式进入输入模式：可以使用<code>A</code>在光标后输入文本，也可以使用<code>I</code>在光标前输入文本。请勿将它们与普通模式下的<code>A</code>和<code>I</code>混淆。(普通模式中，<code>A</code>表示在行尾添加内容，<code>I</code>表示在行尾非空字符前插入内容)。</p><p>另外，您也可以使用<code>:normal</code>命令在多行添加内容：<br>-高亮显示所有3行(<code>vjj</code>)。<br>-输入<code>:normal! A;</code>。</p><p>记住，<code>:normal</code>命令执行普通模式命令。您可以指示它运行<code>A;</code>在该行的末尾添加文本”;”。</p><h2 id="递增数字"><a href="#递增数字" class="headerlink" title="递增数字"></a>递增数字</h2><p>Vim有<code>Ctrl-X</code>和<code>Ctrl-A</code>命令来减少和增加数字。与可视模式一起使用时，可以跨多行递增数字。</p><p>如果您具有以下HTML元素：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-1&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-1&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-1&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-1&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-1&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>有多个具有相同名称的id是一个不好的做法，因此让我们对其进行递增以使其唯一：</p><ul><li>将光标移动到 <strong>第二行</strong>的 “1”。</li><li>启动逐块可视模式，并向下移动3行(<code>Ctrl-V 3j</code>)。这高亮显示剩余的”1”，现在除了第一行，所有的”1”应该已经高亮。</li><li>运行<code>g Ctrl-A</code>。</li></ul><p>您应该看到以下结果：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-1&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-2&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-3&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-4&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-5&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p><code>g Ctrl-A</code>在多行上递增数字。 <code>Ctrl-X/Ctrl-A</code>也可以增加字母。如果您运行：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing">:<span class="hljs-built_in">set</span> nrformats+=<span class="hljs-built_in">alpha</span><br></code></pre></td></tr></table></figure><p><code>nrformats</code>选项指示Vim将哪个基数视为<code>Ctrl-A</code>和<code>Ctrl-X</code>递增和递减的“数字”。通过添加<code>alpha</code>，现在将字母字符视为数字。如果您具有以下HTML元素：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-a&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-a&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-a&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-a&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-a&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><p>将光标放在第二个”app-a”上。使用与上述相同的技术(<code>Ctrl-V 3j</code> 然后 <code>g Ctrl-A</code>)增加ID。</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-a&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-b&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-c&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-d&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br>&lt;<span class="hljs-keyword">div</span> <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;app-e&quot;</span>&gt;&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="选择最后一个可视模式区域"><a href="#选择最后一个可视模式区域" class="headerlink" title="选择最后一个可视模式区域"></a>选择最后一个可视模式区域</h2><p>前面章节中我提到了<code>gv</code>可以快速高亮显示上一个可视模式选择的内容。您还可以使用以下两个特殊标记转到最后一个可视模式的开始和结束位置：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;&lt;    转到上一个可视模式高亮显示的第一个位置（行）(译者注，英文原版中&#x27;&lt;&#x27;前面的符号是`，但这应该是一个错误，应该是单引号&#x27;)<br>&#x27;&gt;    转到上一个可视模式高亮显示的最后位置（行）<br></code></pre></td></tr></table></figure><p>之前，我提到过您可以在高亮显示的文本上有选择地执行Ex命令，例如：<code>:s/const/let/g</code>。当您这样做时，您应该看到以下内容：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:<span class="hljs-string">&#x27;&lt;,&#x27;</span>&gt;s/const/let/g</span><br></code></pre></td></tr></table></figure><p>您实际上是在使用(<code>&#39;&lt;, &#39;&gt;</code>) 标记作为范围来执行 <code>s/const/let/g</code>命令。这太有趣了！</p><p>您随时可以随时编辑这些标记。比如，如果您需要从高亮显示的文本的开头到文件的末尾进行替换，则只需将命令行更改为：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs julia">:&#x27;&lt;,$s/<span class="hljs-keyword">const</span>/<span class="hljs-keyword">let</span>/g<br></code></pre></td></tr></table></figure><h2 id="从插入模式进入可视模式"><a href="#从插入模式进入可视模式" class="headerlink" title="从插入模式进入可视模式"></a>从插入模式进入可视模式</h2><p>您也可以从插入模式进入可视模式。在插入模式下进入字符可视模式：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Ctrl-O v</span><br></code></pre></td></tr></table></figure><p>回想一下，在插入模式下运行<code>Ctrl-O</code>可以使您执行普通模式命令。在普通模式命令挂起模式下，运行<code>v</code>进入逐字可视模式。请注意，在屏幕的左下方，它显示为<code>--(insert) VISUAL--</code>。该技巧适用于任何可视模式运算符：<code>v</code>，<code>V</code>，和<code>Ctrl-V</code>。</p><h2 id="选择模式"><a href="#选择模式" class="headerlink" title="选择模式"></a>选择模式</h2><p>Vim具有类似于可视模式的模式，称为<em>选择模式</em>。与可视模式一样，它也具有三种不同的模式：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gh</span>         逐字符选择模式<br>gH         逐行选择模式<br>gCtrl-h    逐块选择模式<br></code></pre></td></tr></table></figure><p>选择模式比Vim的可视模式更接近常规编辑器的文本高亮显示行为。</p><p>在常规编辑器中，高亮显示文本块并键入字母（例如字母”y”）后，它将删除高亮显示的文本并插入字母”y”。如果您使用逐行选择模式(<code>gH</code>)高亮显示一行文本并键入”y”，它将删除高亮显示的文本并插入字母”y”，这与常规文本编辑器非常相似。</p><p>将此行为与可视模式进行对比：如果您使用逐行可视模式(<code>V</code>)高亮显示一行文本并键入”y”，则高亮显示的文本不会被删除且被字母”y”代替，而是仅将其复制(yank)。在选择模式中，你不能执行对高亮文本执行普通模式的命令。</p><p>我个人从未使用过选择模式，但是很高兴知道它的存在。</p><h2 id="以聪明的方式学习可视模式"><a href="#以聪明的方式学习可视模式" class="headerlink" title="以聪明的方式学习可视模式"></a>以聪明的方式学习可视模式</h2><p>可视模式是Vim高亮显示文本的过程。</p><p>如果发现使用可视模式操作的频率比正常模式操作的频率高得多，请当心。我认为这是一种反模式。运行可视模式操作所需的击键次数要多于普通模式下的击键次数。假设您需要删除一个内部单词(inner word，请回顾前面的文本对象)，如果可以只用三个按键(<code>diw</code>)，为什么要使用四个按键<code>viwd</code>（先<code>v</code>进入可视模式，然后<code>iw</code>高亮一个内部单词，最后<code>d</code>删除）呢？前者更为直接和简洁。当然，有时使用可视模式是合适的，但总的来说，更倾向于直接的方法。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-搜索和替换</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch12_search_and_substitute/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch12_search_and_substitute/</url>
    
    <content type="html"><![CDATA[<h1 id="第12章-搜索和替换"><a href="#第12章-搜索和替换" class="headerlink" title="第12章 搜索和替换"></a>第12章 搜索和替换</h1><p>本章涵盖两个独立但相关的概念:搜索和替代。很多时候，您得基于文本的共同模式搜索大量的内容。通过学习如何在搜索和替换中使用正则表达式而不是字面字符串，您将能够快速定位任何文本。</p><p>附带说明一下，在本章中，当谈论搜索时，我将主要使用<code>/</code>。您使用<code>/</code>进行的所有操作也可以使用<code>?</code>完成。</p><h2 id="智能区分大小写"><a href="#智能区分大小写" class="headerlink" title="智能区分大小写"></a>智能区分大小写</h2><p>尝试匹配搜索词的大小写可能会很棘手。如果要搜索文本”Learn Vim”，则很容易把字母的大小写输错，从而得到错误的搜索结果。如果可以匹配任何情况，会不会更轻松，更安全？这是选项<code>ignorecase</code>闪亮的地方。只需在 vimrc 中添加<code>set ignorecase</code>，所有搜索词就不区分大小写。现在，您不必再执行<code>/Learn Vim</code>了。 <code>/learn vim</code>将起作用。</p><p>但是，有时您需要搜索特定大小写的短语。一种方法是用 <code>set noignorecase</code> 关闭<code>ignorecase</code>选项，但是每次需要搜索区分大小写的短语时，都得反复地打开和关闭这个选项。</p><p>为避免反复开关<code>ignorecase</code>选项，Vim 有一个<code>smartcase</code>选项。您可以将<code>ignorecase</code>和<code>smartcase</code>选项结合起来，当您输入的搜索词全部是小写时，进行大小写不敏感搜索；而当搜索词 <strong>至少有1个大写字母时</strong>，进行大小写敏感搜索。</p><p>在您的 vimrc 中，添加:</p><figure class="highlight gams"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> ignorecase <span class="hljs-comment">smartcase</span><br></code></pre></td></tr></table></figure><p>如果您有这些文字:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hello</span><br><span class="hljs-attribute">HELLO</span><br><span class="hljs-attribute">Hello</span><br></code></pre></td></tr></table></figure><ul><li><code>/hello</code> 匹配”hello”，”HELLO”和”Hello”。</li><li><code>/HELLO</code> 仅匹配”HELLO”。</li><li><code>/Hello</code> 仅匹配”Hello”。</li></ul><p>有一个缺点。因为现在当您执行<code>/hello</code>时，Vim 将进行大小写不敏感搜索,那如果只需要搜索小写字符串怎么办？您可以在搜索词前使用<code>\C</code>模式来告诉 Vim，后续搜索词将区分大小写。如果执行<code>/\Chello</code>，它将严格匹配”hello”，而不是”HELLO”或”Hello”。</p><h2 id="一行中的第一个和最后一个字符"><a href="#一行中的第一个和最后一个字符" class="headerlink" title="一行中的第一个和最后一个字符"></a>一行中的第一个和最后一个字符</h2><p>您可以使用<code>^</code>匹配行中的第一个字符，并使用<code>$</code>匹配行中的最后一个字符。</p><p>如果您有以下文字:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hello hello</span><br></code></pre></td></tr></table></figure><p>您可以使用<code>/^hello</code>来定位第一个”hello”。 ‘^’后面的字符必须是一行中的第一个字符。 要定位最后一个”hello”，请运行<code>/hello$</code>。 ‘$‘ 之前的字符必须是一行中的最后一个字符。</p><p>如果您有以下文字:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">hello hello <span class="hljs-keyword">friend</span><br></code></pre></td></tr></table></figure><p>运行<code>/hello$</code>将匹配不到任何内容，因为”friend”是该行的最后一项，而不是”hello”。</p><h2 id="重复搜索"><a href="#重复搜索" class="headerlink" title="重复搜索"></a>重复搜索</h2><p>您可以使用<code>//</code>重复上一个搜索。如果您只是搜索<code>/hello</code>，则运行<code>//</code>等同于运行<code>/hello</code>。此快捷键可以为您节省一些按键操作，尤其是在您刚搜索了一个很长的字符串的情况下。另外，回想一下前面的章节，您还可以使用<code>n</code>和<code>N</code>分别以相同方向和相反方向重复上一次搜索。</p><p>如果您想快速回忆起 第<em>n</em>个最近使用的搜索字怎么办？您可以先按<code>/</code>，然后按<code>up</code>&#x2F;<code>down</code>方向键（或<code>Ctrl-N</code>&#x2F;<code>Ctrl-P</code>），快速遍历搜索历史，直到找到所需的搜索词。要查看所有搜索历史，可以运行<code>:history /</code>。</p><p>在搜索过程中到达文件末尾时，Vim 会抛出一个错误:<code>&quot;搜索到达底部,未找到匹配项:&#123;your-search&#125;&quot;</code>(<code>&quot;Search hit the BOTTOM without match for: &#123;your-search&#125;&quot;</code>)。有时这个特性能成为一个安全守卫，可以防止过度搜索，但是有时您又想将搜索重新循环到顶部。您可以使用<code>set wrapscan</code>选项使 Vim 在到达文件末尾时回到文件顶部进行搜索。要关闭此功能，请执行<code>set nowrapscan</code>。</p><h2 id="使用候选词搜索"><a href="#使用候选词搜索" class="headerlink" title="使用候选词搜索"></a>使用候选词搜索</h2><p>一次搜索多个单词属于日常操作。 如果您需要搜索”hello vim”或”hola vim”，而不是”salve vim”或”bonjour vim”，则可以使用<code>|</code>或运算符。</p><p>给予这样一段文本:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">hello <span class="hljs-keyword">vim</span><br>hola <span class="hljs-keyword">vim</span><br>salve <span class="hljs-keyword">vim</span><br>bonjour <span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure><p>要同时匹配”hello”和”hola”，可以执行<code>/hello\|hola</code>。 您必须使用（<code>\</code>）转义（<code>|</code>）或运算符，否则 Vim 将按字面意义搜索字符串”|”。</p><p>如果您不想每次都输入<code>\|</code>，则可以在搜索开始时使用<code>magic</code>语法（<code>\v</code>）:<code>/\vhello|hola</code>。 我不会在本章中详细介绍<code>magic</code>，但是有了<code>\v</code>，您就不必再转义特殊字符了。 要了解有关<code>\v</code>的更多信息，请随时查看<code>:h \v</code>。</p><h2 id="设置模式匹配的开始位置和结束位置"><a href="#设置模式匹配的开始位置和结束位置" class="headerlink" title="设置模式匹配的开始位置和结束位置"></a>设置模式匹配的开始位置和结束位置</h2><p>也许您需要搜索的文本是复合词的一部分。如果您有这些文字:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">11</span>vi<span class="hljs-name">m22</span><br>vi<span class="hljs-name">m22</span><br><span class="hljs-number">11</span>vim<br>vim<br></code></pre></td></tr></table></figure><p>如果您仅需要选择以”11”开始、以”22”结束的”vim”，您可以使用<code>\zs</code>（开始匹配）和<code>\ze</code>（结束匹配）运算符。 执行:</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/11</span>\zsvim\ze22<br></code></pre></td></tr></table></figure><p>Vim仍然会匹配整个模式”11vim22”，但是仅高亮显示介于<code>\zs</code>和<code>\ze</code>之间的内容。 另一个例子:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">foobar</span><br><span class="hljs-attribute">foobaz</span><br></code></pre></td></tr></table></figure><p>如果需要在”foobaz”中搜索”foo”，而不是在”foobar”中搜索，请运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/foo\zebaz<br></code></pre></td></tr></table></figure><h2 id="搜索字符组"><a href="#搜索字符组" class="headerlink" title="搜索字符组"></a>搜索字符组</h2><p>到目前为止，您所有的搜索字都是字面内容。在现实生活中，您可能必须使用通用模式来查找文本。最基本的模式是字符组<code>[ ]</code>。</p><p>如果您需要搜索任何数字，则可能不想每一次都输入<code>/0\|1\|2\|3\|4\|5\|6\|7\|8\|9\|0</code>。相反，请使用<code>/[0-9]</code>来匹配一位数字。 <code>0-9</code>表达式表示 Vim 尝试匹配的数字范围是 0-9，因此，如果要查找 1 到 5 之间的数字，请使用<code>/[1-5]</code>。</p><p>数字不是 Vim 可以查找的唯一数据类型。您也可以执行<code>/[a-z]</code>来搜索小写字母，而<code>/[A-Z]</code>来搜索大写字母。</p><p>您可以将这些范围组合在一起。如果您需要搜索数字 0-9 以及从 a 到 f（十六进制）的小写字母和大写字母，可以执行<code>/[0-9a-fA-F]</code>。</p><p>要进行否定搜索，可以在字符范围括号内添加<code>^</code>。要搜索非数字，请运行<code>/[^0-9]</code>，Vim会匹配任何字符，只要它不是数字即可。请注意，范围括号内的脱符号（<code>^</code>）与行首位置符号（例如:<code>/^hello</code>）不同。如果插入号在一对方括号之外，并且是搜索词中的第一个字符，则表示”一行中的第一个字符”。如果插入符号在一对方括号内，并且是方括号内的第一个字符，则表示否定搜索运算符。 <code>/^abc</code>匹配行中的第一个”abc”，而<code>/[^abc]</code>匹配除”a”，”b”或”c”以外的任何字符。</p><h2 id="搜索重复字符"><a href="#搜索重复字符" class="headerlink" title="搜索重复字符"></a>搜索重复字符</h2><p>如果需要在此文本中搜索两位数:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-number">1</span>aa<br><span class="hljs-number">11</span><span class="hljs-keyword">a</span><br><span class="hljs-number">111</span><br></code></pre></td></tr></table></figure><p>您可以使用<code>/[0-9][0-9]</code>来匹配两位数字字符，但是该方法难以扩展。 如果您需要匹配二十个数字怎么办？ 打字 20 次[[0-9]]并不是一种有趣的体验。 这就是为什么您需要一个<code>count</code>参数。</p><p>您可以将<code>count</code>传递给您的搜索。 它具有以下语法:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="hljs-template-variable">&#123;n,m&#125;</span><br></code></pre></td></tr></table></figure><p>顺便说一句，当在 Vim 中使用它们时，这些<code>count</code>周围的花括号需要被转义。 <code>count</code> 运算符放在您要递增的单个字符之后。</p><p>这是<code>count</code>语法的四种不同变体: </p><ul><li><code>&#123;n&#125;</code>是精确匹配。 <code>/[0-9]\&#123;2\&#125;</code>匹配两个数字:”11”，以及”111”中的”11”。</li><li><code>&#123;n,m&#125;</code>是范围匹配。 <code>/[0-9]\&#123;2,3\&#125;</code>匹配 2 到 3 位数字:”11”和”111”。 </li><li><code>&#123;,m&#125;</code>是上限匹配。 <code>/[0-9]\&#123;,3\&#125;</code>匹配最多 3 个数字:”1”，”11”和”111”。</li><li><code>&#123;n,&#125;</code>是下限匹配。 <code>/[0-9]\&#123;2,\&#125;</code>匹配最少 2 个或多个数字:”11”和”111”。</li></ul><p>计数参数<code>\&#123;0,\&#125;</code>（零或多个）和<code>\&#123;1,\&#125;</code>（一个或多个）是最常见的搜索模式，Vim 为它们提供了特殊的操作符:<code>*</code>和<code>+</code>（ <code>+</code>需要被转义，而<code>*</code> 可以正常运行而无需转义）。 如果执行<code>/[0-9]*</code>，功能与<code>/[0-9]\&#123;0,\&#125;</code>相同。 它搜索零个或多个数字，会匹配””，”1”，”123”。 顺便说一句，它也将匹配非数字，例如”a”，因为在技术上，字母”a”中的数字个数为零。 在使用”*“之前，请仔细考虑。 如果执行<code>/[0-9]\+</code>，则与<code>/[0-9]\&#123;1,\&#125;</code>相同。 它搜索一个或多个数字，将匹配”1”和”12”。</p><h2 id="预定义的字符组"><a href="#预定义的字符组" class="headerlink" title="预定义的字符组"></a>预定义的字符组</h2><p>Vim 为常见字符组（例如数字和字母）提供了简写。 我不会在这里逐一介绍，但可以在<code>:h /character-classes</code>中找到完整列表。 下面是有用的部分:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\d</span>    数字[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]<br><span class="hljs-string">\D</span>    非数字[^ <span class="hljs-number">0</span>-<span class="hljs-number">9</span>]<br><span class="hljs-string">\s</span>    空格字符（空格和制表符）<br><span class="hljs-string">\S</span>    非空白字符（除空格和制表符外的所有字符）<br><span class="hljs-string">\w</span>    单词字符[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>A-Za-z_]<br><span class="hljs-string">\l</span>    小写字母[a-z]<br><span class="hljs-string">\u</span>    大写字符[A-Z]<br></code></pre></td></tr></table></figure><p>您可以像使用普通字符组一样使用它们。 要搜索任何一位数字，可以使用<code>/\d</code>以获得更简洁的语法，而不使用<code>/[0-9]</code>。</p><h2 id="搜索示例：在一对相似字符之间捕获文本"><a href="#搜索示例：在一对相似字符之间捕获文本" class="headerlink" title="搜索示例：在一对相似字符之间捕获文本"></a>搜索示例：在一对相似字符之间捕获文本</h2><p>如果要搜索由双引号引起来的短语:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">&quot;Vim is awesome!&quot;</span><br></code></pre></td></tr></table></figure><p>运行这个:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">`/<span class="hljs-string">&quot;[^&quot;</span>]\+<span class="hljs-string">&quot;`</span><br></code></pre></td></tr></table></figure><p>让我们分解一下:</p><ul><li><code>&quot;</code> 是字面双引号。它匹配第一个双引号。</li><li><code>[^&quot;]</code> 表示除双引号外的任何字符，只要不是双引号，它就与任何字母数字和空格字符匹配。</li><li><code>\+</code>表示一个或多个。因为它的前面是<code>[^&quot;]</code>，因此 Vim 查找一个或多个不是双引号的字符。</li><li><code>&quot;</code> 是字面双引号。它与右双引号匹配。</li></ul><p>当看到第一个<code>&quot;</code>时，它开始模式捕获。Vim 在一行中看到第二个双引号时，它匹配第二个<code>&quot;</code>模式并停止模式捕获。同时，两个双引号之间的所有非双引号字符都被<code>[^&quot;]\+</code> 模式捕获，在这个例子中是短语”Vim is awesome!”。这是一个通用模式（其实就是正则表达式）用于捕获 <strong>由一对类似的定界符包围的短语</strong>。</p><ul><li>要捕获被单引号包围的短语，你可以使用<code>/&#39;[^&#39;]\+&#39;</code></li><li>要捕获为0包围的短语，你可以使用<code>/0[^0]\+0</code></li></ul><h2 id="搜索示例：捕获电话号码"><a href="#搜索示例：捕获电话号码" class="headerlink" title="搜索示例：捕获电话号码"></a>搜索示例：捕获电话号码</h2><p>如果要匹配以连字符(<code>-</code>)分隔的美国电话号码，例如<code>123-456-7890</code>，则可以使用:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">/\d\</span><span class="hljs-template-variable">&#123;3\&#125;</span><span class="language-xml">-\d\</span><span class="hljs-template-variable">&#123;3\&#125;</span><span class="language-xml">-\d\</span><span class="hljs-template-variable">&#123;4\&#125;</span><br></code></pre></td></tr></table></figure><p>美国电话号码的组成是：首先是三位数字，其后是另外三位数字，最后是另外四位数字。 让我们分解一下:</p><ul><li><code>\d\&#123;3\&#125;</code>与精确重复三次的数字匹配</li><li><code>-</code>是字面的连字符</li></ul><p>为避免转义，可使用<code>\v</code>:</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">/\v\d</span><span class="hljs-template-variable">&#123;3&#125;</span><span class="language-xml">-\d</span><span class="hljs-template-variable">&#123;3&#125;</span><span class="language-xml">-\d</span><span class="hljs-template-variable">&#123;4&#125;</span><br></code></pre></td></tr></table></figure><p>此模式还可用于捕获任何重复的数字，例如 IP 地址和邮政编码。</p><p>这涵盖了本章的搜索部分。 现在开始讲替换。</p><h2 id="基本替换"><a href="#基本替换" class="headerlink" title="基本替换"></a>基本替换</h2><p>Vim 的替代命令是一个有用的命令，用于快速查找和替换任何模式。 替换语法为:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">:s<span class="hljs-regexp">/&#123;old-pattern&#125;/</span>&#123;<span class="hljs-keyword">new</span>-pattern&#125;/<br></code></pre></td></tr></table></figure><p>让我们从一个基本用法开始。 如果您有以下文字:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> good<br></code></pre></td></tr></table></figure><p>让我们用”awesome”代替”good”，因为 Vim 很棒。 运行<code>:s/good/awesome/.</code>您应该看到:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br></code></pre></td></tr></table></figure><h2 id="重复最后一次替换"><a href="#重复最后一次替换" class="headerlink" title="重复最后一次替换"></a>重复最后一次替换</h2><p>您可以使用普通模式命令<code>&amp;</code>或运行<code>:s</code>来重复最后一个替代命令。 如果您刚刚运行<code>:s/good/awesome/</code>，则运行<code>&amp;</code>或<code>:s</code>将会重复执行。</p><p>另外，在本章前面，我提到您可以使用<code>//</code>来重复先前的搜索模式。 此技巧可用于替代命令。 如果<code>/good</code>是最近被替换的单词，那么将第一个替换模式参数留为空白，例如在<code>:s//awesome/</code>中，则与运行<code>:s/good/awesome/</code>相同。</p><h2 id="替换范围"><a href="#替换范围" class="headerlink" title="替换范围"></a>替换范围</h2><p>就像许多 Ex 命令一样，您可以将范围参数传递给替换命令。 语法为:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">:[range]s<span class="hljs-regexp">/old/</span><span class="hljs-keyword">new</span>/<br></code></pre></td></tr></table></figure><p>如果您有以下表达式:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-comment">;</span><br>let four <span class="hljs-operator">=</span> <span class="hljs-number">4</span><span class="hljs-comment">;</span><br>let five <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>要将第3行到第5行中的”let”替换为”const”，您可以执行以下操作:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:<span class="hljs-number">3</span>,<span class="hljs-number">5</span>s<span class="hljs-regexp">/let/</span>const/<br></code></pre></td></tr></table></figure><p>下面是一些你可以使用的范围参数的变体:</p><ul><li><code>:,3/let/const/</code> - 如果逗号前没有给出任何内容，则表示当前行。 从当前行替换到第 3 行。</li><li><code>:1,s/let/const/</code> - 如果逗号后没有给出任何内容，它也代表当前行。 从第 1 行替换到当前行。</li><li><code>:3s/let/const/</code> - 如果仅给出一个值作为范围（不带逗号），则仅在该行进行替换。</li></ul><p>在 Vim 中，<code>%</code>通常表示整个文件。 如果运行<code>:%s/let/const/</code>，它将在所有行上进行替换。请记住这个范围参数语法，在后面章节中很多命令行命令都遵循这个语法。</p><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p>接下来的几节将介绍基本的正则表达式。 丰富的模式知识对于掌握替换命令至关重要。</p><p>如果您具有以下表达式:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-comment">;</span><br>let four <span class="hljs-operator">=</span> <span class="hljs-number">4</span><span class="hljs-comment">;</span><br>let five <span class="hljs-operator">=</span> <span class="hljs-number">5</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>要在数字周围添加一对双引号:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/</span>\d/<span class="hljs-string">&quot;\0&quot;</span>/<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br>let four <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment">;</span><br>let five <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>让我们分解一下命令:</p><ul><li><code>:%s</code> 定位整个文件以执行替换。</li><li><code>\d</code> 是 Vim 的预定义数字范围简写(类似使用<code>[0-9]</code>)。</li><li><code>&quot;\0&quot;</code> 双引号是双引号的字面值。 <code>\0</code>是一个特殊字符，代表”整个匹配的模式”。 此处匹配的模式是单个数字<code>\d</code>。</li></ul><p>另外，<code>&amp;</code>也同样代表”整个匹配的模式”，就像<code>\0</code>一样。 <code>:s/\d/&quot;&amp;&quot;/</code>也可以。</p><p>让我们考虑另一个例子。 给出以下表达式，您需要将所有的”let”和变量名交换位置:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">one let <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>two let <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>three let <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br>four let <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment">;</span><br>five let <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>为此，请运行:</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">:%s/<span class="hljs-symbol">\(</span>\w\+<span class="hljs-symbol">\)</span> <span class="hljs-symbol">\(</span>\w\+<span class="hljs-symbol">\)</span>/\2 \1/<br></code></pre></td></tr></table></figure><p>上面的命令包含太多的反斜杠，很难阅读。 使用<code>\v</code>运算符更方便:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/</span>\v(\w+) (\w+)/\<span class="hljs-number">2</span> \<span class="hljs-number">1</span>/<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br>let four <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment">;</span><br>let five <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>太好了！ 让我们分解该命令:</p><ul><li><code>:%s</code> 定位文件中的所有行以执行替换操作</li><li><code>(\w+) (\w+)</code>对模式进行分组。<code>\w</code>是 Vim 预定义的单词字符范围简写(<code>[0-9A-Za-z_]</code>)之一。 包围<code>\w</code>的<code>()</code>将匹配的单词字符进行分组。 请注意两个分组之间的空间。 <code>(\w+) (\w+)</code> 捕获两个分组。 在第一行上，第一组捕获”let”，第二组捕获”one”。(英文版中，作者写成了：第一组捕获”one”，第二组捕获”two”，可能是作者不小心的错误)。</li><li><code>\2 \1</code> 以相反的顺序返回捕获的组。 <code>\2</code>包含捕获的字符串”let”，而<code>\1</code>包含字符串”one”。 使<code>\2 \1</code>返回字符串”let one”。</li></ul><p>回想一下，<code>\0</code>代表整个匹配的模式。 您可以使用<code>( )</code>将匹配的字符串分成较小的组。 每个组都由<code>\1</code>, <code>\2</code>, <code>\3</code>等表示。</p><p>让我们再举一个例子来巩固这一匹配分组的概念。 如果您有以下数字:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">123<br>456<br>789<br></code></pre></td></tr></table></figure><p>要颠倒顺序，请运行:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">:<span class="hljs-meta">%</span>s/\v<span class="hljs-comment">(\d)</span><span class="hljs-comment">(\d)</span><span class="hljs-comment">(\d)</span>/\<span class="hljs-number">3</span>\<span class="hljs-number">2</span>\<span class="hljs-number">1</span>/<br></code></pre></td></tr></table></figure><p>结果是:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">321<br>654<br>987<br></code></pre></td></tr></table></figure><p>每个<code>(\d)</code>都匹配一个数字并创建一个分组。 在第一行上，第一个<code>(\d)</code>的值为”1”，第二个<code>(\d)</code>的值为”2”，第三个<code>(\d)</code>的值为”3”。 它们存储在变量<code>\1</code>，<code>\2</code>和<code>\3</code>中。 在替换的后半部分，新模式<code>\3\2\1</code>在第一行上产生”321”值。</p><p>相反，如果您运行下面的命令:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/</span>\v(\d\d)(\d)/\<span class="hljs-number">2</span>\<span class="hljs-number">1</span>/<br></code></pre></td></tr></table></figure><p>您将获得不同的结果:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">312<br>645<br>978<br></code></pre></td></tr></table></figure><p>这是因为您现在只有两个组。 被<code>(\d\d)</code>捕获的第一组存储在<code>\1</code>内，其值为”12”。 由<code>(\d)</code>捕获的第二组存储在<code>\2</code>内部，其值为”3”。 然后，<code>\2\1</code>返回”312”。</p><h2 id="替换标志"><a href="#替换标志" class="headerlink" title="替换标志"></a>替换标志</h2><p>如果您有以下句子:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">chocolate pancake, strawberry pancake, <span class="hljs-keyword">blueberry </span>pancake<br></code></pre></td></tr></table></figure><p>要将所有 pancakes 替换为 donut，您不能只运行:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:s/pancake/donut</span><br></code></pre></td></tr></table></figure><p>上面的命令将仅替换第一个匹配项，返回的结果是:</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">chocolate donut, strawberry pancake, <span class="hljs-keyword">blueberry </span>pancake<br></code></pre></td></tr></table></figure><p>有两种解决方法。 一，您可以再运行两次替代命令。 二，您可以向其传递全局(<code>g</code>)标志来替换一行中的所有匹配项。</p><p>让我们谈谈全局标志。 运行:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:s/pancake/donut/g</span><br></code></pre></td></tr></table></figure><p>Vim 迅速将所有”pancake”替换为”donut”。 全局命令是替代命令接受的几个标志之一。 您在替代命令的末尾传递标志。 这是有用的标志的列表:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">&amp;    重用上一个替代命令中的标志。 必须作为第一个标志传递。<br>g    替换行中的所有匹配项。<br>c    要求替代确认。<br>e    防止替换失败时显示错误消息。<br><span class="hljs-selector-tag">i</span>    执行不区分大小写的替换<br><span class="hljs-selector-tag">I</span>    执行区分大小写的替换<br></code></pre></td></tr></table></figure><p>我上面没有列出更多标志。 要了解所有标志，请查看<code>:h s_flags</code>。</p><p>顺便说一句，重复替换命令（<code>&amp;</code>和<code>:s</code>）不保留标志。 运行<code>&amp;</code>只会重复<code>:s/pancake/donut/</code>而没有<code>g</code>。 要使用所有标志快速重复最后一个替代命令，请运行<code>:&amp;&amp;</code>。</p><h2 id="更改定界符"><a href="#更改定界符" class="headerlink" title="更改定界符"></a>更改定界符</h2><p>如果您需要用长路径替换 URL:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//my</span>site.com<span class="hljs-regexp">/a/</span>b<span class="hljs-regexp">/c/</span>d/e<br></code></pre></td></tr></table></figure><p>要用单词”hello”代替它，请运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:s/https:\/\/mysite.com\/a\/b\/c\/d\/e/hello/<br></code></pre></td></tr></table></figure><p>但是，很难说出哪些正斜杠（<code>/</code>）是替换模式的一部分，哪些是分隔符。 您可以使用任何单字节字符（除字母，数字或<code>&quot;</code>，<code>|</code>和<code>\</code>之外的字符）来更改定界符。让我们将它们替换为<code>+</code>。上面的替换命令可以重写为 :</p><figure class="highlight mercury"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mercury">:s+https:<span class="hljs-built_in">\/</span><span class="hljs-built_in">\/</span>mysite.com<span class="hljs-built_in">\/</span>a<span class="hljs-built_in">\/</span>b<span class="hljs-built_in">\/</span>c<span class="hljs-built_in">\/</span>d<span class="hljs-built_in">\/</span>e+hello+<br></code></pre></td></tr></table></figure><p>现在，更容易看到分隔符在哪里。</p><h2 id="特殊替换"><a href="#特殊替换" class="headerlink" title="特殊替换"></a>特殊替换</h2><p>您还可以修改要替换的文本的大小写。 给出以下表达式，您的任务是将所有变量名比如 “one”, “two”, “three”等，改成大写:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let one <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>let two <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>let three <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br>let four <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment">;</span><br>let five <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>请运行:</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-meta">%</span>s/\v<span class="hljs-comment">(\w+)</span> <span class="hljs-comment">(\w+)</span>/\<span class="hljs-number">1</span> \U\<span class="hljs-number">2</span>/<br></code></pre></td></tr></table></figure><p>你会得到:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">let ONE <span class="hljs-operator">=</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-comment">;</span><br>let TWO <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2&quot;</span><span class="hljs-comment">;</span><br>let THREE <span class="hljs-operator">=</span> <span class="hljs-string">&quot;3&quot;</span><span class="hljs-comment">;</span><br>let FOUR <span class="hljs-operator">=</span> <span class="hljs-string">&quot;4&quot;</span><span class="hljs-comment">;</span><br>let FIVE <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这是该命令的细分:</p><ul><li><code>(\w+) (\w+)</code>捕获前两个匹配的分组，例如”let”和”one”。</li><li><code>\1</code>返回第一个组的值”let”</li><li><code>\U\2</code>大写(<code>\U</code>)第二组(<code>\2</code>)。</li></ul><p>该命令的窍门是表达式<code>\U\2</code>。<code>\U</code>将后面跟着的字符变为大写。</p><p>让我们再举一个例子。 假设您正在编写 Vim 书籍，并且需要将一行中每个单词的首字母大写。</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">vim is <span class="hljs-keyword">the</span> greatest <span class="hljs-keyword">text</span> editor <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">whole</span> galaxy<br></code></pre></td></tr></table></figure><p>您可以运行:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:s<span class="hljs-regexp">/\&lt;./</span>\U&amp;/g<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Vim</span> <span class="hljs-variable">Is</span> <span class="hljs-variable">The</span> <span class="hljs-variable">Greatest</span> <span class="hljs-built_in">Text</span> <span class="hljs-variable">Editor</span> <span class="hljs-built_in">In</span> <span class="hljs-variable">The</span> <span class="hljs-variable">Whole</span> <span class="hljs-variable">Galaxy</span><br></code></pre></td></tr></table></figure><p>细目如下:</p><ul><li><code>:s</code> 替换当前行</li><li><code>\&lt;.</code> 由两部分组成:<code>\&lt;</code>匹配单词的开头，<code>.</code>匹配任何字符。 <code>\&lt;</code>运算符使后面跟着的字符表示单词的第一个字符。 由于<code>.</code>是下一个字符，因此它将匹配任意单词的第一个字符。</li><li><code>\U&amp;</code> 将后续符号子序列<code>&amp;</code>大写。 回想一下，<code>&amp;</code>（或<code>\0</code>）代表整个匹配。 这里它匹配单词的第一个字符。</li><li><code>g</code>全局标志。 没有它，此命令将仅替换第一个匹配项。 您需要替换此行上的每个匹配项。</li></ul><p>要了解替换的特殊替换符号（如<code>\u</code>和<code>\U</code>）的更多信息，请查看<code>:h sub-replace-special</code>。</p><h2 id="候选模式"><a href="#候选模式" class="headerlink" title="候选模式"></a>候选模式</h2><p>有时您需要同时匹配多个模式。 如果您有以下问候:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">hello <span class="hljs-keyword">vim</span><br>hola <span class="hljs-keyword">vim</span><br>salve <span class="hljs-keyword">vim</span><br>bonjour <span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure><p>您仅需在包含单词”hello”或”hola”的行上用”friend”代替”vim”。回想一想本章前面的知识点，你可以使用<code>|</code> 来分隔可选的模式:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/</span>\v(hello|hola) vim)/\<span class="hljs-number">1</span> friend/g<br></code></pre></td></tr></table></figure><p>结果:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">hello <span class="hljs-keyword">friend</span><br>hola <span class="hljs-keyword">friend</span><br>salve vim<br>bonjour vim<br></code></pre></td></tr></table></figure><p>这是细分:</p><ul><li><code>%s</code> 在文件的每一行上运行替代命令。</li><li><code>(hello|hola)</code> 匹配*“hello”或”hola”，并将其视为一个组。</li><li><code>vim</code> 是字面意思”vim”。</li><li><code>\1</code> 是第一个匹配组，它是文本”hello”或”hola”。</li><li><code>friend</code> 是字面的“朋友”。</li></ul><h2 id="指定替换模式的开始位置和结束位置"><a href="#指定替换模式的开始位置和结束位置" class="headerlink" title="指定替换模式的开始位置和结束位置"></a>指定替换模式的开始位置和结束位置</h2><p>回想一下，您可以使用<code>\zs</code>和<code>\ze</code>来指定一个匹配的开始位置和结束位置。这个技术在替换操作中同样有效，如果你有以下文本：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">chocolate pancake<br>strawberry <span class="hljs-keyword">sweetcake</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">blueberry </span>hotcake<br></code></pre></td></tr></table></figure><p>要想将”hotcake”中的”cake”替换为”dog”，得到”hotdog”:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%s/hot</span>\zscake/dog/g<br></code></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">chocolate pancake<br>strawberry <span class="hljs-keyword">sweetcake</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">blueberry </span>hotdog<br></code></pre></td></tr></table></figure><h2 id="贪婪与非贪婪"><a href="#贪婪与非贪婪" class="headerlink" title="贪婪与非贪婪"></a>贪婪与非贪婪</h2><p>您可以使用下面技巧，在某行中替换第n个匹配：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">One Mississippi, <span class="hljs-literal">two</span> Mississippi, <span class="hljs-literal">three</span> Mississippi, <span class="hljs-literal">four</span> Mississippi, <span class="hljs-literal">five</span> Mississippi.<br></code></pre></td></tr></table></figure><p>要想将第3个”Mississippi”替换为 “Arkansas”，运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">:s/\<span class="hljs-title function_">v</span>(<span class="hljs-params">.&#123;-&#125;\zsMississippi</span>)&#123;<span class="hljs-number">3</span>&#125;/<span class="hljs-title class_">Arkansas</span>/g<br></code></pre></td></tr></table></figure><p>命令分解：</p><ul><li><code>:s/</code> 替换命令。</li><li><code>\v</code> 魔术关键字，使您不必转义特殊字符。</li><li><code>.</code> 匹配任意单个字符。</li><li><code>&#123;-&#125;</code> 表示使用非贪婪模式匹配前面的0个或多个字符。</li><li><code>\zsMississippi</code> 使得从”Mississippi”开始捕获匹配。</li><li><code>(...)&#123;3&#125;</code> 查找第3个匹配</li></ul><p>在本章前面的内容中，你已经看到过<code>&#123;3&#125;</code>这样的语法。在本例中，<code>&#123;3&#125;</code>将精确匹配第3个匹配。这里的新技巧是<code>&#123;-&#125;</code>。它表示进行非贪婪匹配。它会找到符合给定模式的最短的匹配。在本例中，<code>(.&#123;-&#125;Mississippi)</code>匹配以任意字符开始、数量最少的”Mississippi”。对比<code>(.*Mississippi)</code>，后者会找到符合给定模式的最长匹配。</p><p>如果您使用<code>(.&#123;-&#125;Mississippi)</code>，你会得到5个匹配：”One Mississippi”, “Two Mississippi”,等。如果您使用<code>(.*Mississippi)</code>，您只会得到1个匹配：最后一个 “Mississippi”。<code>*</code>表示贪婪匹配，而<code>&#123;-&#125;</code>表示非贪婪匹配。要想了解更多，可以查看 <code>:h /\&#123;-</code> 和 <code>:h non-greedy</code>。</p><p>让我们看一个简单的例子。如果您有以下字符串：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">abc1de1<br></code></pre></td></tr></table></figure><p>用贪婪模式匹配 “abc1de1” ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/a.*1<br></code></pre></td></tr></table></figure><p>用非贪婪模式匹配 “abc1”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/a.\&#123;-&#125;1<br></code></pre></td></tr></table></figure><p>因此，如果您需要将最长的匹配转为大写（贪婪模式），运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:s/a</span>.*<span class="hljs-number">1</span>/\U&amp;/g<br></code></pre></td></tr></table></figure><p>会得到：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">ABC1DE1<br></code></pre></td></tr></table></figure><p>如果您需要将最短的匹配转为大写（非贪婪模式），运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:s/a</span>.\&#123;-&#125;<span class="hljs-number">1</span>/\U&amp;/g<br></code></pre></td></tr></table></figure><p>会得到：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">ABC1de1<br></code></pre></td></tr></table></figure><p>如果您是第一次接触贪婪模式与非贪婪模式这两个概念，可能会把你绕晕。围绕不同的组合去实验，知道您明白这两个概念。</p><h2 id="跨多个文件替换"><a href="#跨多个文件替换" class="headerlink" title="跨多个文件替换"></a>跨多个文件替换</h2><p>最后，让我们学习如何在多个文件中替换短语。对于本节，假设您有两个文件: <code>food.txt</code> 和 <code>animal.txt</code>.</p><p><code>food.txt</code>内:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">corn dog</span><br><span class="hljs-attribute">hot dog</span><br><span class="hljs-attribute">chili dog</span><br></code></pre></td></tr></table></figure><p><code>animal.txt</code>内:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">large</span> dog<br><span class="hljs-keyword">medium</span> dog<br><span class="hljs-keyword">small</span> dog<br></code></pre></td></tr></table></figure><p>假设您的目录结构如下所示:</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">├ food.txt<br>├ <span class="hljs-keyword">animal</span>.txt<br></code></pre></td></tr></table></figure><p>首先，用<code>:args</code>同时捕获”food.txt”和”animal.txt”到参数列表中。回顾前面的章节，<code>:args</code>可用于创建文件名列表。在 Vim 中有几种方法可以做到这一点，其中一种方法是在Vim内部运行:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:args</span> *.txt                  捕获当前位置的所有txt文件<br></code></pre></td></tr></table></figure><p>测试一下，当您运行<code>:args</code>时，您应该会看到：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><span class="hljs-comment">[food.txt]</span> <span class="hljs-keyword">animal</span>.txt<br></code></pre></td></tr></table></figure><p>现在，所有的相关文件都已经存储在参数列表中，您可以用 <code>:argdo</code> 命令跨多文件替换，运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:argdo %s<span class="hljs-regexp">/dog/</span>chicken/<br></code></pre></td></tr></table></figure><p>这条命令对所有<code>:args</code>列表中的文件执行替换操作。最终，存储修改的文件：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">argdo</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><p><code>:args</code> 和 <code>:argdo</code> 是两个有用的工具，用于跨多文件执行命令行命令。可以用其他命令结合尝试一下！</p><h2 id="用宏跨多个文件替换"><a href="#用宏跨多个文件替换" class="headerlink" title="用宏跨多个文件替换"></a>用宏跨多个文件替换</h2><p>另外，您也可以用宏跨多个文件运行替代命令。执行:</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:args</span> *.txt<br>qq<br><span class="hljs-symbol">:%s/dog/chicken/g</span><br><span class="hljs-symbol">:wnext</span><br>q<br><span class="hljs-number">99</span><span class="hljs-variable">@q</span><br></code></pre></td></tr></table></figure><p>以下是步骤的细分:</p><ul><li><code>:args *.txt</code> 会将相关文件列出到<code>:args</code>列表中。</li><li><code>qq</code> 启动”q”寄存器中的宏。</li><li><code>:%s/dog/chicken/g</code>在当前文件的所有行上用”chicken”替换”dog”。</li><li><code>:wnext</code> 写入（保存）文件，然后转到<code>args</code>列表中的下一个文件。就像同时运行<code>:w</code>和<code>:next</code>一样。</li><li><code>q</code> 停止宏录制。</li><li><code>99@q</code> 执行宏九十九次。 Vim 遇到第一个错误后，它将停止执行宏，因此 Vim 实际上不会执行该宏九十九次。</li></ul><h2 id="以聪明的方式学习搜索和替换"><a href="#以聪明的方式学习搜索和替换" class="headerlink" title="以聪明的方式学习搜索和替换"></a>以聪明的方式学习搜索和替换</h2><p>良好的搜索能力是编辑的必要技能。掌握搜索功能使您可以利用正则表达式的灵活性来搜索文件中的任何模式。花些时间学习这些。要想掌握正则表达式，您必须在实践中去不断地使用它。我曾经读过一本关于正则表达式的书，却没有真正去做，后来我几乎忘了读的所有东西。主动编码是掌握任何技能的最佳方法。</p><p>一种提高模式匹配技能的好方法是，每当您需要搜索一个模式串时（例如”hello 123”），不要直接查询文字的字面值(<code>/hello 123</code>)，去尝试使用模式串来搜索它(比如<code>/\v(\l+) (\d+)</code>)。这些正则表达式概念中的许多不仅在使用 Vim 时，也适用于常规编程。</p><p>既然您已经了解了 Vim 中的高级搜索和替换，现在让我们学习功能最丰富的命令之一，即全局命令。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-全局命令</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch13_the_global_command/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch13_the_global_command/</url>
    
    <content type="html"><![CDATA[<h1 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h1><p>到目前为止，您已经了解了如何使用点命令(<code>.</code>)重复上一次更改，如何使用宏(<code>q</code>)重复动作以及将文本存储在寄存器中(<code>&quot;</code>)。</p><p>在本章中，您将学习如何在全局命令中重复命令行命令。</p><h2 id="全局命令概述"><a href="#全局命令概述" class="headerlink" title="全局命令概述"></a>全局命令概述</h2><p>Vim的全局命令用于同时在多行上运行命令行命令。</p><p>顺便说一句，您之前可能已经听说过 “Ex命令” 一词。在本书中，我将它们称为命令行命令，但Ex命令和命令行命令是相同的。它们是以冒号（<code>:</code>）开头的命令。在上一章中，您了解了替代命令。这是一个Ex命令的示例。它们之所以称为Ex，是因为它们最初来自Ex文本编辑器。在本书中，我将继续将它们称为命令行命令。有关Ex命令的完整列表，请查看<code>:h ex-cmd-index</code>。</p><p>全局命令具有以下语法：</p><figure class="highlight elixir"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/pattern/command</span><br></code></pre></td></tr></table></figure><p><code>pattern</code>匹配包含该模式串的所有行，类似于替代命令中的模式串。<code>command</code>可以是任何命令行命令。全局命令通过对与<code>pattern</code>匹配的每一行执行<code>command</code>来工作。</p><p>如果您具有以下表达式：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>要删除所有包含”console”的行，可以运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/console/d</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const one <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br><br>const two <span class="hljs-operator">=</span> <span class="hljs-number">2</span><span class="hljs-comment">;</span><br><br>const three <span class="hljs-operator">=</span> <span class="hljs-number">3</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>全局命令在与”console”模式串匹配的所有行上执行删除命令(<code>d</code>)。</p><p>运行<code>g</code>命令时，Vim对文件进行两次扫描。在第一次运行时，它将扫描每行并标记与<code>/console/</code>模式传教匹配的行。一旦所有匹配的行都被标记，它将进行第二次运行，并在标记的行上执行d命令。</p><p>如果要删除所有包含”const”的行，请运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/const/d</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, one);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, two);<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><h2 id="逆向匹配"><a href="#逆向匹配" class="headerlink" title="逆向匹配"></a>逆向匹配</h2><p>要在不匹配的行上运行全局命令，可以运行：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">:g!<span class="hljs-regexp">/&#123;pattern&#125;/</span>&#123;command&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:v<span class="hljs-regexp">/&#123;pattern&#125;/</span>&#123;command&#125;<br></code></pre></td></tr></table></figure><p>如果运行<code>:v/console/d</code>，它将删除 <strong>不</strong> 包含”console”的所有行。</p><h2 id="模式串"><a href="#模式串" class="headerlink" title="模式串"></a>模式串</h2><p>全局命令使用与替代命令相同的模式串系统，因此本节将作为更新。随意跳到下一部分或继续阅读！</p><p>如果您具有以下表达式：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>要删除包含”one”或”two”的行，请运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/one</span>\|two/d<br></code></pre></td></tr></table></figure><p>要删除包含任何一位数字的行，请运行以下任一命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:g<span class="hljs-regexp">/[0-9]/</span>d<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:g<span class="hljs-regexp">/\d/</span>d<br></code></pre></td></tr></table></figure><p>如果您有表达式：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const oneMillion <span class="hljs-operator">=</span> <span class="hljs-number">1000000</span><span class="hljs-comment">;</span><br>const oneThousand <span class="hljs-operator">=</span> <span class="hljs-number">1000</span><span class="hljs-comment">;</span><br>const one <span class="hljs-operator">=</span> <span class="hljs-number">1</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>要匹配包含三到六个零的行，请运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:g<span class="hljs-regexp">/0\&#123;3,6\&#125;/</span>d<br></code></pre></td></tr></table></figure><h2 id="传递范围参数"><a href="#传递范围参数" class="headerlink" title="传递范围参数"></a>传递范围参数</h2><p>您可以在<code>g</code>命令之前传递一个范围。您可以通过以下几种方法来做到这一点：</p><ul><li><code>:1,5/g/console/d</code>  删除第1行和第5行之间匹配字符串”console”的行。</li><li><code>:,5/g/console/d</code> 如果逗号前没有地址，则从当前行开始。它在当前行和第5行之间寻找字符串”console”并将该行删除。</li><li><code>:3,/g/console/d</code> 如果逗号后没有地址，则在当前行结束。它在第3行和当前行之间寻找字符串”console”并将该行删除。</li><li><code>:3g/console/d</code> 如果只传递一个地址而不带逗号，则仅在第3行执行命令。在第3行查找，如果包含字符串”console”，则将其删除。</li></ul><p>除了数字，您还可以将这些符号用作范围：</p><ul><li><code>.</code> 表示当前行。范围<code>.,3</code>表示当前行和第3行之间。</li><li><code>$</code> 表示文件的最后一行。 <code>3,$</code>范围表示在第3行和最后一行之间。</li><li><code>+n</code> 表示当前行之后的n行。您可以将其与<code>.</code>结合使用，也可以不结合使用。  <code>3,+1</code>或<code>3,.+1</code>表示在第3行和当前行之后的行之间。</li></ul><p>如果您不给它任何范围，默认情况下它将影响整个文件。这实际上不是常态。如果您不传递任何范围，Vim的大多数命令行命令仅在当前行上运行(两个值得注意的例外是：这里介绍的全局命令(<code>:g</code>)和save(<code>:w</code>)命令)。</p><h2 id="普通模式命令"><a href="#普通模式命令" class="headerlink" title="普通模式命令"></a>普通模式命令</h2><p>您可以将全局命令和<code>:normal</code>命令行命令一起运行。</p><p>如果您有以下文字：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>)<br><br><span class="hljs-keyword">const</span> three = 3<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three)<br><br></code></pre></td></tr></table></figure><p>要添加”;”运行到每一行的末尾：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:g<span class="hljs-regexp">/./</span>normal A;<br></code></pre></td></tr></table></figure><p>让我们分解一下：</p><ul><li><code>:g</code> 是全局命令。</li><li><code>/./</code> 是“非空行”的模式。它匹配至少包含1个字符的行。因此将与包含“const”和“console”的行匹配。它不匹配空行。</li><li><code>normal A;</code> 运行<code>:normal</code>命令行命令。 <code>A;</code> 是普通模式命令，用于在该行的末尾插入”;”。</li></ul><h2 id="执行宏"><a href="#执行宏" class="headerlink" title="执行宏"></a>执行宏</h2><p>您也可以使用全局命令执行宏。宏只是普通模式下的操作，因此可以使用<code>:normal</code>来执行宏。如果您有以下表达式：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>请注意，带有”const”的行没有分号。让我们创建一个宏，以在寄存器”a”的这些行的末尾添加逗号：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">qa0A<span class="hljs-comment">;&lt;esc&gt;q</span><br></code></pre></td></tr></table></figure><p>如果您需要复习，请查看有关宏的章节。现在运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/const/normal</span> <span class="hljs-variable">@a</span><br></code></pre></td></tr></table></figure><p>现在，所有带有”const”的行的末尾将带有”;”。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>如果您一步一步按照示例做，您将会在第一行末尾看到两个分号。为避免这种情况，使用全局命令时，给一个范围参数，从第2行到最后一行, <code>:2,$g/const/normal @a</code>。</p><h2 id="递归全局命令"><a href="#递归全局命令" class="headerlink" title="递归全局命令"></a>递归全局命令</h2><p>全局命令本身是命令行命令的一种，因此您可以从技术上在全局命令中运行全局命令。</p><p>给定表达式：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>如果您运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/console/g/two/d</span><br></code></pre></td></tr></table></figure><p>首先，<code>g</code>将查找包含模式”console”的行，并找到3个匹配项。然后，第二个”g”将从那三个匹配项中查找包含模式”two”的行。最后，它将删除该匹配项。</p><p>您也可以将<code>g</code>与<code>v</code>结合使用以找到正负模式。例如：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/console/v/two/d</span><br></code></pre></td></tr></table></figure><p>与前面的命令不同，它将查找 <strong>不</strong> 包含”two”的行。</p><h2 id="更改定界符"><a href="#更改定界符" class="headerlink" title="更改定界符"></a>更改定界符</h2><p>您可以像替代命令一样更改全局命令的定界符。规则是相同的：您可以使用任何单字节字符，但字母，数字，<code>&quot;</code>, <code>|</code>, 和 <code>\</code>除外。</p><p>要删除包含”console”的行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g</span><span class="hljs-variable">@console</span><span class="hljs-variable">@d</span><br></code></pre></td></tr></table></figure><p>如果在全局命令中使用替代命令，则可以有两个不同的定界符：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs julia">g<span class="hljs-meta">@one</span><span class="hljs-meta">@s</span>+<span class="hljs-keyword">const</span>+<span class="hljs-keyword">let</span>+g<br></code></pre></td></tr></table></figure><p>此处，全局命令将查找包含”one”的所有行。 替换命令将从这些匹配项中将字符串”const”替换为”let”。</p><h2 id="默认命令"><a href="#默认命令" class="headerlink" title="默认命令"></a>默认命令</h2><p>如果在全局命令中未指定任何命令行命令，会发生什么？</p><p>全局命令将使用打印(<code>:p</code>)命令来打印当前行的文本。如果您运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/console</span><br></code></pre></td></tr></table></figure><p>它将在屏幕底部打印所有包含”console”的行。</p><p>顺便说一下，这是一个有趣的事实。因为全局命令使用的默认命令是<code>p</code>，所以这使<code>g</code>语法为：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/re/p</span><br></code></pre></td></tr></table></figure><ul><li><code>g</code> &#x3D; 全局命令</li><li><code>re</code> &#x3D; 正则表达式模式</li><li><code>p</code> &#x3D; 打印命令</li></ul><p>这三个元素连起来拼写为 **”grep”**，与命令行中的<code>grep</code> 相同。但这 <strong>不</strong> 是巧合。 <code>g/re/p</code>命令最初来自Ed编辑器（一个行文本编辑器）。 <code>grep</code>命令的名称来自Ed。</p><p>您的计算机可能仍具有Ed编辑器。从终端运行<code>ed</code>（提示：要退出，请键入<code>q</code>）。</p><h2 id="反转整个缓冲区"><a href="#反转整个缓冲区" class="headerlink" title="反转整个缓冲区"></a>反转整个缓冲区</h2><p>要翻转整个文件，请运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/^/m</span> <span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><p><code>^</code>表示行的开始。使用<code>^</code>匹配所有行，包括空行。</p><p>如果只需要反转几行，请将其传递一个范围。要将第5行到第10行之间的行反转，请运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:<span class="hljs-number">5</span>,<span class="hljs-number">10</span>g<span class="hljs-regexp">/^/m</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>要了解有关move命令的更多信息，请查看<code>:h :move</code>。</p><h2 id="汇总所有待办事项"><a href="#汇总所有待办事项" class="headerlink" title="汇总所有待办事项"></a>汇总所有待办事项</h2><p>当我编码时，有时我会想到一个随机的绝妙主意。不想失去专注，我通常将它们写在我正在编辑的文件中，例如：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 喂小狗</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br><span class="hljs-comment">// TODO：自动喂小狗</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br><span class="hljs-comment">// TODO：创建一家销售自动小狗喂食器的初创公司</span><br></code></pre></td></tr></table></figure><p>跟踪所有已创建的TODO可能很困难。 Vim有一个<code>:t</code>（copy）方法来将所有匹配项复制到一个地址。要了解有关复制方法的更多信息，请查看<code>:h :copy</code>。</p><p>要将所有TODO复制到文件末尾以便于自省，请运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/TODO/t</span> $<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><span class="hljs-comment">// TODO：喂小狗</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br><span class="hljs-comment">// TODO：自动喂小狗</span><br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br><span class="hljs-comment">// TODO：创建一家销售自动小狗喂食器的初创公司</span><br><br><span class="hljs-comment">// TODO：喂小狗</span><br><span class="hljs-comment">// TODO：自动喂小狗</span><br><span class="hljs-comment">// TODO：创建一家销售自动小狗喂食器的初创公司</span><br></code></pre></td></tr></table></figure><p>现在，我可以查看我创建的所有TODO，另外找个时间来完成它们，或将它们委托给其他人，然后继续执行下一个任务。</p><p>如果不想复制，而是将所有的 TODO 移动到末尾，可以使用移动命令 <code>m</code>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/TODO/m</span> $<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br><br><span class="hljs-comment">// TODO：喂小狗</span><br><span class="hljs-comment">// TODO：自动喂小狗</span><br><span class="hljs-comment">// TODO：创建一家销售自动小狗喂食器的初创公司</span><br></code></pre></td></tr></table></figure><h2 id="黑洞删除"><a href="#黑洞删除" class="headerlink" title="黑洞删除"></a>黑洞删除</h2><p>回想一下寄存器那一章，已删除的文本存储在编号寄存器中（允许它们足够大）。每当运行<code>:g/console/d</code>时，Vim都会将删除的行存储在编号寄存器中。如果删除多行，所有编号的寄存器将很快被填满。为了避免这种情况，您可以使用黑洞寄存器（<code>&quot;_</code>） <strong>不</strong> 将删除的行存储到寄存器中。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/console/d</span> _<br></code></pre></td></tr></table></figure><p>通过在<code>d</code>之后传递<code>_</code>，Vim不会将删除的行保存到任何寄存器中。</p><h2 id="将多条空行减少为一条空行"><a href="#将多条空行减少为一条空行" class="headerlink" title="将多条空行减少为一条空行"></a>将多条空行减少为一条空行</h2><p>如果您的文件带有多个空行，如下所示：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><br><br><br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>您可以快速将多个空行减少为一条空行。运行：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">:g/^</span><span class="hljs-variable">$/</span>,<span class="hljs-regexp">/./</span>-1j<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>一般情况下全局命令遵循下列格式：<code>:g/pattern/command</code>。但是，您也可以使用下面的格式：<code>:g/pattern1/,/pattern2/command</code>。用这种格式，Vim将会使<code>command</code>作用在<code>pattern1</code>和<code>pattern2</code>上。</p><p>记住上面说的格式，让我们根据<code>:g/pattern1/,/pattern2/command</code>这个格式分解一下命令<code>:g/^$/,/./-1j</code>：</p><ul><li><code>/pattern1/</code> 就是 <code>/^$/</code> 。它表示一个空行（一个没有任何字符的行）。</li><li><code>/pattern2/</code> 就是 <code>/./</code>（用-1作为行修正）。<code>/./</code>表示一个非空行（一个含有至少1个字符的行）。这里的 <code>-1</code> 意思是向上偏移1行。</li><li><code>command</code> 就是 <code>j</code>，一个联接命令(<code>:j</code>)。在这个示例中，该全局命令联接所有给定的行。</li></ul><p>顺便说一句，如果您想要将多个空行全部删去，运行下面的命令：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">:g/^</span><span class="hljs-variable">$/</span>,<span class="hljs-regexp">/./j</span><br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:g/^</span><span class="hljs-variable">$/</span>-j<br></code></pre></td></tr></table></figure><p>您的文本将会减少为：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> <span class="hljs-keyword">one</span> = 1;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;one: &quot;</span>, <span class="hljs-keyword">one</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">two</span> = 2;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;two: &quot;</span>, <span class="hljs-keyword">two</span>);<br><span class="hljs-keyword">const</span> three = 3;<br>console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;three: &quot;</span>, three);<br></code></pre></td></tr></table></figure><p>（译者补充：<code>j</code>连接命令的格式是：<code>:[range]j</code>。比如：<code>:1,5j</code>将连接第1至5行。在前面的命令中<code>:g/pattern1/,/pattern2/-1j</code>，<code>/pattern1/</code>和<code>/pattern2</code>都是<code>j</code>命令的范围参数，表示连接空行至非空行上方一行，这样就会保留1个空行。在早前的英文版本中有关于<code>j</code>命令的介绍，不知为何在后面的更新中，原作者删除了关于<code>j</code>命令的介绍）</p><h2 id="高级排序"><a href="#高级排序" class="headerlink" title="高级排序"></a>高级排序</h2><p>Vim有一个<code>:sort</code>命令来对一个范围内的行进行排序。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">d<br><span class="hljs-selector-tag">b</span><br><span class="hljs-selector-tag">a</span><br>e<br>c<br></code></pre></td></tr></table></figure><p>您可以通过运行<code>:sort</code>对它们进行排序。如果给它一个范围，它将只对该范围内的行进行排序。例如，<code>:3,5sort</code>仅在第三和第五行之间排序。</p><p>如果您具有以下表达式：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> arrayB = [<br>  <span class="hljs-string">&quot;i&quot;</span>,<br>  <span class="hljs-string">&quot;g&quot;</span>,<br>  <span class="hljs-string">&quot;h&quot;</span>,<br>  <span class="hljs-string">&quot;b&quot;</span>,<br>  <span class="hljs-string">&quot;f&quot;</span>,<br>  <span class="hljs-string">&quot;d&quot;</span>,<br>  <span class="hljs-string">&quot;e&quot;</span>,<br>  <span class="hljs-string">&quot;c&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>]<br><br><span class="hljs-keyword">const</span> arrayA = [<br>  <span class="hljs-string">&quot;h&quot;</span>,<br>  <span class="hljs-string">&quot;b&quot;</span>,<br>  <span class="hljs-string">&quot;f&quot;</span>,<br>  <span class="hljs-string">&quot;d&quot;</span>,<br>  <span class="hljs-string">&quot;e&quot;</span>,<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;c&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><p>如果需要排序数组中的元素，而不是数组本身，可以运行以下命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">:g<span class="hljs-regexp">/\[/</span>+<span class="hljs-number">1</span>,<span class="hljs-regexp">/\]/</span>-<span class="hljs-number">1</span><span class="hljs-keyword">sort</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> arrayB = [<br>  <span class="hljs-string">&quot;a&quot;</span>,<br>  <span class="hljs-string">&quot;b&quot;</span>,<br>  <span class="hljs-string">&quot;c&quot;</span>,<br>  <span class="hljs-string">&quot;d&quot;</span>,<br>  <span class="hljs-string">&quot;e&quot;</span>,<br>  <span class="hljs-string">&quot;f&quot;</span>,<br>  <span class="hljs-string">&quot;g&quot;</span>,<br>  <span class="hljs-string">&quot;h&quot;</span>,<br>  <span class="hljs-string">&quot;i&quot;</span>,<br>]<br><br><span class="hljs-keyword">const</span> arrayA = [<br>  <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-string">&quot;b&quot;</span>,<br>  <span class="hljs-string">&quot;c&quot;</span>,<br>  <span class="hljs-string">&quot;d&quot;</span>,<br>  <span class="hljs-string">&quot;e&quot;</span>,<br>  <span class="hljs-string">&quot;f&quot;</span>,<br>  <span class="hljs-string">&quot;h&quot;</span>,<br>]<br></code></pre></td></tr></table></figure><p>这很棒！但是命令看起来很复杂。让我们分解一下。该命令依然遵循 <code>:g/pattern1/,/pattern2/command</code>这个格式。</p><ul><li><code>:g</code> 是全局命令</li><li><code>/\[/+1</code> 是第一个模式串，它匹配左方括号”[“。<code>+1</code>表示匹配行的下面1行。</li><li><code>/\[/-1</code> 是第二个模式串，它匹配右方括号”]”。<code>-1</code>表示匹配行的上面1行。</li><li><code>/\[/+1,/\]/-1</code> 表示在”[“和”]”之间的行。</li><li><code>sort</code> 是命令行命令：排序。</li></ul><h2 id="聪明地学习全局命令"><a href="#聪明地学习全局命令" class="headerlink" title="聪明地学习全局命令"></a>聪明地学习全局命令</h2><p>全局命令针对所有匹配的行执行命令行命令。有了它，您只需要运行一次命令，Vim就会为您完成其余的工作。要精通全局命令，需要做两件事：良好的命令行命令词汇表和正则表达式知识。随着您花费更多的时间使用Vim，您自然会学到更多的命令行命令。正则表达式知识需要更多的实际操作。但是一旦您适应了使用正则表达式，您将领先于很多其他人。</p><p>这里的一些例子很复杂。不要被吓到。真正花时间了解它们。认真阅读每个模式串，不要放弃。</p><p>每当需要在多个位置应用命令时，请暂停并查看是否可以使用<code>g</code>命令。寻找最适合工作的命令，并编写一个模式串以同时定位多个目标。</p><p>既然您已经知道全局命令的功能强大，那么让我们学习如何使用外部命令来增加工具库。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-外部命令</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch14_external_commands/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch14_external_commands/</url>
    
    <content type="html"><![CDATA[<h1 id="外部命令"><a href="#外部命令" class="headerlink" title="外部命令"></a>外部命令</h1><p>在Unix系统内部，您会发现许多小型的，超专业化命令，每个命令只做一件事（而且能很好地完成）。您可以将这些命令链接在一起以共同解决一个复杂的问题。如果可以从Vim内部使用这些命令，那不是很好吗？</p><p>答案是肯定的!在本章中，您将学习如何扩展Vim以使其与外部命令无缝协作。</p><h2 id="Bang-命令"><a href="#Bang-命令" class="headerlink" title="Bang 命令"></a>Bang 命令</h2><p>Vim有一个Bang(<code>!</code>)命令，可以执行三件事：</p><p>1.将外部命令的STDOUT读入当前缓冲区。<br>2.将缓冲区的内容作为STDIN写入外部命令。<br>3.从Vim内部执行外部命令。</p><p>让我们一个个认真看一下。</p><h2 id="将外部命令的标准输出STDOUT读入Vim"><a href="#将外部命令的标准输出STDOUT读入Vim" class="headerlink" title="将外部命令的标准输出STDOUT读入Vim"></a>将外部命令的标准输出STDOUT读入Vim</h2><p>将外部命令的STDOUT读入当前缓冲区的语法为：</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs css">:r !&#123;cmd&#125;<br></code></pre></td></tr></table></figure><p><code>:r</code>是Vim的读命令。如果不带<code>!</code>使用它，则可以使用它来获取文件的内容。如果当前目录中有文件<code>file1.txt</code>，运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:r</span> file1.txt<br></code></pre></td></tr></table></figure><p>Vim会将<code>file1.txt</code>的内容放入当前缓冲区。</p><p>如果您运行的<code>:r</code>命令后面跟一个<code>!</code>和外部命令，则该命令的输出将插入到当前缓冲区中。要获取<code>ls</code>命令的结果，请运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">:<span class="hljs-built_in">r</span> !<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>它返回类似下列的文本：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">file1<span class="hljs-selector-class">.txt</span><br>file2<span class="hljs-selector-class">.txt</span><br>file3.txt<br></code></pre></td></tr></table></figure><p>您可以从<code>curl</code>命令读取数据：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">:<span class="hljs-built_in">r</span> !<span class="hljs-built_in">curl</span> <span class="hljs-literal">-s</span> <span class="hljs-string">&#x27;https://jsonplaceholder.typicode.com/todos/1&#x27;</span><br></code></pre></td></tr></table></figure><p>r命令也接受一个地址：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">:<span class="hljs-number">10</span><span class="hljs-built_in">r</span> !<span class="hljs-built_in">cat</span> file1.txt<br></code></pre></td></tr></table></figure><p>现在，将在第10行之后插入来自运行<code>cat file.txt</code>的STDOUT。</p><h2 id="将缓冲区内容写入外部命令"><a href="#将缓冲区内容写入外部命令" class="headerlink" title="将缓冲区内容写入外部命令"></a>将缓冲区内容写入外部命令</h2><p><code>:w</code>命令除了保存文件，还可以用来将当前缓冲区中的文本作为作为STDIN传递给外部命令。语法为：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">:w !<span class="hljs-keyword">cmd</span><br></code></pre></td></tr></table></figure><p>如果您具有以下表达式：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Hello Vim&quot;</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Vim is awesome&quot;</span>);<br></code></pre></td></tr></table></figure><p>确保在计算机中安装了<a href="https://nodejs.org/en/">node</a>，然后运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">:w !<span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>Vim将使用<code>node</code>执行Javascript表达式来打印”Hello Vim”和”Vim is awesome”。</p><p>当使用<code>：w</code>命令时，Vim使用当前缓冲区中的所有文本，与global命令类似（大多数命令行命令，如果不给它传递范围，则仅对当前行执行该命令）。如果您通过<code>：w</code>来指定地址：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">:<span class="hljs-number">2</span>w !<span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>“Vim”只使用第二行中的文本到<code>node</code>解释器中。</p><p><code>:w !node</code>和<code>:w! node</code>形式上区别很小，但功能上相隔千里。使用<code>:w !node</code>，您是将当前缓冲区中的文本”写入”到外部命令<code>node</code>中。用<code>:w! node</code>，则您将强制保存文件并将其命名为”node”。</p><h2 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h2><p>您可以使用bang命令从Vim内部执行外部命令。语法为：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:!cmd</span><br></code></pre></td></tr></table></figure><p>要以长格式查看当前目录的内容，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:!<span class="hljs-built_in">ls</span> -<span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>要终止在PID 3456上运行的进程，可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:!<span class="hljs-built_in">kill</span> -9 3456<br></code></pre></td></tr></table></figure><p>您可以在不离开Vim的情况下运行任何外部命令，因此您可以专注于自己的任务。</p><h2 id="过滤文本"><a href="#过滤文本" class="headerlink" title="过滤文本"></a>过滤文本</h2><p>如果给<code>!</code>范围，则可用于过滤文本。假设您有：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">hello <span class="hljs-keyword">vim</span><br>hello <span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure><p>让我们使用<code>tr</code> (translate)命令将当前行大写。运行：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-meta">:.!tr &#x27;[:lower:]&#x27;</span> <span class="hljs-emphasis">&#x27;[:upper:]&#x27;</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">HELLO VIM</span><br><span class="hljs-attribute">hello vim</span><br></code></pre></td></tr></table></figure><p>命令分解：</p><ul><li><code>.!</code> 在当前行执行filter命令。</li><li><code>!tr &#39;[:lower:]&#39; &#39;[:upper:]&#39;</code> 调用<code>tr</code>外部命令将所有小写字符替换为大写字符。</li></ul><p>必须传递范围以运行外部命令作为过滤器。如果您尝试在没有<code>.</code>的情况下运行上述命令(<code>:!tr &#39;[:lower:]&#39; &#39;[:upper:]&#39;</code>)，则会看到错误。</p><p>假设您需要使用awk命令删除两行的第二列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:%!awk <span class="hljs-string">&quot;&#123;print <span class="hljs-variable">$1</span>&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hello</span><br><span class="hljs-attribute">hello</span><br></code></pre></td></tr></table></figure><p>命令分解：</p><ul><li><code>:%!</code>  在所有行(<code>%</code>)上执行filter命令。</li><li><code>awk &quot;&#123;print $1&#125;&quot;</code> 仅打印匹配项的第一列。</li></ul><p>您可以使用管道运算符（<code>|</code>）链接多个命令，就像在终端中一样。假设您有一个包含这些美味早餐的文件：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">name</span> price<br><span class="hljs-attribute">chocolate</span> pancake <span class="hljs-number">10</span><br><span class="hljs-attribute">buttermilk</span> pancake <span class="hljs-number">9</span><br><span class="hljs-attribute">blueberry</span> pancake <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>如果您需要根据价格对它们进行排序，并且仅以均匀的间距显示菜单，则可以运行：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">:%!awk <span class="hljs-string">&#x27;NR &gt; 1&#x27;</span> | <span class="hljs-keyword">sort</span> -nk <span class="hljs-number">3</span> | column -t<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">buttermilk</span> pancake <span class="hljs-number">9</span><br><span class="hljs-attribute">chocolate</span> pancake <span class="hljs-number">10</span><br><span class="hljs-attribute">blueberry</span> pancake <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>命令分解：</p><ul><li><code>:%!</code> 将过滤器应用于所有行(<code>%</code>)。</li><li><code>awk &#39;NR &gt; 1&#39;</code> 仅从第二行开始显示文本。</li><li><code>|</code>链接下一个命令。</li><li><code>sort -nk 3</code>使用列3（<code>k 3</code>）中的值对数字进行排序（<code>n</code>）。</li><li><code>column -t</code>以均匀的间距组织文本。</li></ul><h2 id="普通模式命令"><a href="#普通模式命令" class="headerlink" title="普通模式命令"></a>普通模式命令</h2><p>在普通模式下，Vim有一个过滤运算符（<code>!</code>）。如果您有以下问候：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">hello <span class="hljs-keyword">vim</span><br>hola <span class="hljs-keyword">vim</span><br>bonjour <span class="hljs-keyword">vim</span><br>salve <span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure><p>要大写当前行和下面的行，可以运行：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">!jtr <span class="hljs-string">&#x27;[a-z]&#x27;</span> <span class="hljs-string">&#x27;[A-Z]&#x27;</span><br></code></pre></td></tr></table></figure><p>命令分解：</p><ul><li><code>!j</code> 运行常规命令过滤器运算符（<code>!</code>），目标是当前行及其下方的行。回想一下，因为它是普通模式运算符，所以适用语法规则”动词+名词”。</li><li><code>tr &#39;[a-z]&#39; &#39;[A-Z]&#39;</code>将小写字母替换为大写字母。</li></ul><p>filter normal命令仅适用于至少一行以上的motion或至少一行以上的文本对象。如果您尝试运行<code>!iwtr&#39;[az]&#39;&#39;[AZ]&#39;</code>（在内部单词上执行<code>tr</code>），您会发现它在整个行上都应用了tr命令，而不是光标所在的单词。</p><h2 id="聪明地学习外部命令"><a href="#聪明地学习外部命令" class="headerlink" title="聪明地学习外部命令"></a>聪明地学习外部命令</h2><p>Vim不是IDE。它是一种轻量级的模式编辑器，通过设计可以高度扩展。由于这种可扩展性，您可以轻松访问系统中的任何外部命令。这样，Vim离成为IDE仅一步之遥。有人说Unix系统是有史以来的第一个IDE。</p><p>Bang 命令的有用程度与您知道多少个外部命令相关。如果您的外部命令知识有限，请不要担心。我还有很多东西要学。以此作为持续学习的动力。每当您需要过滤文本时，请查看是否存在可以解决问题的外部命令。不必担心掌握所有的命令。只需学习完成当前任务所需的内容即可。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-命令行模式</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch15_command-line_mode/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch15_command-line_mode/</url>
    
    <content type="html"><![CDATA[<h1 id="第15章-命令行模式"><a href="#第15章-命令行模式" class="headerlink" title="第15章 命令行模式"></a>第15章 命令行模式</h1><p>在前三章中，您已经学习了如何使用搜索命令(<code>/</code>, <code>?</code>)、替换命令(<code>:s</code>)、全局命令(<code>:g</code>)，以及外部命令(<code>!</code>)。这些都是命令行模式命令的一些例子。</p><p>在本章中，您将学习命令行模式的更多技巧。</p><h2 id="进入和退出命令行模式"><a href="#进入和退出命令行模式" class="headerlink" title="进入和退出命令行模式"></a>进入和退出命令行模式</h2><p>命令行模式本身也是一种模式，就像普通模式、输入模式、可视模式一样。在这种模式中，光标将转到屏幕底部，此时您可以输入不同的命令。</p><p>有 4 种进入命令行模式的方式：</p><ul><li>搜索命令 (<code>/</code>, <code>?</code>)</li><li>命令行指令 (<code>:</code>)</li><li>外部命令 (<code>!</code>)</li></ul><p>您可以从正常模式或可视模式进入命令行模式。</p><p>若要离开命令行模式，您可以使用 <code>&lt;esc&gt;</code>、<code>Ctrl-c</code>、<code>Ctrl-[</code>。</p><p><strong>有时其他资料可能会将”命令行指令”称为”Ex 命令”，将”外部命令”称为”过滤命令”或者”叹号运算符”。</strong></p><h2 id="重复上一个命令"><a href="#重复上一个命令" class="headerlink" title="重复上一个命令"></a>重复上一个命令</h2><p>您可以用 <code>@:</code> 来重复上一个命令行指令或外部命令。</p><p>如果您刚运行 <code>:s/foo/bar/g</code>，执行 <code>@:</code> 将重复该替换。如果您刚运行 <code>:.!tr &#39;[a-z]&#39; &#39;[A-Z]&#39;</code>，执行 <code>@:</code> 将重复上一次外部命令转换过滤。</p><h2 id="命令行模式快捷键"><a href="#命令行模式快捷键" class="headerlink" title="命令行模式快捷键"></a>命令行模式快捷键</h2><p>在命令行模式中，您可以使用 <code>Left</code> 或 <code>Right</code> 方向键，来左右移动一个字符。</p><p>如果需要移动一个单词，使用 <code>Shift-Left</code> 或 <code>Shift-Right</code> (在某些操作系统中，您需要使用 <code>Ctrl</code> 而不是 <code>Shift</code>)。</p><p>使用 <code>Ctrl-b</code>移动到该行的开始，使用 <code>Ctrl-e</code>移动到该行的结束。</p><p>和输入模式类似，在命令行模式中，有三种方法可以删除字符：</p><figure class="highlight"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs">Ctrl-h    删除一个字符<br>Ctrl-w    删除一个单词<br>Ctrl-u    删除一整行<br></code></pre></td></tr></table></figure><p>最后，如果您想像编辑文本文件一样来编辑命令，可以使用 <code>Ctrl-f</code>。</p><p>这样还可以查看过往的命令，并在这种”命令行编辑的普通模式”中编辑它们，同时还能按下 <code>Enter</code> 来运行它们。</p><h2 id="寄存器和自动补全"><a href="#寄存器和自动补全" class="headerlink" title="寄存器和自动补全"></a>寄存器和自动补全</h2><p>当处于命令行模式时，您可以像在插入模式中一样使用 <code>Ctrl-r</code> 从Vim寄存器中插入文本。如果您在寄存器 a 中存储了字符串 “foo” ，您可以执行 <code>Ctrl-r a</code> 从寄存器a中插入该文本。任何在插入模式中您可以从寄存器中获取的内容，在命令行模式中您也可以获取。</p><p>另外，您也可以按 <code>Ctrl-r Ctrl-w</code> 获取当前光标下的单词（按 <code>Ctrl-r Ctrl-A</code> 获取当前光标下的词组）。还可以按 <code>Ctrl-r Ctlr-l</code> 获取当前光标所在行。按 <code>Ctrl-r Ctrl-f</code> 获取光标下的文件名。</p><p>您也可以对已存在的命令使用自动补全。要自动补全 <code>echo</code> 命令，当处于命令行模式时，首先输入 “ec”，接着按下 <code>&lt;Tab&gt;</code>，此时您应该能在左下角看到一些 “ec” 开头的 Vim 命令（例如：<code>echo echoerr echohl echomsg econ</code>）。按下 <code>&lt;Tab&gt;</code> 或 <code>Ctrl-n</code> 可以跳到下一个选项。按下 <code>&lt;Shift-Tab&gt;</code> 或 <code>Ctrl-p</code> 可以回到上一个选项。</p><p>一些命令行指令接受文件名作为参数。<code>edit</code> 就是一个例子，这时候您也可以使用自动补全。当输入 <code>:e </code> 后（不要忘记空格了），按下 <code>&lt;Tab&gt;</code>，Vim 将列出所有相关的文件名，这样您就可以进行选择而不必完整的输入它们。</p><h2 id="历史记录窗口"><a href="#历史记录窗口" class="headerlink" title="历史记录窗口"></a>历史记录窗口</h2><p>您可以查看命令行指令和搜索项的历史记录（要确保在运行 <code>vim --version</code> 时，Vim 的编译选项中含有<code>+cmdline_hist</code>）。</p><p>运行 <code>:his :</code> 来查看命令行指令的历史记录：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">##  cmd History</span><br><span class="hljs-number">2</span>  e file1.txt<br><span class="hljs-number">3</span>  g<span class="hljs-regexp">/foo/</span>d<br><span class="hljs-number">4</span>  s<span class="hljs-regexp">/foo/</span>bar/g<br></code></pre></td></tr></table></figure><p>Vim 列出了您运行的所有 <code>:</code> 命令。默认情况下，Vim 存储最后 50 个命令。运行 <code>:set history=100</code> 可以将 Vim 记住的条目总数更改为 100。</p><p>一个更有用的做法是使用命令行历史记录窗口，按<code>q:</code>将会打开一个可搜索、可编辑的历史记录窗口。假设按下<code>q:</code>后您有如下的表达式：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">51 </span> s/verylongsubstitutionpattern/pancake/g<br><span class="hljs-symbol">52 </span> his :<br><span class="hljs-symbol">53 </span> wq<br></code></pre></td></tr></table></figure><p>如果您当前任务是执行 <code>s/verylongsubstitutionpattern/donut/g</code>（”pancake”换成了”donut”），为什么不复用 <code>s/verylongsubstitutionpattern/pancake/g</code> 呢？毕竟，两条命令唯一不同的是替换的单词，”donut” vs “pancake” ，所有其他的内容都是相同的。</p><p>当您运行 <code>q:</code>后，在历史记录中找到 <code>s/verylongsubstitutionpattern/pancake/g</code>（在这个环境中，您可以使用Vim导航），然后直接编辑它！ 在历史记录窗口中将 “pancake” 改为 “donut” ，然后按 <code>&lt;Enter</code>。Vim立刻执行 <code>s/verylongsubstitutionpattern/donut/g</code> 命令，超级方便！</p><p>类似地，运行 <code>:his /</code> 或 <code>:his ?</code> 可以查看搜索记录。要想打开您可以直接搜索和编辑的搜索历史记录窗口，您可以运行 <code>q/</code> 和 <code>q?</code>。</p><p>要退出这个窗口，按 <code>Ctrl-c</code>, <code>Ctrl-w c</code>, 或输入 <code>:quit</code>。</p><h2 id="更多命令行指令"><a href="#更多命令行指令" class="headerlink" title="更多命令行指令"></a>更多命令行指令</h2><p>Vim有几百个内置指令，要查看Vim的所有指令，执行 <code>:h ex-cmd-index</code> 或 <code>:h :index</code>。</p><h2 id="聪明地学习命令行模式"><a href="#聪明地学习命令行模式" class="headerlink" title="聪明地学习命令行模式"></a>聪明地学习命令行模式</h2><p>对比其他三种模式，命令行模式就像是文本编辑中的瑞士军刀。寥举几例，您可以编辑文本、修改文件和执行命令。本章是命令行模式的零碎知识的集合。同时，Vim 模式的介绍也走向尾声。现在，您已经知道如何使用普通、输入、可视以及命令行模式，您可以比以往更快地使用 Vim 来编辑文本了。</p><p>是时候离开 Vim 模式，来了解如何使用 Vim 标记进行更快的导航了。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-标签</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch16_tags/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch16_tags/</url>
    
    <content type="html"><![CDATA[<h1 id="第16章-标签"><a href="#第16章-标签" class="headerlink" title="第16章 标签"></a>第16章 标签</h1><p>快速转到任意定义处，是文本编辑中一个非常有用的特性。在本章中，您将学习如何使用 Vim 标签来做到这一点。</p><h2 id="标签概述"><a href="#标签概述" class="headerlink" title="标签概述"></a>标签概述</h2><p>假设有人给了您一个新的代码库：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span> = One.<span class="hljs-built_in">new</span><br><span class="hljs-literal">one</span>.donut<br></code></pre></td></tr></table></figure><p><code>One</code>？<code>donut</code>？呃，对于当时编写代码的开发者而言，这些代码的含义可能显而易见。问题是当时的开发者已经不在了，现在要由您来理解这些费解的代码。而跟随有<code>One</code> 和 <code>donut</code>定义的源代码，是帮助您理解的一个有效方法。</p><p>您可以使用<code>fzf</code> 或 <code>grep</code>来搜索它们，但这种情况下，但使用标签将更快。</p><p>把标签想象成地址簿：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Name</span>    Address<br><span class="hljs-attribute">Iggy1</span>   <span class="hljs-number">1234</span> Cool St, <span class="hljs-number">11111</span><br><span class="hljs-attribute">Iggy2</span>   <span class="hljs-number">9876</span> Awesome Ave, <span class="hljs-number">2222</span><br></code></pre></td></tr></table></figure><p>当然，标签可不是存储着“姓名-地址”对，而是“定义-地址”对。</p><p>假设您在一个目录中有两个 Ruby 文件：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">## one.rb<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">One</span><br>  <span class="hljs-symbol">def</span> <span class="hljs-symbol">initialize</span><br>    <span class="hljs-symbol">puts</span> &quot;<span class="hljs-symbol">Initialized</span>&quot;<br>  <span class="hljs-symbol">end</span><br><br>  <span class="hljs-symbol">def</span> <span class="hljs-symbol">donut</span><br>    <span class="hljs-symbol">puts</span> &quot;<span class="hljs-symbol">Bar</span>&quot;<br>  <span class="hljs-symbol">end</span><br><span class="hljs-symbol">end</span><br></code></pre></td></tr></table></figure><p>以及</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment">## two.rb</span><br><span class="hljs-built_in">require</span> <span class="hljs-string">&#x27;./one&#x27;</span><br><br><span class="hljs-literal">one</span> = One.<span class="hljs-built_in">new</span><br><span class="hljs-literal">one</span>.donut<br></code></pre></td></tr></table></figure><p>在普通模式下，您可以使用<code>Ctrl-]</code>跳转到定义。在<code>two.rb</code>中，转到<code>one.donut</code>所在行，将光标移到<code>donut</code>处，按下<code>Ctrl-]</code>。</p><p>哦豁，Vim 找不到标签文件，您需要先生成它。</p><h2 id="标签生成器"><a href="#标签生成器" class="headerlink" title="标签生成器"></a>标签生成器</h2><p>现代 Vim 不自带标签生成器，您需要额外下载它。有几个选项可供选择：</p><ul><li>ctags &#x3D; 仅用于 C，基本随处可见。</li><li>exuberant ctags &#x3D; 最流行的标签生成器之一，支持许多语言。</li><li>universal ctags &#x3D; 和 exuberant ctags 类似，但比它更新。</li><li>etags &#x3D; 用于 Emacs，嗯……</li><li>JTags &#x3D; Java</li><li>ptags.py &#x3D; Python</li><li>ptags &#x3D; Perl</li><li>gnatxref &#x3D; Ada</li></ul><p>如果您查看 Vim 在线教程，您会发现许多都会推荐 <a href="http://ctags.sourceforge.net/">exuberant ctags</a>，它支持 <a href="http://ctags.sourceforge.net/languages.html">41 种编程语言</a>，我用过它，挺不错的。但自2009年以来一直没有维护，因此 Universal ctags 更好些，它和 exuberant ctags 相似，并仍在维护。</p><p>我不打算详细介绍如何安装 Universal ctags，您可以在 <a href="https://github.com/universal-ctags/ctags">universal ctags</a> 仓库了解更多说明。</p><p>假设您已经安装好了ctags，接下来，生成一个基本的标签文件。运行：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang">ctags -R .<br></code></pre></td></tr></table></figure><p> <code>R</code> 选项告诉 <code>ctags</code> 从当前位置 (<code>.</code>) 递归扫描文件。稍后，您应该在当前文件夹看到一个<code>tags</code> 文件，里面您将看到类似这样的内容：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-title">!_TAG_FILE_FORMAT</span><span class="hljs-number">2</span>/extended format<span class="hljs-comment">; --format=1 will not append ;&quot; to lines/</span><br><span class="hljs-title">!_TAG_FILE_SORTED</span><span class="hljs-number">1</span>/<span class="hljs-number">0</span><span class="hljs-operator">=</span>unsorted<span class="hljs-punctuation">,</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>sorted<span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-operator">=</span>foldcase/<br><span class="hljs-title">!_TAG_OUTPUT_FILESEP</span>slash/slash <span class="hljs-keyword">or</span> backslash/<br><span class="hljs-title">!_TAG_OUTPUT_MODE</span>u-ctags/u-ctags <span class="hljs-keyword">or</span> e-ctags/<br><span class="hljs-title">!_TAG_PATTERN_LENGTH_LIMIT</span><span class="hljs-number">96</span>/<span class="hljs-number">0</span> for no limit/<br><span class="hljs-title">!_TAG_PROGRAM_AUTHOR</span>Universal Ctags Team//<br><span class="hljs-title">!_TAG_PROGRAM_NAME</span>Universal Ctags/Derived from Exuberant Ctags/<br><span class="hljs-title">!_TAG_PROGRAM_URL</span>&lt;https://ctags.io/&gt;/official site/<br><span class="hljs-title">!_TAG_PROGRAM_VERSION</span><span class="hljs-number">0.0</span>.<span class="hljs-number">0</span>/b<span class="hljs-number">43</span>eb<span class="hljs-number">39</span>/<br>One<span class="hljs-keyword">one</span>.rb/^class One$/<span class="hljs-comment">;&quot;c</span><br>donut<span class="hljs-keyword">one</span>.rb/^  def donut$/<span class="hljs-comment">;&quot;fclass:One</span><br>initialize<span class="hljs-keyword">one</span>.rb/^  def initialize$/<span class="hljs-comment">;&quot;fclass:One</span><br></code></pre></td></tr></table></figure><p>根据 Vim 设置和 ctag 生成器的不同，您的<code>tags</code> 文件可能会有些不同。一个标签文件由两部分组成：标签元数据和标签列表。那些标签元数据 (<code>!TAG_FILE...</code>) 通常由 ctags 生成器控制。这里我不打算介绍它们，您可以随意查阅文档。标签列表是一个由所有定义组成的列表，由ctags建立索引。</p><p>现在回到 <code>two.rb</code>，将光标移至 <code>donut</code>，再输入<code>Ctrl-]</code>，Vim 将带您转到 <code>one.rb</code> 文件里<code>def donut</code> 所在的行上。成功啦！但 Vim 怎么做到的呢？</p><h2 id="解剖标签文件"><a href="#解剖标签文件" class="headerlink" title="解剖标签文件"></a>解剖标签文件</h2><p>来看看<code>donut</code> 标签项：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">donut<span class="hljs-keyword">one</span>.rb/^  def donut$/;&quot;f<span class="hljs-keyword">class</span>:<span class="hljs-keyword">One</span><br></code></pre></td></tr></table></figure><p>上面的标签项由四个部分组成：一个<code>tagname</code>、一个<code>tagfile</code>、一个<code>tagaddress</code>，以及标签选项。</p><ul><li><code>donut</code> 是 <code>tagname</code>。当光标在 “donut” 时，Vim 搜索标签文件里含有 “donut” 字符串的一行。</li><li><code>one.rb</code> 是 <code>tagfile</code>。Vim 会搜寻 <code>one.rb</code> 文件。</li><li><code>/^ def donut$/</code> 是 <code>tagaddress</code>。<code>/.../</code> 是模式指示器。<code>^</code> 代表一行中第一个元素，后面跟着两个空格，然后是<code>def donut</code>字符串，最后 <code>$</code> 代表一行中最后一个元素。</li><li><code>f class:One</code> 是标签选项，它告诉 Vim，<code>donut</code> 是一种函数 (<code>f</code>)，并且是 <code>One</code> 类的一部分。</li></ul><p>再看看另一个标签项：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">One</span><span class="hljs-keyword">one</span>.rb/^<span class="hljs-keyword">class</span> <span class="hljs-keyword">One</span>$/;&quot;c<br></code></pre></td></tr></table></figure><p>这一行和 <code>donut</code>也是一样的：</p><ul><li><code>One</code> 是 <code>tagname</code>。注意，对于标签，第一次扫描区分大小写。如果列表中有 <code>One</code> 和 <code>one</code>， Vim 会优先考虑 <code>One</code> 而不是 <code>one</code>。</li><li><code>one.rb</code> 是 <code>tagfile</code>。Vim 会搜寻 <code>one.rb</code> 文件。</li><li><code>/^class One$/</code> 是 <code>tagaddress</code> 。Vim 会查找以 <code>class</code> 开头 (<code>^</code>) 、以 <code>One</code> 结尾 (<code>$</code>) 的行。</li><li><code>c</code> 是可用标签选项之一。由于 <code>One</code> 是一个 ruby 类而不是过程，因此被标签为 <code>c</code>。</li></ul><p>标签文件的内容可能不尽相同，根据您使用的标签生成器而定。但至少，标签文件必须具有以下格式之一：</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">1.  </span><span class="hljs-template-variable">&#123;tagname&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;TAB&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;tagfile&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;TAB&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;tagaddress&#125;</span><span class="language-xml"></span><br><span class="language-xml">2.  </span><span class="hljs-template-variable">&#123;tagname&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;TAB&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;tagfile&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;TAB&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;tagaddress&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;term&#125;</span><span class="language-xml"> </span><span class="hljs-template-variable">&#123;field&#125;</span><span class="language-xml"> ..</span><br></code></pre></td></tr></table></figure><h2 id="标签文件"><a href="#标签文件" class="headerlink" title="标签文件"></a>标签文件</h2><p>您知道，在运行 <code>ctags -R .</code> 后，一个新 <code>tags</code> 文件会被创建。但是，Vim 是如何知道在哪儿查找标签文件的呢？</p><p>如果运行 <code>:set tags?</code>，您可能会看见 <code>tags=./tags,tags</code>（根据您的 Vim 设置，内容可能有所不同）。对于 <code>./tags</code>，Vim 会在当前文件所在路径查找所有标签；对于 <code>tags</code>，Vim 会在当前目录（您的项目根路径）中查找。</p><p>此外，对于 <code>./tags</code>，Vim 会在当前文件所在路径内查找一个标签文件，无论它被嵌套得有多深。接下来，Vim 会在当前目录（项目根路径）查找。Vim 在找到第一个匹配项后会停止搜索。</p><p>如果您的 <code>&#39;tags&#39;</code> 文件是 <code>tags=./tags,tags,/user/iggy/mytags/tags</code>，那么 Vim 在搜索完 <code>./tags</code> 和 <code>tags</code> 目录后，还会在 <code>/user/iggy/mytags</code> 目录内查找。所以您可以分开存放标签文件，不必将它们置于项目文件夹中。</p><p>要添加标签文件位置，只需要运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">set</span> <span class="hljs-keyword">tags</span>+=path/<span class="hljs-keyword">to</span>/my/<span class="hljs-keyword">tags</span>/<span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h2 id="为大型项目生成标签："><a href="#为大型项目生成标签：" class="headerlink" title="为大型项目生成标签："></a>为大型项目生成标签：</h2><p>如果您尝试在大型项目中运行 ctag，则可能需要很长时间，因为 Vim 也会查看每个嵌套目录。如果您是 Javascript 开发者，您会知道 <code>node_modules</code> 非常大。假设您有五个子项目，每个都包含自己的 <code>node_modules</code> 目录。一旦运行 <code>ctags -R .</code>，ctags 将尝试扫描这5个 <code>node_modules</code>。但您可能不需要为 <code>node_modules</code> 运行 ctag。</p><p>如果要排除 <code>node_modules</code> 后执行 ctags，可以运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ctags -R --exclude</span>=node_modules .<br></code></pre></td></tr></table></figure><p>这次应该只需要不到一秒钟的时间。另外，您还可以多次使用 <code>exclude</code> 选项：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ctags -R <span class="hljs-attribute">--exclude</span>=.git <span class="hljs-attribute">--exclude</span>=vendor <span class="hljs-attribute">--exclude</span>=node_modules <span class="hljs-attribute">--exclude</span>=db <span class="hljs-attribute">--exclude</span>=log .<br></code></pre></td></tr></table></figure><h2 id="标签导航"><a href="#标签导航" class="headerlink" title="标签导航"></a>标签导航</h2><p>仅使用 <code>Ctrl-]</code> 也挺好，但我们还可以多学几个技巧。其实，标签跳转键 <code>Ctrl-]</code> 还有命令行模式：<code>:tag my-tag</code>。如果您运行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">:<span class="hljs-keyword">tag</span> <span class="hljs-title">donut</span><br></code></pre></td></tr></table></figure><p>Vim 就会跳转至 <code>donut</code> 方法，就像在 “donut” 字符串上按 <code>Ctrl-]</code> 一样。您还可以使用 <code>&lt;Tab&gt;</code> 来自动补全参数：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">:<span class="hljs-keyword">tag</span> <span class="hljs-title">d</span><span class="hljs-tag">&lt;Tab&gt;</span><br></code></pre></td></tr></table></figure><p>Vim 会列出所有以 “d” 开头的标签。对于上面的命令，结果则是 “donut”。</p><p>在实际项目中，您可能会遇到多个同名的方法。我们来更新下这两个文件。先是 <code>one.rb</code>：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">## one.rb<br><span class="hljs-keyword">class</span> <span class="hljs-symbol">One</span><br>  <span class="hljs-symbol">def</span> <span class="hljs-symbol">initialize</span><br>    <span class="hljs-symbol">puts</span> &quot;<span class="hljs-symbol">Initialized</span>&quot;<br>  <span class="hljs-symbol">end</span><br><br>  <span class="hljs-symbol">def</span> <span class="hljs-symbol">donut</span><br>    <span class="hljs-symbol">puts</span> &quot;<span class="hljs-symbol">one</span> <span class="hljs-symbol">donut</span>&quot;<br>  <span class="hljs-symbol">end</span><br><br>  <span class="hljs-symbol">def</span> <span class="hljs-symbol">pancake</span><br>    <span class="hljs-symbol">puts</span> &quot;<span class="hljs-symbol">one</span> <span class="hljs-symbol">pancake</span>&quot;<br>  <span class="hljs-symbol">end</span><br><span class="hljs-symbol">end</span><br></code></pre></td></tr></table></figure><p>然后 <code>two.rb</code>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">## two.rb</span><br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;./one.rb&#x27;</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pancake</span></span><br>  <span class="hljs-string">&quot;Two pancakes&quot;</span><br><span class="hljs-keyword">end</span><br><br>one = <span class="hljs-title class_">One</span>.new<br>one.donut<br>puts pancake<br></code></pre></td></tr></table></figure><p>由于新添加了一些过程，因此编写完代码后，不要忘记运行 <code>ctags -R .</code>。现在，您有了两个 <code>pancake</code> 过程。如果您在 <code>two.rb</code> 内按下 <code>Ctrl-]</code>，会发生什么呢？</p><p>Vim 会跳转到 <code>two.rb</code> 内的 <code>def pancake</code>，而不是 <code>one.rb</code> 的 <code>def pancake</code>。这是因为 Vim 认为 <code>two.rb</code> 内部的 <code>pancake</code> 过程比其他的<code>pancake</code> 过程具有更高优先级。</p><h2 id="标签优先级"><a href="#标签优先级" class="headerlink" title="标签优先级"></a>标签优先级</h2><p>并非所有的标签都有着相同的地位。一些标签有着更高的优先级。如果有重复的标签项，Vim 会检查关键词的优先级。顺序是：</p><ol><li>当前文件中完全匹配的静态标签。</li><li>当前文件中完全匹配的全局标签。</li><li>其他文件中完全匹配的全局标签。</li><li>其他文件中完全匹配的静态标签。</li><li>当前文件中不区分大小写匹配的静态标签。</li><li>当前文件中不区分大小写匹配的全局标签。</li><li>其他文件中区分大小写匹配的全局标签。</li><li>当前文件中不区分大小写匹配的静态标签。</li></ol><p>根据优先级列表，Vim 会对在同一个文件上找到的精确匹配项进行优先级排序。这就是为什么 Vim 会选择 <code>two.rb</code> 里的 <code>pancake</code> 过程而不是 <code>one.rb</code> 里的。但是，上述优先级列表有些例外，取决于您的<code>&#39;tagcase&#39;</code>、<code>&#39;ignorecase&#39;</code>、<code>&#39;smartcase&#39;</code> 设置。我不打算介绍它们，您可以自行查阅 <code>:h tag-priority</code>。</p><h2 id="选择性跳转标签"><a href="#选择性跳转标签" class="headerlink" title="选择性跳转标签"></a>选择性跳转标签</h2><p>如果可以选择要跳转到哪个标签，而不是始终转到优先级最高的，那就太好了。因为您可能想跳转到 <code>one.rb</code> 里的 <code>pancake</code> 方法，而不是 <code>two.rb</code> 里的。现在您可以使用 <code>:tselect</code> 做到它！运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:tselect</span> pancake<br></code></pre></td></tr></table></figure><p>您可以在屏幕底部看到：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment">## pri kind tag               file</span><br><span class="hljs-number">1</span> F C f    pancake           two.rb<br>             <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pancake</span></span><br><span class="hljs-number">2</span> F   f    pancake           one.rb<br>             <span class="hljs-class"><span class="hljs-keyword">class</span>:<span class="hljs-title">One</span></span><br>             <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pancake</span></span><br></code></pre></td></tr></table></figure><p>如果输入<code>2</code> 后再 <code>&lt;Return&gt;</code>，Vim 将跳转到 <code>one.rb</code> 里的<code>pancake</code> 过程。如果输入<code>1</code> 后再 <code>&lt;Return&gt;</code>，Vim 将跳转到 <code>two.rb</code> 里的。</p><p>注意<code>pri</code> 列，第一个匹配中该列是<code>F C</code>，第二个匹配中则是<code>F</code>。这就是 Vim 用来确定标签优先级的凭据。<code>F C</code>表示在当前 (<code>C</code>) 文件中完全匹配 (<code>F</code>) 的全局标签。<code>F</code> 表示仅完全匹配 (<code>F</code>) 的全局标签。<code>F C</code> 的优先级永远比 <code>F</code> 高。<em>（译注：<code>F</code>是<code>Fully-matched</code>，<code>C</code>是<code>Current file</code>）</em></p><p>如果运行<code>:tselect donut</code>，即使只有一个标签可选，Vim 也会提示您选择跳转到哪一个。有没有什么方法可以让 Vim 仅在有多个匹配项时才提示标签列表，而只找到一个标签时就立即跳转呢？</p><p>当然！Vim 有一个 <code>:tjump</code> 方法。运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:tjump</span> donut<br></code></pre></td></tr></table></figure><p>Vim 将立即跳转到 <code>one.rb</code> 里的<code>donut</code> 过程，就像在运行 <code>:tag donut</code> 一样。现在试试：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:tjump</span> pancake<br></code></pre></td></tr></table></figure><p>Vim 将提示您从标签选项中选择一个，就像在运行<code>:tselect pancake</code>。<code>tjump</code> 能两全其美。</p><p><code>tjump</code> 在普通模式下有一个快捷键：<code>g Ctrl-]</code>。我个人喜欢<code>g Ctrl-]</code>胜过 <code>Ctrl-]</code>。</p><h2 id="标签的自动补全"><a href="#标签的自动补全" class="headerlink" title="标签的自动补全"></a>标签的自动补全</h2><p>标签能有助于自动补全。回想下第6章“插入模式”，您可以使用 <code>Ctrl-x</code> 子模式来进行各式自动补全。其中有一个我没有提到过的自动补全子模式便是 <code>Ctrl-]</code>。如果您在插入模式中输入<code>Ctrl-x Ctrl-]</code>，Vim 将使用标签文件来自动补全。</p><p>在插入模式下输入<code>Ctrl-x Ctrl-]</code>，您会看到：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">One</span><br><span class="hljs-attribute">donut</span><br><span class="hljs-attribute">initialize</span><br><span class="hljs-attribute">pancake</span><br></code></pre></td></tr></table></figure><h2 id="标签堆栈"><a href="#标签堆栈" class="headerlink" title="标签堆栈"></a>标签堆栈</h2><p>Vim 维持着一个标签堆栈，上面记录着所有您从哪儿来、跳哪儿去的标签列表。使用 <code>:tags</code> 可以看到这个堆栈。如果您首先跳转到<code>pancake</code>，紧接着是<code>donut</code>，此时运行<code>:tags</code>，您将看到：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">  <span class="hljs-comment"># TO tag         FROM line  in file/text</span><br> <span class="hljs-number"> 1 </span><span class="hljs-number"> 1 </span>pancake           <span class="hljs-number"> 10 </span> ch16_tags/two.rb<br> <span class="hljs-number"> 2 </span><span class="hljs-number"> 1 </span>donut              <span class="hljs-number"> 9 </span> ch16_tags/two.rb<br>&gt;<br></code></pre></td></tr></table></figure><p>注意上面的 <code>&gt;</code> 符号，它代表着您当前在堆栈中的位置。要“弹出”堆栈，从而回到上一次的状态，您可以运行<code>:pop</code>。试试它，再运行<code>:tags</code>看看：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">  <span class="hljs-comment"># TO tag         FROM line  in file/text</span><br> <span class="hljs-number"> 1 </span><span class="hljs-number"> 1 </span>pancake           <span class="hljs-number"> 10 </span> puts pancake<br>&gt;<span class="hljs-number"> 2 </span><span class="hljs-number"> 1 </span>donut              <span class="hljs-number"> 9 </span> one.donut<br><br></code></pre></td></tr></table></figure><p>注意现在 <code>&gt;</code> 符号位于 <code>donut</code> 所在的第二行了。再 <code>pop</code> 一次，然后运行<code>:tags</code>：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tap">  <span class="hljs-comment"># TO tag         FROM line  in file/text</span><br>&gt;<span class="hljs-number"> 1 </span><span class="hljs-number"> 1 </span>pancake           <span class="hljs-number"> 10 </span> puts pancake<br> <span class="hljs-number"> 2 </span><span class="hljs-number"> 1 </span>donut              <span class="hljs-number"> 9 </span> one.donut<br></code></pre></td></tr></table></figure><p>在普通模式下，您可以按下 <code>Ctrl-t</code> 来达到和 <code>:pop</code> 一样的效果。</p><h2 id="自动生成标签"><a href="#自动生成标签" class="headerlink" title="自动生成标签"></a>自动生成标签</h2><p>Vim 标签最大的缺点之一是，每当进行重大改变时，您需要重新生成标签文件。如果您将<code>pancake</code> 过程重命名为 <code>waffle</code>，标签文件不知道 <code>pancake</code> 被重命名了，标签列表仍旧存储着 <code>pancake</code> 过程。运行<code>ctags -R .</code> 可以创建更新的标签文件，但这可能会很缓慢。</p><p>幸运的是，有几种可以自动生成标签的方法。这一小节不打算介绍一个简单明了的过程，而是提出一些想法，以便您可以扩展它们。</p><h2 id="在保存时生成标签"><a href="#在保存时生成标签" class="headerlink" title="在保存时生成标签"></a>在保存时生成标签</h2><p>Vim 有一个自动命令 (<code>autocmd</code>) 方法，可以在触发事件时执行任意命令。您可以使用这个方法，以便在每次保存时生成标签。运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">autocmd</span> BufWritePost *.rb <span class="hljs-keyword">silent</span> !ctags -R .<br></code></pre></td></tr></table></figure><p>上面命令的分解如下：</p><ul><li><code>autocmd</code> 是 Vim 的自动命令方法，它接受一个事件名称、文件和一个命令。</li><li><code>BufWritePost</code> 是保存缓冲区时的一个事件。每次保存文件时将触发一次 <code>BufWritePost</code> 事件。</li><li><code>.rb</code> 是 ruby (<code>rb</code>) 文件的一种文件模式。</li><li><code>silent</code> 是您传递的命令的一部分。如果不输入它，每次触发自动命令时，Vim 都会提示  <code>press ENTER or type command to continue</code>。</li><li><code>!ctags -R .</code> 是要执行的命令。回想一下，<code>!cmd</code> 从 Vim 内部执行终端命令。</li></ul><p>现在，每次您保存一个 ruby 文件时，Vim 都会运行<code>ctags -R .</code>。</p><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>有几种插件可以自动生成 ctags：</p><ul><li><a href="https://github.com/ludovicchabant/vim-gutentags">vim-gutentags</a></li><li><a href="https://github.com/szw/vim-tags">vim-tags</a></li><li><a href="https://github.com/xolox/vim-easytags">vim-easytags</a></li><li><a href="https://github.com/craigemery/vim-autotag">vim-autotag</a></li></ul><p>我使用 vim-gutentags。它的使用方法很简单，而且装上就可以直接使用。</p><h2 id="Ctags-以及-Git-钩子"><a href="#Ctags-以及-Git-钩子" class="headerlink" title="Ctags 以及 Git 钩子"></a>Ctags 以及 Git 钩子</h2><p>Tim Pope 是一个写了很多非常棒的 Vim 插件的作者，他写了一篇博客，建议使用 git 钩子。<a href="https://tbaggery.com/2011/08/08/effortless-ctags-with-git.html">可以看一看</a>。</p><h2 id="聪明地学习标签"><a href="#聪明地学习标签" class="headerlink" title="聪明地学习标签"></a>聪明地学习标签</h2><p>只要配置得当，标签是非常有用的。假设在一个新的代码库中，您想要搞清楚 <code>functionFood</code> 干了什么，您可以通过跳转到它的定义来搞懂它们。在那儿可以看到，它又调用了 <code>functionBreakfast</code>。继续跟踪，发现还调用了 <code>functionPancake</code>。现在您明白了，函数调用路径图长这样：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">functionFood</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">functionBreakfast</span> -&gt;</span> functionPancake<br></code></pre></td></tr></table></figure><p>进一步可以知道，这段代码和早餐吃煎饼有关。</p><p>现在您已经知道如何使用标签，通过 <code>:h tags</code> 可以学习更多有关标签的知识。接下来让我们一起来探索另一个功能：折叠。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-折叠</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch17_fold/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch17_fold/</url>
    
    <content type="html"><![CDATA[<h1 id="第17章-折叠"><a href="#第17章-折叠" class="headerlink" title="第17章 折叠"></a>第17章 折叠</h1><p>在阅读文件时，经常会有一些不相关的文本会妨碍您理解。使用 Vim 折叠可以隐藏这些不必要的信息。</p><p>本章中，您将学习如何使用不同的折叠方法。</p><h2 id="手动折叠"><a href="#手动折叠" class="headerlink" title="手动折叠"></a>手动折叠</h2><p>想象您正在折叠一张纸来覆盖一些文本，实际的文本不会消失，它仍在那儿。Vim 折叠的工作方式与此相同，它<em>折叠</em>一段文本，在显示时会隐藏起来，但实际上并不会真的删除它。</p><p>折叠操作符是<code>z</code>。（折叠纸张时，它看起来也像字母 “z”）。</p><p>假设有如下文本：</p><figure class="highlight applescript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs applescript">Fold <span class="hljs-keyword">me</span><br>Hold <span class="hljs-keyword">me</span><br></code></pre></td></tr></table></figure><p>把光标放在第一行，输入 <code>zfj</code>。Vim 将这两行折叠成一行，同时会看到类似消息：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-comment">-- 2 lines: Fold me -----</span><br></code></pre></td></tr></table></figure><p>上面的命令分解如下：</p><ul><li><code>zf</code> 是折叠操作符。</li><li><code>j</code> 是用于折叠操作符的动作。</li></ul><p>您可以使用 <code>zo</code> 打开&#x2F;展开已折叠文本，使用 <code>zc</code> 关闭&#x2F;收缩文本。</p><p>折叠是一个操作符，所以它遵循语法规则（<code>动词+名词</code>）。您可以在折叠运算符后，加上一个动作(motion)或文本对象。例如，使用 <code>zfip</code> 可以折叠内部段落；使用 <code>zfG</code> 可以折叠至文件末尾；使用 <code>zfa&#123;</code> 可以折叠 <code>&#123;</code> 和 <code>&#125;</code> 之间的文本。</p><p>您可以在可视模式下进行折叠。高亮您想要折叠的区域后 (<code>v</code>, <code>V</code>, 或 <code>Ctrl-v</code>)，再输入 <code>zf</code> 即可。</p><p>您也可以在命令行模式下，使用 <code>:fold</code> 命令执行一次折叠。若要折叠当前行及紧随其后的第二行，可以运行：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">:,+<span class="hljs-number">1</span><span class="hljs-built_in">fold</span><br></code></pre></td></tr></table></figure><p><code>,+1</code> 是要折叠的范围。如果不传递范围参数，默认当前行。<code>+1</code> 是代表下一行的范围指示器。运行 <code>:5,10fold</code> 可以折叠第5至10行。运行 <code>:,$fold</code> 可以折叠当前行至文件末尾。</p><p>还有许多其他折叠和展开的命令。我发现他们实在太多，以至于在刚起步时很难记住。最有用的一些命令是：</p><ul><li><code>zR</code> 展开所有折叠。</li><li><code>zM</code> 收缩所有折叠。</li><li><code>za</code> 切换折叠状态。</li></ul><p><code>zR</code> 和 <code>zM</code> 可用于任意行上，但 <code>za</code> 仅能用于已折叠&#x2F;未折叠的行上。输入 <code>:h fold-commands</code> 可查阅更多有关折叠的指令。</p><h2 id="不同的折叠方法"><a href="#不同的折叠方法" class="headerlink" title="不同的折叠方法"></a>不同的折叠方法</h2><p>以上部分涵盖了 Vim 手动折叠的内容。实际上，Vim 有六种不同的折叠方法：</p><ol><li>手动折叠</li><li>缩进折叠</li><li>表达式折叠</li><li>语法折叠</li><li>差异折叠</li><li>标志折叠</li></ol><p>运行 <code>:set foldmethod?</code> 可查看您当前正在使用哪一种折叠方式。默认情况下，Vim 使用手动方式。</p><p>在本章的剩余部分，您将学习其他五种折叠方法。让我们从缩进折叠开始。</p><h2 id="缩进折叠"><a href="#缩进折叠" class="headerlink" title="缩进折叠"></a>缩进折叠</h2><p>要使用缩进折叠，需要将 <code>&#39;foldmethod&#39;</code> 选项更改为缩进：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">foldmethod</span>=indent<br></code></pre></td></tr></table></figure><p>假设有如下文本：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">One</span><br>  <span class="hljs-keyword">Two</span><br>  <span class="hljs-keyword">Two</span> again<br></code></pre></td></tr></table></figure><p>运行 <code>:set foldmethod=indent</code> 后将看到：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">One</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-- 2 lines: Two -----</span><br></code></pre></td></tr></table></figure><p>使用缩进折叠后，Vim 将会查看每行的开头有多少空格，并将它与 <code>&#39;shiftwidth&#39;</code> 选项进行比较，以此来决定该行可折叠性。<code>&#39;shiftwidth&#39;</code> 返回每次缩进所需的空格数。如果运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> shiftwidth?<br></code></pre></td></tr></table></figure><p>Vim 的默认 <code>&#39;shiftwidth&#39;</code> 值为2。对于上面的文本而言，”Two” 和 “Two again” 的开头都有两个空格。当 Vim 看到了空格数 <em>且</em> <code>&#39;shiftwidth&#39;</code>值都为2时，Vim 认为该行的缩进折叠级别为1。</p><p>假设这次文本开头只有一个空格：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">One</span><br> <span class="hljs-keyword">Two</span><br> <span class="hljs-keyword">Two</span> again<br></code></pre></td></tr></table></figure><p>运行 <code>:set foldmethod=indent</code> 后，Vim 不再折叠已缩进的行了，因为这些行没有足够的空格。1个空格不会被视作一个缩进。然而，当您改变 <code>&#39;shiftwidth&#39; </code> 的值为1后：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">shiftwidth</span>=1<br></code></pre></td></tr></table></figure><p>文本现在可以折叠了！现在一个空格将被视为一个缩进。</p><p>现在，我们将 <code>&#39;shiftwidth&#39; </code> 以及文本开头的空格数都重新恢复为2后，另外添加一些内容：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">One</span><br>  <span class="hljs-keyword">Two</span><br>  <span class="hljs-keyword">Two</span> again<br>    Three<br>    Three again<br></code></pre></td></tr></table></figure><p>运行折叠命令 (<code>zM</code>) 后可以看到：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">One</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-- 4 lines: Two -----</span><br></code></pre></td></tr></table></figure><p>展开已折叠的行 (<code>zR</code>)，接着移动光标至 “Three”，然后切换文本的折叠状态 (<code>za</code>)：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">One</span><br>  <span class="hljs-keyword">Two</span><br>  <span class="hljs-keyword">Two</span> again<br>+-- 2 lines: Three -----<br></code></pre></td></tr></table></figure><p>这是啥？叠中叠？</p><p>是的，您可以嵌套折叠。文本 “Two” 和 “Two again” 的折叠级别都为1，文本 “Three” 和 “Three again” 的折叠级别都为2。如果在一段可折叠文本中，具有另一段折叠级别更高的可折叠文本，则可以具有多个折叠层。</p><h2 id="表达式折叠"><a href="#表达式折叠" class="headerlink" title="表达式折叠"></a>表达式折叠</h2><p>表达式折叠允许您定义要匹配折叠的表达式。定义折叠表达式后，Vim 会计算每行的 <code>&#39;foldexpr&#39;</code> 值。这是必须配置的变量，它要返回适当的值。如果返回 0，则不折叠行。如果它返回 1，则该行的折叠级别为 1。如果它返回 2，则该线的折叠级别为 2。除了整数外还有其他的值，但我不打算介绍它们。如果你好奇，可以查阅<code>:h fold-expr</code>。</p><p>首先，更改折叠方法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">foldmethod</span>=expr<br></code></pre></td></tr></table></figure><p>假设您有一份早餐食品列表，并且想要折叠所有以 “p” 开头的早餐项：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">donut<br>pancake<br><span class="hljs-keyword">pop</span>-tarts<br>protein <span class="hljs-built_in">bar</span><br>salmon<br>scrambled eggs<br></code></pre></td></tr></table></figure><p>其次，更改 <code>foldexpr</code> 为捕获以 “p” 开头的表达式：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">foldexpr</span>=getline(v:lnum)[0]==\\<span class="hljs-string">&quot;p\\&quot;</span><br></code></pre></td></tr></table></figure><p>这表达式看起来有点吓人。我们来分解下：</p><ul><li><code>:set foldexpr</code> 设置 <code>&#39;foldexpr&#39;</code> 为自定义表达式。</li><li><code>getline()</code> 是 Vim 脚本的一个函数，它返回指定行的内容。如运行 <code>:echo getline(5)</code> 可以获取第5行的内容。</li><li><code>v:lnum</code> 是 Vim <code>&#39;foldexpr&#39;</code> 表达式的特殊变量。Vim 在扫描每一行时，都会将行号存储至 <code>v:lnum</code> 变量。在第5行，<code>v:lnum</code> 值为5。在第10行，<code>v:lnum</code>值为10。</li><li><code>[0]</code> 处于 <code>getline(v:lnum)[0]</code> 语境时，代表每一行的第一个字符。Vim 在扫描某一行时，<code>getline(v:lnum)</code> 返回该行的内容，而 <code>getline(v:lnum)[0]</code> 则返回这一行的第一个字符。例如，我们早餐食品列表的第一行是 “donut”，则 <code>getline(v:lnum)[0]</code> 返回 “d”；列表的第二行是 “pancake”，则 <code>getline(v:lnum)[0]</code> 返回 “p”。</li><li><code>==\\&quot;p\\&quot;</code> 是等式表达式的后半部分，它检查刚才表达式的计算结果是否等于 “p”。如果是，则返回1，否则返回0。在 Vim 的世界里，1代表真，0代表假。所以，那些以 “p” 开头的行，表达式都会返回1。回想一下本节的开始，如果 <code>&#39;foldexpr&#39;</code> 的值为1，则折叠级别为1。</li></ul><p>在运行这个表达式后，您将看到：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ada">donut<br>+<span class="hljs-comment">-- 3 lines: pancake -----</span><br>salmon<br>scrambled eggs<br></code></pre></td></tr></table></figure><h2 id="语法折叠"><a href="#语法折叠" class="headerlink" title="语法折叠"></a>语法折叠</h2><p>语法折叠是由Vim的语法高亮决定的。如果您使用了语法高亮插件，比如<a href="https://github.com/sheerun/vim-polyglot">vim-polyglot</a>，那么装上插件就可以直接使用语法折叠。仅仅需要将<code>foldmethod</code>选项改为 <code>syntax</code>。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">foldmethod</span>=syntax<br></code></pre></td></tr></table></figure><p>假设您正在编辑一个JavaScript文件，而且您已经装好了 vim-polyglot 插件。如果您有以下文本：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">const nums = [<br>  <span class="hljs-literal">one</span>,<br>  <span class="hljs-literal">two</span>,<br>  <span class="hljs-literal">three</span>,<br>  <span class="hljs-literal">four</span><br>]<br></code></pre></td></tr></table></figure><p>上述文本将会使用语法折叠折起来。当您为某个特定语言（位于 <code>syntax/</code> 目录中的语言即是典型例子）定义了语法高亮，您可以添加一个 <code>fold</code> 属性，使它支持折叠。下面是 vim-polyglot 中JavaScript语法文件中的一个片段。注意最后的 <code>fold</code> 关键字。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">syntax region  jsBracket                      <span class="hljs-attribute">matchgroup</span>=jsBrackets            <span class="hljs-attribute">start</span>=/\[/ <span class="hljs-attribute">end</span>=/\]/ <span class="hljs-attribute">contains</span>=@jsExpression,jsSpreadExpression extend fold<br></code></pre></td></tr></table></figure><p>本书不会详细介绍 <code>syntax</code> 功能。如果您感兴趣，可以查阅 <code>:h syntax.txt</code>。</p><h2 id="差异折叠"><a href="#差异折叠" class="headerlink" title="差异折叠"></a>差异折叠</h2><p>Vim 可以对多个文件进行差异比较。</p><p>如果您有 <code>file1.txt</code>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br></code></pre></td></tr></table></figure><p>以及 <code>file2.txt</code>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br>emacs <span class="hljs-keyword">is</span> ok<br></code></pre></td></tr></table></figure><p>运行 <code>vimdiff file1.txt file2.txt</code>：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">+-- <span class="hljs-number">3</span> lines: <span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome -----<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br><span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome<br>[<span class="hljs-keyword">vim</span> <span class="hljs-keyword">is</span> awesome] / [emacs <span class="hljs-keyword">is</span> ok]<br></code></pre></td></tr></table></figure><p>Vim 会自动折叠一些相同的行。运行 <code>vimdiff</code> 命令时，Vim 会自动使用 <code>foldmethod=diff</code>。此时如果运行 <code>:set foldmethod?</code>，它将返回 <code>diff</code>。</p><h2 id="标志折叠"><a href="#标志折叠" class="headerlink" title="标志折叠"></a>标志折叠</h2><p>要使用标志折叠，请运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">foldmethod</span>=marker<br></code></pre></td></tr></table></figure><p>假设有如下文本：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">Hello</span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;&#123;</span><br><span class="hljs-template-variable"><span class="hljs-name">world</span></span><br><span class="hljs-template-variable">vim</span><br><span class="hljs-template-variable">&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>输入 <code>zM</code> 后会看到：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">hello<br><br>+<span class="hljs-comment">-- 4 lines: -----</span><br></code></pre></td></tr></table></figure><p>Vim 将 <code>&#123;&#123;&#123;` 和 `&#125;&#125;&#125;</code> 视为折叠指示器，并折叠其中的内容。使用标志折叠时，Vim 会寻找由 <code>&#39;foldmarker&#39;</code> 选项定义的特殊标志，并标记折叠区域。要查看 Vim 使用的标志，请运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> foldmarker?<br></code></pre></td></tr></table></figure><p>默认情况下，Vim 把 <code>&#123;&#123;&#123;` 和 `&#125;&#125;&#125;</code> 作为指示器。如果您想将指示器更改为其他诸如 “coffee1” 和 “coffee2” 的字符串，可以运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">foldmarker</span>=coffee1,coffee2<br></code></pre></td></tr></table></figure><p>假设有如下文本：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hello</span><br><br>coffee1<br>world<br>vim<br>coffee2<br></code></pre></td></tr></table></figure><p>现在，Vim 将使用 <code>coffee1</code> 和 <code>coffee2</code> 作为新折叠标志。注意，指示器必须是文本字符串，不能是正则表达式。</p><h2 id="持久化折叠"><a href="#持久化折叠" class="headerlink" title="持久化折叠"></a>持久化折叠</h2><p>当关闭 Vim 会话后，您将失去所有的折叠信息。假设您有 <code>count.txt</code> 文件：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br><span class="hljs-literal">three</span><br><span class="hljs-literal">four</span><br><span class="hljs-literal">five</span><br></code></pre></td></tr></table></figure><p>手动从第三行开始往下折叠 (<code>:3,$fold</code>)：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-literal">one</span><br><span class="hljs-literal">two</span><br>+<span class="hljs-comment">-- 3 lines: three ---</span><br></code></pre></td></tr></table></figure><p>当您退出 Vim 再重新打开 <code>count.txt</code> 后，这些折叠都不见了！</p><p>要在折叠后保留它们，可以运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:mkview</span><br></code></pre></td></tr></table></figure><p>当打开 <code>count.txt</code> 后，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:loadview</span><br></code></pre></td></tr></table></figure><p>您的折叠信息都被保留下来了。然而，您需要手动运行 <code>mkview</code> 和 <code>loadview</code>。我知道，终有一日，我会忘记运行 <code>mkview</code> 就关闭文件了，接着便会丢失所有折叠信息。能不能自动实现这个呢？</p><p>当然能！要在关闭 <code>.txt</code> 文件时自动运行 <code>mkview</code>，以及在打开 <code>.txt</code> 文件后自动运行 <code>loadview</code>，将下列内容添加至您的 vimrc：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufWinLeave *.txt <span class="hljs-keyword">mkview</span><br><span class="hljs-keyword">autocmd</span> BufWinEnter *.txt <span class="hljs-keyword">silent</span> <span class="hljs-keyword">loadview</span><br></code></pre></td></tr></table></figure><p>在上一章您已经见过 <code>autocmd</code> 了，它用于在事件触发时执行一条命令。这里的两个事件是：</p><ul><li><code>BufWinLeave</code> 从窗口中删除缓冲时。</li><li><code>BufWinEnter</code> 在窗口中加载缓冲时。</li></ul><p>现在，即使您在 <code>.txt</code> 文件内折叠内容后直接退出 Vim，下次再打开该文件时，您的折叠信息都能自动恢复。</p><p>默认情况下，当运行 <code>mkview</code> 时，Vim将折叠信息保存在<code>~/.vim/view</code> (Unix 系统)。您可以查阅 <code>:h &#39;viewdir&#39;</code> 来了解更多信息。</p><h2 id="聪明地学习折叠"><a href="#聪明地学习折叠" class="headerlink" title="聪明地学习折叠"></a>聪明地学习折叠</h2><p>当我刚开始使用 Vim 时， 我会跳过学习 Vim 折叠，因为我觉得它不太实用。然而，随着我码龄的增长，我越发觉得折叠功能大有用处。得当地使用折叠功能，文本结构可以更加清晰，犹如一本书籍的目录。</p><p>当您学习折叠时，请从手动折叠开始，因为它可以随学随用。然后逐渐学习不同的技巧来使用缩进和标志折叠。最后，学习如何使用语法和表达式折叠。您甚至可以使用后两个来编写您自己的 Vim 插件。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-Git</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch18_git/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch18_git/</url>
    
    <content type="html"><![CDATA[<h1 id="第18章-Git"><a href="#第18章-Git" class="headerlink" title="第18章 Git"></a>第18章 Git</h1><p>Vim 和 Git 是两种实现不同功能的伟大工具。Vim 用于文本编辑，Git 用于版本控制。</p><p>在本章中，您将学习如何将 Vim 和 Git 集成在一起。</p><h2 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h2><p>在上一章中，您看到了如何运行 <code>vimdiff</code> 命令以显示多个文件之间的差异。</p><p>假设您有两个文件，<code>file1.txt</code> 和 <code>file2.txt</code>。</p><p><code>file1.txt</code> 的内容如下：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pancakes</span><br><span class="hljs-attribute">waffles</span><br><span class="hljs-attribute">apples</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">milk</span><br><span class="hljs-attribute">apple juice</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">yogurt</span><br></code></pre></td></tr></table></figure><p><code>file2.txt</code> 的内容如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">pancakes<br>waffles<br><span class="hljs-keyword">oranges</span><br><span class="hljs-keyword"></span><br>milk<br><span class="hljs-keyword">orange </span><span class="hljs-keyword">juice</span><br><span class="hljs-keyword"></span><br>yogurt<br></code></pre></td></tr></table></figure><p>若要查看两个文件之间的差异，请运行：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vimdiff</span> file1.txt file2.txt<br></code></pre></td></tr></table></figure><p>或者也可以运行：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">vim</span> -d file1.txt file2.txt<br></code></pre></td></tr></table></figure><p align="center">  <img alt="Basic diffing with Vim" width="900" height="auto" src="images/diffing-basic.png"></p><p><code>vimdiff</code> 并排显示两个缓冲区。左边是 <code>file1.txt</code>，右边是 <code>file2.txt</code>。不同的两行（apples 和 oranges）会被高亮显示。</p><p>假设您要使第二个缓冲区相应位置变成 apples，而不是 oranges。若想从 <code>file1.txt</code> 传输您当前位置（当前您在 <code>file1.txt</code>）的内容到 <code>file2.txt</code>，首先使用 <code>]c</code> 跳转到下一处差异（使用 <code>[c</code> 可跳回上一处差异），现在光标应该在 apples 上了。接着运行 <code>:diffput</code>。此时，这两个文件都是 apples 了。</p><p align="center">  <img alt="Finding files in FZF" width="900" height="auto" src="images/diffing-apples.png"></p><p>如果您想从另一个缓冲区（orange juice，<code>file2.txt</code>）传输文本来替代当前缓冲区（apple juice，<code>file1.txt</code>），让您的光标仍然位于 <code>file1.txt</code> 的窗口中，首先使用 <code>]c</code> 跳转至下一处差异，此时光标应该在 apple juice 上。接着运行 <code>:diffget</code> 获取另一个缓冲区的 orange juice 来替代当前缓冲区中的 apple juice。</p><p><code>:diffput</code> 将文本从当前缓冲区 <em>输出</em> 到另一个缓冲区。<code>:diffget</code> 从另一个缓冲区 <em>获取</em> 文本到当前缓冲区。</p><p>如果有多个缓冲区，可以运行 <code>:diffput fileN.txt</code> 和 <code>:diffget fileN.txt</code> 来指定目标缓冲区 fileN。</p><h2 id="使用-Vim-作为合并工具"><a href="#使用-Vim-作为合并工具" class="headerlink" title="使用 Vim 作为合并工具"></a>使用 Vim 作为合并工具</h2><blockquote><p>“我非常喜欢解决合并冲突。” ——佚名</p></blockquote><p>我不知道有谁喜欢解决合并冲突，但总之，合并冲突是无法避免的。在本节中，您将学习如何利用 Vim 作为解决合并冲突的工具。</p><p>首先，运行下列命令来将默认合并工具更改为 <code>vimdiff</code>：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git config merge.tool vimdiff<br>git config merge.conflictstyle diff3<br>git config mergetool.prompt <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>或者您也可以直接修改 <code>~/.gitconfig</code>（默认情况下，它应该处于根目录中，但您的可能在不同的位置）。上面的命令应该会将您的 <code>gitconfig</code> 改成如下设置的样子，如果您还没有运行上面的命令，您也可以手动更改您的 gitconfig。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[core]</span><br>  <span class="hljs-attr">editor</span> = vim<br><span class="hljs-section">[merge]</span><br>  <span class="hljs-attr">tool</span> = vimdiff<br>  <span class="hljs-attr">conflictstyle</span> = diff3<br><span class="hljs-section">[difftool]</span><br>  <span class="hljs-attr">prompt</span> = <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>让我们创建一个假的合并冲突来测试一下。首先创建一个目录 <code>/food</code>，并初始化 git 仓库：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">git <span class="hljs-keyword">init</span><br></code></pre></td></tr></table></figure><p>添加 <code>breakfast.txt</code> 文件，内容为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pancakes</span><br><span class="hljs-attribute">waffles</span><br><span class="hljs-attribute">oranges</span><br></code></pre></td></tr></table></figure><p>添加文件并提交它：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;Initial breakfast commit&quot;<br></code></pre></td></tr></table></figure><p>接着，创建一个新分支 apples：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">git</span> checkout -<span class="hljs-keyword">b</span> apples<br></code></pre></td></tr></table></figure><p>更改 <code>breakfast.txt</code> 文件为：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pancakes</span><br><span class="hljs-attribute">waffles</span><br><span class="hljs-attribute">apples</span><br></code></pre></td></tr></table></figure><p>保存文件，添加并提交更改：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;Apples not oranges&quot;<br></code></pre></td></tr></table></figure><p>真棒！现在 master 分支有 oranges，而 apples 分支有 apples。接着回到 master 分支：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>在 <code>breakfast.txt</code> 文件中，您应该能看到原来的文本 oranges。接着将它改成 grapes，因为它是现在的应季水果：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pancakes</span><br><span class="hljs-attribute">waffles</span><br><span class="hljs-attribute">grapes</span><br></code></pre></td></tr></table></figure><p>保存、添加、提交：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">add</span> .<br>git <span class="hljs-keyword">commit</span> -m &quot;Grapes not oranges&quot;<br></code></pre></td></tr></table></figure><p>嚯！这么多步骤！现在准备要将 apples 分支合并进 master 分支了：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos">git <span class="hljs-keyword">merge</span> apples<br></code></pre></td></tr></table></figure><p>您应该会看到如下错误：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Auto-merging breakfast.txt<br><span class="hljs-keyword">CONFLICT</span> (content): Merge <span class="hljs-keyword">conflict</span> <span class="hljs-keyword">in</span> breakfast.txt<br>Automatic merge failed; fix conflicts <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">commit</span> the result.<br></code></pre></td></tr></table></figure><p>没错，一个冲突！现在一起来用一下新配置的 <code>mergetool</code> 来解决冲突吧！运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git mergetool</span><br></code></pre></td></tr></table></figure><p align="center">  <img alt="Three-way mergetool with Vim" width="900" height="auto" src="images/mergetool-initial.png"></p><p>Vim 显示了四个窗口。注意一下顶部三个：</p><ul><li><code>LOCAL</code> 包含了 <code>grapes</code>。这是“本地”中的变化，也是您要合并的内容。</li><li><code>BASE</code> 包含了 <code>oranges</code>。这是 <code>LOCAL</code> 和 <code>REMOTE</code> 的共同祖先，用于比较它们之间的分歧。</li><li><code>REMOTE</code> 包含了 <code>apples</code>。这是要被合并的内容。</li></ul><p>底部窗口（也即第四个窗口），您能看到：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">pancakes<br>waffles<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD<br>grapes<br>||||||| db63958<br><span class="hljs-section">oranges</span><br><span class="hljs-section">=======</span><br>apples<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt; apples<br></code></pre></td></tr></table></figure><p>第四个窗口包含了合并冲突文本。有了这步设置，就能更轻松看到哪个环境发生了什么变化。您可以同时查看 <code>LOCAL</code>、<code>BASE</code> 和 <code>REMOTE</code> 的内容。</p><p>您的光标应该在第四个窗口的高亮区域。再运行 <code>:diffget LOCAL</code>，就可以<em>获取</em>来自 <code>LOCAL</code> 的改变（grapes）。同样，运行 <code>:diffget BASE</code> 可以获取来自 <code>BASE</code> 的改变（oranges），而运行 <code>:diffget REMOTE</code> 可以获取来自 <code>REMOTE</code> 的改变（apples）。</p><p>在这个例子中，我们试着获取来自 <code>LOCAL</code> 的改变。运行 <code>:diffget LO</code>（<code>LOCAL</code> 的简写），第四个窗口变成了 grapes。完成后，就可以保存并退出所有文件（<code>:wqall</code>）了。还不错吧？</p><p>稍加留意您会发现，现在多了一个 <code>breakfast.txt.orig</code> 文件。这是 Git 防止事与愿违而创建的备份文件。如果您不希望 Git 在合并期间创建备份文件，可以运行：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git config --global mergetool.keepBackup <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="在-Vim-中使用-Git"><a href="#在-Vim-中使用-Git" class="headerlink" title="在 Vim 中使用 Git"></a>在 Vim 中使用 Git</h2><p>Vim 本身没有集成 Git，要在 Vim 中执行 Git 命令，一种方法是在命令行模式中使用 <code>!</code> 叹号运算符。</p><p>使用 <code>!</code> 可以运行任何 Git 命令：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">:!git status<br>:!git commit<br>:!git diff<br>:!git push origin master<br></code></pre></td></tr></table></figure><p>您还可以使用 Vim 的特殊字符 <code>%</code> (当前缓冲区) 或 <code>#</code> (其他缓冲区)：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">:!git <span class="hljs-built_in">add</span> %         <span class="hljs-comment">&quot; git add current file</span><br>:!git checkout #    <span class="hljs-comment">&quot; git checkout the other file</span><br></code></pre></td></tr></table></figure><p>这里有一个Vim技巧，您可以用来添加不同Vim窗口中的多个文件，运行：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">windo !git add <span class="hljs-comment">%</span><br></code></pre></td></tr></table></figure><p>然后提交：</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">:!git commit <span class="hljs-string">&quot;添加了Vim窗口中的所有文件，酷&quot;</span><br></code></pre></td></tr></table></figure><p><code>windo</code>命令是VIm的 “do” 命令其中之一，类似于您前面看到的 <code>argdo</code> 。<code>windo</code> 将命令执行在每一个窗口中。</p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>这里有很多提供git支持的Vim插件。以下是 Vim 中较流行的 Git 相关插件列表（您读到这篇文章时可能又有更多）：</p><ul><li><a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a></li><li><a href="https://github.com/mhinz/vim-signify">vim-signify</a></li><li><a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a></li><li><a href="https://github.com/junegunn/gv.vim">gv.vim</a></li><li><a href="https://github.com/jreybert/vimagit">vimagit</a></li><li><a href="https://github.com/sodapopcan/vim-twiggy">vim-twiggy</a></li><li><a href="https://github.com/tpope/vim-rhubarb">rhubarb</a></li></ul><p>其中最流行的是 vim-fugitive。本章的剩余部分，我将使用此插件来介绍几个 git 工作流。</p><h2 id="Vim-Fugitive"><a href="#Vim-Fugitive" class="headerlink" title="Vim-Fugitive"></a>Vim-Fugitive</h2><p>vim-fugitive 插件允许您在不离开 Vim 编辑器的情况下运行 git 命令行界面。您会发现，有些命令在 Vim 内部执行时会更好。</p><p>开始前，请先使用 Vim 插件管理器（<a href="https://github.com/junegunn/vim-plug">vim-plug</a>、<a href="https://github.com/VundleVim/Vundle.vim">vundle</a>、<a href="https://github.com/Shougo/dein.vim">dein.vim</a> 等）安装 vim-fugitive。</p><h2 id="Git-Status"><a href="#Git-Status" class="headerlink" title="Git Status"></a>Git Status</h2><p>当您不带参数地运行 <code>:Git</code> 命令时，vim-fugitive 将显示一个 git 概要窗口，它显示了未跟踪、未暂存和已暂存的文件。在此 “<code>git status</code>” 模式下，您可以做一些操作：</p><ul><li><code>Ctrl-n</code> &#x2F; <code>Ctrl-p</code> 转到下一个 &#x2F; 上一个文件。</li><li><code>-</code> 暂存或取消暂存光标处的文件。</li><li><code>s</code> 暂存光标处的文件。</li><li><code>u</code> 取消暂存光标处的文件。</li><li><code>&gt;</code> &#x2F; <code>&lt;</code> 内联显示或隐藏光标处文件的差异变化。</li></ul><p align="center">  <img alt="Finding files in FZF" width="900" height="auto" src="images/fugitive-git.png"></p><p>查阅 <code>:h fugitive-staging-maps</code> 可获得更多信息。</p><h2 id="Git-Blame"><a href="#Git-Blame" class="headerlink" title="Git Blame"></a>Git Blame</h2><p>在当前文件运行 <code>:Git blame</code> 命令，vim-fugitive 可以显示一个拆分的问责窗口。这有助于追踪那些 BUG 是谁写的，接着就可以冲他&#x2F;她怒吼（开个玩笑）。</p><p>在  <code>&quot;git blame&quot;</code> 模式下您可以做：</p><ul><li><code>q</code> 关闭问责窗口。</li><li><code>A</code> 调整作者列大小。</li><li><code>C</code> 调整提交列大小。</li><li><code>D</code> 调整日期&#x2F;时间列大小。</li></ul><p>查阅 <code>:h :Git_blame</code> 可获得更多信息。</p><p align="center">  <img alt="Finding files in FZF" width="900" height="auto" src="images/fugitive-git-blame.png"></p><h2 id="Gdiffsplit"><a href="#Gdiffsplit" class="headerlink" title="Gdiffsplit"></a>Gdiffsplit</h2><p>当您运行 <code>:Gdiffsplit</code> 命令后，vim-fugitive 会执行 <code>vimdiff</code>，比对索引或工作树中的版本与当前文件最新更改的区别。如果运行 <code>:Gdiffsplit &lt;commit&gt;</code>，vim-fugitive 则会根据 <code>&lt;commit&gt;</code> 中的版本来执行 <code>vimdiff</code>。</p><p align="center">  <img alt="Finding files in FZF" width="900" height="auto" src="images/fugitive-gdiffsplit.png"></p><p>由于您处于 <code>vimdiff</code> 模式中，因此您可以使用 <code>:diffput</code> 和 <code>:diffget</code> 来 <em>获取</em> 或 <em>输出</em> 差异。</p><h2 id="Gwrite-和-Gread"><a href="#Gwrite-和-Gread" class="headerlink" title="Gwrite 和 Gread"></a>Gwrite 和 Gread</h2><p>当您在更改文件后运行 <code>:Gwrite</code> 命令，vim-fugitive 将暂存更改，就像运行 <code>git add &lt;current-file&gt;</code> 一样。</p><p>当您在更改文件后运行 <code>:Gread</code> 命令，vim-fugitive 会将文件还原至更改前的状态，就像运行 <code>git checkout &lt;current-file&gt;</code> 一样。使用 <code>:Gread</code> 还有一个好处是操作可撤销。如果在运行 <code>:Gread</code> 后您改变主意，想要保留原来的更改，您只需要撤消（<code>u</code>），Vim 将撤回 <code>:Gread</code> 操作。要换作是在命令行中运行 <code>git checkout &lt;current-file&gt;</code>，就完成不了这种操作了。</p><h2 id="Gclog"><a href="#Gclog" class="headerlink" title="Gclog"></a>Gclog</h2><p>当您运行 <code>:Gclog</code> 命令时，vim-fugitive 将显示提交历史记录，就像运行 <code>git log</code> 命令一样。Vim-fugitive 使用 Vim 的 quickfix 来完成此任务，因此您可以使用 <code>:cnext</code> 和 <code>:cprevious</code> 来遍历下一个或上一个日志信息。您还可以使用 <code>:copen</code> 和 <code>:cclose</code> 打开或关闭日志列表。</p><p align="center">  <img alt="Finding files in FZF" width="900" height="auto" src="images/fugitive-git-log.png"></p><p>在 <code>&quot;git log&quot;</code> 模式中，您可以做两件事：</p><ul><li>查看树。</li><li>访问父级（上一个提交）。</li></ul><p>您可以像 <code>git log</code> 命令一样，传递参数给 <code>:Gclog</code> 命令。如果您项目的提交历史记录很长，只想看最后三个提交，则可以运行 <code>:Gclog -3</code>。如果需要根据提交日期来筛选记录，可以运行类似 <code>:Gclog --after=&quot;January 1&quot; --before=&quot;March 14&quot;</code> 的命令。</p><h2 id="Vim-Fugitive-的更多功能"><a href="#Vim-Fugitive-的更多功能" class="headerlink" title="Vim-Fugitive 的更多功能"></a>Vim-Fugitive 的更多功能</h2><p>以上只是寥寥几个 vim-fugitive 功能的例子，您可以查阅 <code>:h fugitive.txt</code> 来了解更多有关 vim-fugitive 的信息。大多数流行的 git 命令可能都有 vim-fugitive 的优化版本，您只需在文档中查找它们。</p><p>如果您处于 vim-fugitive 的“特殊模式”（如 <code>:Git</code> 或 <code>:Git blame</code> 模式）中，按下 <code>g?</code> 可以了解当前有哪些可用的快捷键，Vim-fugitive 将为您所处的模式显示相应的 <code>:help</code> 窗口。棒极了！</p><h2 id="聪明地学习-Vim-和-Git"><a href="#聪明地学习-Vim-和-Git" class="headerlink" title="聪明地学习 Vim 和 Git"></a>聪明地学习 Vim 和 Git</h2><p>每个人都有不同的 git 工作流，可能 vim-fugitive 非常合适您的工作流（也可能不适合）。总之，我强烈建议您试试上面列出的所有插件。可能还有一些其他的我没有列出来，都可以去试一试。</p><p>要让Vim-git的集成工作得更好，一个显而易见的办法就是去深入了解git。Git 本身是一个很庞大的主题，我只向您展示了它其中很小的一部分。好了，接下来谈谈如何使用 Vim 编译您的代码。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-编译</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch19_compile/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch19_compile/</url>
    
    <content type="html"><![CDATA[<h1 id="第19章-编译"><a href="#第19章-编译" class="headerlink" title="第19章 编译"></a>第19章 编译</h1><p>编译是许多编程语言的重要主题。在本章中，您将学习如何在 Vim 中编译。此外，您将看到如何利用好 Vim 的 <code>:make</code> 命令。</p><h2 id="从命令行编译"><a href="#从命令行编译" class="headerlink" title="从命令行编译"></a>从命令行编译</h2><p>您可以使用叹号运算符（<code>!</code>）进行编译。如果您需要使用 <code>g++</code> 来编译 <code>.cpp</code> 文件，可以运行：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">:!g</span><span class="hljs-literal">++</span> <span class="hljs-comment">hello</span><span class="hljs-string">.</span><span class="hljs-comment">cpp</span> <span class="hljs-literal">-</span><span class="hljs-comment">o hello</span><br></code></pre></td></tr></table></figure><p>但要每次手动指定文件名和输出文件名会非常繁琐和容易出错。而 makefile 是条可行之路。</p><h2 id="Make命令"><a href="#Make命令" class="headerlink" title="Make命令"></a>Make命令</h2><p>Vim 有运行 makefile 的 <code>:make</code> 命令。当您运行它时，Vim 会在当前目录查找 makefile 并执行它。</p><p>在当前目录创建一个文件名为 <code>makefile</code> ，然后添加下列内容：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">all</span>:<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello all&quot;</span><br>foo:<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello foo&quot;</span><br>list_pls:<br><span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure><p>在 Vim 中运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:make</span><br></code></pre></td></tr></table></figure><p>Vim 执行它的方式与从终端运行它的方式相同。<code>:make</code> 命令也接受终端中 <code>make</code> 命令的参数。运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">make</span> foo<br><span class="hljs-string">&quot; Outputs &quot;</span>Hello foo<span class="hljs-comment">&quot;</span><br><br>:<span class="hljs-keyword">make</span> list_pls<br><span class="hljs-comment">&quot; Outputs the ls command result</span><br></code></pre></td></tr></table></figure><p>如果命令执行异常，<code>:make</code> 命令将使用 Vim 的 <code>quickfix</code> 来存储这些错误。现在试着运行一个不存在的目标：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:make</span> dontexist<br></code></pre></td></tr></table></figure><p>您应该会看到该命令执行错误。运行 <code>quickfix</code> 命令 <code>:copen</code> 可以打开 <code>quickfix</code> 窗口来查看该错误：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">|| <span class="hljs-built_in">make</span>: *** No rule to <span class="hljs-built_in">make</span> target `dontexist&#x27;.  <span class="hljs-keyword">Stop</span>.<br></code></pre></td></tr></table></figure><h2 id="使用-Make-编译"><a href="#使用-Make-编译" class="headerlink" title="使用 Make 编译"></a>使用 Make 编译</h2><p>让我们使用 makefile 来编译一个基本的 <code>.cpp</code> 程序。首先创建一个 <code>hello.cpp</code> 文件：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello!\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，更新 <code>makefile</code> 来编译和运行 <code>.cpp</code> 文件：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">all:</span><br>echo <span class="hljs-string">&quot;build, run&quot;</span><br><span class="hljs-symbol">build:</span><br>g++ hello.cpp -o hello<br><span class="hljs-symbol">run:</span><br>./hello<br></code></pre></td></tr></table></figure><p>现在运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:make</span> build<br></code></pre></td></tr></table></figure><p><code>g++</code> 将编译 <code>./hello.cpp</code> 并且生成 <code>./hello</code>。接着运行：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">:<span class="hljs-built_in">make</span> <span class="hljs-keyword">run</span><br></code></pre></td></tr></table></figure><p>您应该会看到终端上打印出了 <code>&quot;Hello!&quot;</code>。</p><h2 id="不同的Make程序"><a href="#不同的Make程序" class="headerlink" title="不同的Make程序"></a>不同的Make程序</h2><p>当您运行 <code>:make</code> 时，Vim 实际上会执行 <code>makeprg</code> 选项所设置的任何命令，您可以运行 <code>:set makeprg?</code> 来查看它：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">makeprg</span><span class="hljs-operator">=</span>make<br></code></pre></td></tr></table></figure><p><code>:make</code> 的默认命令是外部的 <code>make</code> 命令。若想修改 <code>:make</code> 命令，使每次运行它时执行 <code>g++ &lt;your-file-name&gt;</code>，请运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">makeprg</span>=g++\ %<br></code></pre></td></tr></table></figure><p><code>\</code> 用于转义 <code>g++</code> 后的空格。Vim 中 <code>%</code> 符号代表当前文件。因此，<code>g++\ %</code> 命令等于运行 <code>g++ hello.cpp</code>。</p><p>转到 <code>./hello.cpp</code> 然后运行 <code>:make</code>，Vim 将编译 <code>hello.cpp</code> 并输出 <code>a.out</code>（因为您没有指定输出）。让我们重构一下，使用去掉扩展名的原始文件名来命名编译后的输出。运行下面的命令（或将它们添加到vimrc）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">makeprg</span>=g++\ %\ -o\ %&lt;<br></code></pre></td></tr></table></figure><p>上面的命令分解如下：</p><ul><li><code>g++\\ %</code> 如上所述，等同于运行 <code>g++ &lt;your-file&gt;</code>。</li><li><code>-o</code> 输出选项。</li><li><code>%&lt;</code> 在 Vim 中代表了没有扩展名的当前文件名（如 <code>hello.cpp</code> 变成 <code>hello</code>）。</li></ul><p>当您在 <code>./hello.cpp</code> 中运行 <code>:make</code> 时，它将编译为 <code>./hello</code>。要在 <code>./hello.cpp</code> 中快速地执行 <code>./hello</code>，可以运行 <code>:!./%&lt;</code>。同样，它等同于运行 <code>:!./&lt;无后缀的当前文件名&gt;</code>。</p><p>查阅 <code>:h :compiler</code> 和 <code>:h write-compiler-plugin</code> 可以了解更多信息。</p><h2 id="保存时自动编译"><a href="#保存时自动编译" class="headerlink" title="保存时自动编译"></a>保存时自动编译</h2><p>有了自动化编译，您可以让生活更加轻松。回想一下，您可以使用 Vim 的 <code>autocmd</code> 来根据某些事件自动执行操作。例如，要自动在每次保存后编译 <code>.cpp</code> 文件，您可以将下面内容添加到vimrc：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">autocmd</span> BufWritePost *.cpp <span class="hljs-keyword">make</span><br></code></pre></td></tr></table></figure><p>现在您每次保存 <code>.cpp</code> 文件后，Vim 都将自动执行 <code>make</code> 命令。</p><h2 id="切换编译器"><a href="#切换编译器" class="headerlink" title="切换编译器"></a>切换编译器</h2><p>Vim 有一个 <code>:compiler</code> 命令可以快速切换编译器。您的 Vim 可能附带了一些预构建的编译配置。要检查您拥有哪些编译器，请运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:e <span class="hljs-variable">$VIMRUNTIME</span><span class="hljs-regexp">/compilers/</span>&lt;tab&gt;<br></code></pre></td></tr></table></figure><p>您应该会看到一个不同编程语言的编译器列表。</p><p>若要使用 <code>:compiler</code> 命令，假设您有一个 ruby 文件 <code>hello.rb</code>，内容是：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">puts</span> <span class="hljs-string">&quot;Hello ruby&quot;</span><br></code></pre></td></tr></table></figure><p>回想一下，如果运行 <code>:make</code>，Vim 将执行赋值给 <code>makeprg</code> 的任何命令（默认是 <code>make</code>）。如果您运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">compiler</span> <span class="hljs-keyword">ruby</span><br></code></pre></td></tr></table></figure><p>Vim 执行 <code>$VIMRUNTIME/compiler/ruby.vim</code> 脚本，并将 <code>makeprg</code> 更改为使用 <code>ruby</code> 命令。现在如果您运行 <code>:set makeprg?</code>，它会显示 <code>makeprg=ruby</code>（这取决于您 <code>$VIMRUNTIME/compiler/ruby.vim</code> 里的内容，如果您有其他自定义的 ruby 编译器，您的结果可能会有不同）。<code>:compiler &lt;your-lang&gt;</code> 命令允许您快速切换至其他编译器。如果您的项目使用多种语言，这会非常有用。</p><p>您不必使用 <code>:compiler</code> 或 <code>makeprg</code> 来编译程序。您可以运行测试脚本、分析文件、发送信号或任何您想要的内容。</p><h2 id="创建自定义编译器"><a href="#创建自定义编译器" class="headerlink" title="创建自定义编译器"></a>创建自定义编译器</h2><p>让我们来创建一个简单的 Typescript 编译器。先在您的设备上安装 Typescript（<code>npm install -g typescript</code>），安装完后您将有 <code>tsc</code> 命令。如果您之前没有尝试过 typescript，<code>tsc</code> 将 Typescript 文件编译成 Javascript 文件。假设您有一个 <code>hello.ts</code> 文件：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const hello <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-comment">;</span><br>console.log(hello)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>运行 <code>tsc hello.ts</code> 后，它将被编译成 <code>hello.js</code>。然而，如果您的 <code>hello.ts</code> 文件中有如下内容：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">const hello <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-attribute">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello again&quot;</span><span class="hljs-comment">;</span><br>console.log(hello)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>这会抛出错误，因为不能更改一个 <code>const</code> 变量。运行 <code>tsc hello.ts</code> 的错误如下：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hello.ts:<span class="hljs-number">2</span>:<span class="hljs-number">1</span> - <span class="hljs-keyword">error</span> TS2588: Cannot assign <span class="hljs-keyword">to</span> &#x27;person&#x27; because <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> a <span class="hljs-built_in">constant</span>.<br><br><span class="hljs-number">2</span> person = <span class="hljs-string">&quot;hello again&quot;</span>;<br>  ~~~~~~<br><br><br>Found <span class="hljs-number">1</span> <span class="hljs-keyword">error</span>.<br></code></pre></td></tr></table></figure><p>要创建一个简单的 Typescript 编译器，请在您的 <code>~/.vim/</code> 目录中新添加一个 <code>compiler</code> 目录（即 <code>~/.vim/compiler/</code>），接着创建 <code>typescript.vim</code> 文件（即 <code>~/.vim/compiler/typescript.vim</code>），并添加如下内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">CompilerSet <span class="hljs-attribute">makeprg</span>=tsc<br>CompilerSet <span class="hljs-attribute">errorformat</span>=%f:\ %m<br></code></pre></td></tr></table></figure><p>第一行将 <code>makeprg</code> 设置为运行 <code>tsc</code> 命令。第二行将错误格式设置为显示文件（<code>%f</code>），后跟冒号（<code>:</code>）和转义的空格（<code>\ </code>），最后是错误消息（<code>%m</code>）。查阅 <code>:h errorformat</code> 可了解更多关于错误格式的信息。</p><p>您还可以阅读一些预制的编译器，看看它们是如何实现的。输入 <code>:e $VIMRUNTIME/compiler/&lt;some-language&gt;.vim</code> 查看。</p><p>有些插件可能会干扰 Typescript 文件，可以使用 <code>--noplugin</code> 标志以零插件的形式打开<code>hello.ts</code> 文件：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> --noplugin hello.<span class="hljs-keyword">ts</span><br></code></pre></td></tr></table></figure><p>检查 <code>makeprg</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> makeprg?<br></code></pre></td></tr></table></figure><p>它应该会显示默认的 <code>make</code> 程序。要使用新的 Typescript 编译器，请运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:compiler</span> typescript<br></code></pre></td></tr></table></figure><p>当您运行 <code>:set makeprg?</code> 时，它应该会显示 <code>tsc</code> 了。我们来测试一下：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:make</span> %<br></code></pre></td></tr></table></figure><p>回想一下，<code>%</code> 代表当前文件。看看您的 Typescript 编译器是否如预期一样工作。运行 <code>:copen</code> 可以查看错误列表。</p><h2 id="异步编译器"><a href="#异步编译器" class="headerlink" title="异步编译器"></a>异步编译器</h2><p>有时编译可能需要很长时间。在等待编译时，您不会想眼睁睁盯着已冻结的 Vim 的。如果可以异步编译，就可以在编译期间继续使用 Vim 了，岂不美哉？</p><p>幸运的是，有插件来运行异步进程。有两个比较好的是：</p><ul><li><a href="https://github.com/tpope/vim-dispatch">vim-dispatch</a></li><li><a href="https://github.com/skywind3000/asyncrun.vim">asyncrun.vim</a></li></ul><p>在这一章中，我将介绍 vim-dispatch，但我强烈建议您尝试上述列表中所有插件。</p><p><em>Vim 和 NeoVim 实际上都支持异步作业，但它们超出了本章的范围。如果您好奇，可以查阅 <code>:h job-channel-overview.txt</code>。</em></p><h2 id="插件：Vim-dispatch"><a href="#插件：Vim-dispatch" class="headerlink" title="插件：Vim-dispatch"></a>插件：Vim-dispatch</h2><p>Vim-dispatch 有几个命令，最主要的两个是 <code>:Make</code> 和 <code>:Dispatch</code>。</p><h3 id="异步Make"><a href="#异步Make" class="headerlink" title="异步Make"></a>异步Make</h3><p>Vim-dispatch 的 <code>:Make</code> 命令与 Vim 的 <code>:make</code> 相似，但它以异步方式运行。如果您正处于 Javascript 项目中，并且需要运行 <code>npm t</code>，可以将 <code>makeprg</code> 设置为：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">makeprg</span>=npm\\ t<br></code></pre></td></tr></table></figure><p>如果运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:make</span><br></code></pre></td></tr></table></figure><p>Vim 将执行 <code>npm t</code>。但同时，您只能盯着冻结了的屏幕。有了 vim-dispatch，您只需要运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:Make</span><br></code></pre></td></tr></table></figure><p>Vim 将启用后台进程异步运行 <code>npm t</code>，同时您还能在 Vim 中继续编辑您的文本。棒极了！</p><h3 id="异步调度（Dispatch）"><a href="#异步调度（Dispatch）" class="headerlink" title="异步调度（Dispatch）"></a>异步调度（Dispatch）</h3><p><code>:Dispatch</code> 命令的工作方式和 <code>:compiler</code> 及 <code>:!</code> 类似，它可以在Vim中运行任意外部命令。</p><p>假设您在 ruby spec 文件中，需要执行测试，可以运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:Dispatch</span> rspec %<br></code></pre></td></tr></table></figure><p>Vim 将对当前文件异步运行 <code>rspec</code> 命令。</p><h3 id="自动调度"><a href="#自动调度" class="headerlink" title="自动调度"></a>自动调度</h3><p>Vim-dispatch 有一个缓冲区变量<code>b:dispatch</code>，您可以配置它来自动执行特定命令，您可以利用 <code>autocmd</code>和它一起工作。如果在您的 vimrc 中添加如下内容：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufEnter *_spec.rb <span class="hljs-keyword">let</span> <span class="hljs-variable">b:dispatch</span> = <span class="hljs-string">&#x27;bundle exec rspec %&#x27;</span><br></code></pre></td></tr></table></figure><p>现在每当您进入（<code>BufEnter</code>）一个以 <code>_spec.rb</code> 结尾的文件，运行<code>:Dispatch</code> 将自动执行 <code>bundle exec rspec &lt;your-current-ruby-spec-file&gt;</code>。</p><h2 id="聪明地学习编译"><a href="#聪明地学习编译" class="headerlink" title="聪明地学习编译"></a>聪明地学习编译</h2><p>在本章中，您了解到可以使用 <code>make</code> 和 <code>compiler</code> 命令从Vim内部异步运行 <em>任何</em> 进程，以完善您的编程工作流程。Vim 拥有通过其他程序来扩展自身的能力，这使其变得强大。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-多文件操作</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch21_multiple_file_operations/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch21_multiple_file_operations/</url>
    
    <content type="html"><![CDATA[<h1 id="第21章-多文件操作"><a href="#第21章-多文件操作" class="headerlink" title="第21章 多文件操作"></a>第21章 多文件操作</h1><p>多文件编辑更新是一个值得掌握、非常有用的编辑工具。前面您已经学会了如何使用 <code>cfdo</code> 命令在多个文本中进行更新。本章，您将学到如何在Vim中进行多文件编辑的更多不同方法。</p><h2 id="在多个文件中执行命令的几种方法"><a href="#在多个文件中执行命令的几种方法" class="headerlink" title="在多个文件中执行命令的几种方法"></a>在多个文件中执行命令的几种方法</h2><p>要在多个文件中执行命令，Vim有8种方法：</p><ul><li>参数列表 (<code>argdo</code>)</li><li>缓冲区列表 (<code>bufdo</code>)</li><li>窗口列表 (<code>windo</code>)</li><li>tab 列表(<code>tabdo</code>)</li><li>快速修复列表 (<code>cdo</code>)</li><li>文件方式的快速修复列表 (<code>cfdo</code>)</li><li>位置列表 (<code>ldo</code>)</li><li>文件方式的位置列表 (<code>lfdo</code>)</li></ul><p>实际上，大部分时间您可能只会用到1种或2种（就我个人而言，我使用 <code>cdo</code> 和 <code>argdo</code>比其他的多得多），但了解所有可行方法还是很有用的，这样您就可以选择一个最符合您个人编辑风格的方法。</p><p>学习所有8个命令可能听起来让人有点打退堂鼓。但实际上，这些命令工作方式很相似。学习了其中一个后，再学习剩余的将容易的多。它们的运行方式都大体相同：分别创建一个列表(列表中的元素根据命令有所不同)，然后向列表传递一个您想执行的命令。</p><h2 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h2><p>参数列表是最基础的列表。它创建一个文件列表。要想为 file1, file2, file3创建文件列表，您可以执行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:args</span> file1 file2 file3<br></code></pre></td></tr></table></figure><p>您也可以传递一个通配符（<code>*</code>），所以如果您想为当前目录下所有的 <code>.js</code> 文件创建一个列表，运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:args</span> *.js<br></code></pre></td></tr></table></figure><p>如果您想为当前目录下所有以 “a” 开头的Javascript文件创建列表，运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:args</span> a*.js<br></code></pre></td></tr></table></figure><p>（<code>*</code>）通配符匹配当前目录下的1个或多个任意文件名中的字符。但如果您想在某个目录下进行递归搜索怎么办呢？您可以使用双通配符（<code>**</code>）。要得到您当前位置下所有子目录中的Javascript文件，运行：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">:args <span class="hljs-strong">**/*</span>.js<br></code></pre></td></tr></table></figure><p>您运行了 <code>args</code> 命令后，您的当前buffer将会切换到列表中的第一个文件。运行 <code>:args</code>可以查看您刚才创建的文件列表。当您创建好了您的列表后，您就可以遍历它们了。<code>:first</code> 将让您跳至列表中的第一个文件。<code>:last</code> 将跳到最后一个文件。运行<code>:next</code>可以在列表中一次向前移动一个文件。运行 <code>:prev</code>可以在列表中一次向后移动一个文件。运行<code>:wnext</code> 和 <code>:wprev</code>命令，在向前&#x2F;向后移动文件的同时还会保存修改。查阅 <code>: arglist</code> 了解更多导航命令。</p><p>参数列表在定位某个特定类型的文件或少量文件时特别有用。假如您需要将所有 <code>yml</code> 文件中的<code>donut</code> 更新为 <code>pancake</code>。运行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">args</span> **/*.yml<br>:<span class="hljs-keyword">argdo</span> %s/donut/pancake/g | <span class="hljs-keyword">update</span><br><br></code></pre></td></tr></table></figure><p>注意如果您再次执行 <code>args</code> 命令，它将覆盖先前的列表。比如，如果您先前运行了：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:args</span> file1 file2 file3<br></code></pre></td></tr></table></figure><p>假设这些文件都是存在的，那么现在您的列表为 <code>file1</code>, <code>file2</code>,以及 <code>file3</code>。然后再运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:args</span> file4 file5<br></code></pre></td></tr></table></figure><p>您的初始列表 <code>file1</code>, <code>file2</code>, <code>file3</code>将被覆盖为 <code>file4</code>, <code>file5</code>。如果您的参数列表中已经有了 <code>file1</code>, <code>file2</code>, <code>file3</code> ，而您想将 <code>file4</code>, <code>file5</code> 添加到初始列表中，请使用 <code>:arga</code>命令。运行</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:arga</span> file4 file5<br></code></pre></td></tr></table></figure><p>现在您的列表为<code>file1</code>, <code>file2</code>, <code>file3</code>, <code>file4</code>, <code>file5</code>。</p><p>如果您运行 <code>:arga</code> 时没有给任何参数，Vim会添加当前buffer到参数列表中。例如，如果您的参数列表中已经有了 <code>file1</code>, <code>file2</code>, <code>file3</code>，而您当前buffer是 <code>file5</code>，运行 <code>:arga</code> 将添加 <code>file5</code> 到您的列表中。</p><p>在前面的命令（<code>:argdo %s/donut/pancake/g</code>）中您已经看到过了，当您创建好列表后就可以向它传递任意命令行命令。其他的一些示例：</p><ul><li>删除参数列表所有文件内包含 “dessert” 的行, 运行 <code>:argdo g/dessert/d</code>.</li><li>在参数列表每个文件中执行宏a(假设您已经在a中录好了一个宏)，运行 <code>:argdo norm @a</code>.</li><li>向参数列表所有文件的第一行插入”hello “+文件名 ，运行 <code>:argdo 0put=&#39;hello &#39; . @%</code>（译者注：在英文版中，原作者给出的命令是 <code>:argdo 0put=&#39;hello &#39; .. @:</code>，貌似这个命令有问题）。</li></ul><p>把所有工作完成后，别忘了使用 <code>:update</code> 命令保存(<code>:update</code>只会保存当前buffer，要保存列表所有文件的修改，请用 <code>:argdo update</code>)。</p><p>有时候您仅仅需要在参数列表的前n个文件执行某条命令。如果是这种情况，只需要向 <code>argdo</code> 命令传递一个地址就可以了。比如，要在列表的前3个文件执行替换命令，运行：<code>:1,3argdo %s/donut/pancake/g</code>。</p><h2 id="缓冲区列表"><a href="#缓冲区列表" class="headerlink" title="缓冲区列表"></a>缓冲区列表</h2><p>因为每次您创建新文件或打开文件时，Vim将它保存在一个buffer中（除非您显式地删除它），所以当您编辑新文件时，缓冲区列表就有组织地被创建了。如果您已经打开了3个文件：<code>file1.rb file2.rb file3.rb</code>，您的缓冲区列表就已经有了3个元素。运行 <code>:buffers</code>（或者<code>:ls</code>、或<code>:files</code>）可以显示缓冲区列表。要想向前或向后遍历缓冲区列表，可以使用 <code>:bnext</code> <code>:bprev</code>。要想跳至列表中第一个或最后一个buffer，可使用 <code>:bfirst</code> 和 <code>:blast</code>。</p><p>另外，这里有一个和本章内容不相关，但是很酷的缓冲区技巧：如果您的缓冲区有大量的文件，您可以使用 <code>:ball</code> 显示所有缓冲区。<code>:ball</code> 命令默认使用水平分割窗口进行显示，如果想使用垂直分割的窗口显示，运行：<code>:vertical ball</code></p><p>回到本章主题。在缓冲区列表中执行某个操作的方法与参数列表操作非常相似。当您创建好缓冲区列表后，您只需要在您想执行的命令前用 <code>:bufdo</code> 代替 <code>:argdo</code>就可以了。例如，如果您想将缓冲区列表内每个文件中所有的 “donut” 替换为 “pancake”并保存修改，可以运行：<code>:bufdo %s/donut/pancake/g | update</code>。</p><h2 id="窗口列表和选项卡（Tab）列表"><a href="#窗口列表和选项卡（Tab）列表" class="headerlink" title="窗口列表和选项卡（Tab）列表"></a>窗口列表和选项卡（Tab）列表</h2><p>窗口列表、选项卡列表的操作和参数列表、缓冲区列表同样非常相似。唯一的区别在于它们的内容和语法。</p><p>窗口操作作用在每一个打开的窗口上，使用的命令是 <code>:windo</code>。选项卡（Tab）操作作用在每一个打开的选项卡上，使用的命令是 <code>:tabdo</code>。可以查询 <code>:h list-repeat</code>, <code>:h :windo</code>和<code>:h :tabdo</code>，了解更多信息。</p><p>比如，如果您打开了4个窗口（您可以使用 <code>Ctrl-w v</code>打开一个垂直分割的窗口，也可以使用 <code>Ctrl-w s</code>打开一个水平分割的窗口），然后您运行 <code>:windo 0put = &#39;hello&#39; . @%</code>，Vim将在所有打开的窗口的第一行输出 “hello”+文件名。</p><h2 id="快速修复列表"><a href="#快速修复列表" class="headerlink" title="快速修复列表"></a>快速修复列表</h2><p>在前面的章节中（第3章和第19章），我曾提到过快速修复（quickfix）。快速修复有很多作用，很多流行的插件都在使用快速修复提供的功能，因此值得花时间去理解它。</p><p>如果您是Vim新手，快速修复对于您可能是个新概念。回想以前您执行代码编译的时候，编译期间您可能遇到过错误，而这些错误都显示在一个特殊的窗口。这就是快速修复(quickfix)的由来。当您编译您的代码的时候，Vim会在快速修复窗口显示错误信息，您可以稍后去解决。许多现代语言已经不再需要进行显式地编译，但快速修复并没有被淘汰。现在，人们使用快速修复来做各种各样的事，比如显示虚拟终端的输入、存储搜索结果等。我们重点研究后者，存储搜索结果。</p><p>除编译命令外，某些特定的Vim命令也依赖快速修复接口。其中一种就是搜索命令，其使用过程中大量的使用了快速修复窗口，<code>:vimgrep</code> 和 <code>:grep</code> 都默认使用快速修复。</p><p>比如，如果您需要在所有的Javascript文件中递归地搜索 “donut”，您可以运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:vimgrep <span class="hljs-regexp">/donut/</span> **/*.js<br></code></pre></td></tr></table></figure><p>“donut”的搜索结果存储在快速修复窗口中。要查看快速修复窗口的结果，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:copen</span><br></code></pre></td></tr></table></figure><p>要关闭快速修复窗口，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:cclose</span><br></code></pre></td></tr></table></figure><p>在快速修复列表中向前或向后遍历，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:cnext</span><br><span class="hljs-symbol">:cprev</span><br></code></pre></td></tr></table></figure><p>跳至第一个或最后一个匹配的元素，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:cfirst</span><br><span class="hljs-symbol">:clast</span><br></code></pre></td></tr></table></figure><p>在前面我提到过，有两种快速修复命令：<code>cdo</code> 和 <code>cfdo</code> 。它们有什么区别？<code>cdo</code> 在修复列表中的每一个元素上执行命令，而 <code>cfdo</code> 在修复列表中的每一个文件上执行命令。</p><p>让我讲清楚一点，假设运行完上面的 <code>vimgrep</code> 命令后，您找到以下结果：</p><ul><li>1 result in <code>file1.js</code></li><li>10 results in <code>file2.js</code></li></ul><p>如果您运行 <code>:cfdo %s/donut/pancake/g</code>, 这个命令将会在 <code>file1.js</code> 和 <code>file2.js</code> 上分别有效地运行一次<code>%s/donut/pancake/g</code>. 它执行的次数与 <em>匹配结果中文件的数量</em> 相同。因为搜索结果中有2个文件，因此Vim在 <code>file1.js</code> 上运行一次替换命令，在 <code>file2.js</code> 上再运行一次替换命令。 尽管在第二个文件中有10个搜索结果，但 <code>cfdo</code> 只关注快速修复列表中有多少个文件。</p><p>而如果您运行 <code>:cdo %s/donut/pancake/g</code> ，这个命令将会在 <code>file1.js</code> 上有效运行一次，然后在 <code>file2.js</code> 上运行10次。它执行的次数与 <em>快速修复列表中元素的数量</em> 相同。因为在 <code>file1.js</code> 上找到1个匹配结果，在 <code>file2.js</code> 上找到10个匹配结果，因此它执行的总次数是11次。</p><p>由于您要在列表中运行的命令是 <code>%s/donut/pancake/g</code> ，所以使用 <code>cfdo</code>命令是比较合理的。而使用 <code>cdo</code> 是不合理的，因为它将在 <code>file2.js</code> 中运行10次 <code>%s/donut/pancake/g</code>命令（<code>%s</code>已经是一个针对整个文件的替换操作）。一个文件运行一次 <code>%s</code> 就足够了。如果您使用 <code>cdo</code>，则传给它的命令应当改为 <code>s/donut/pancake/g</code> 才是合理的。</p><p>那到底什么时候该用 <code>cfdo</code>？什么时候该用 <code>cdo</code>？    这应当想一想您要传递的命令的作用域，要看命令作用域是整个文件（比如 <code>:%s</code> 或 <code>:g</code>）？还是某一行（比如 <code>:s</code> 或 <code>:!</code>）？</p><h2 id="位置列表"><a href="#位置列表" class="headerlink" title="位置列表"></a>位置列表</h2><p>位置列表在某种意义上和快速修复列表很像。Vim也使用一个特殊的窗口来显示位置列表的信息。区别在于：您任何时候都只能有1个快速修复列表，而位置列表则是，有多少个窗口就可以有多少个位置列表。</p><p>假设您打开了两个窗口，其中一个窗口显示 <code>food.txt</code> ，而另一个显示 <code>drinks.txt</code>。在 <code>food.txt</code>里面，运行一个位置列表搜索命令 <code>:lvimgrep</code> （<code>:vimgrep</code>命令关于位置列表的一个变体）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:lvim <span class="hljs-regexp">/bagel/</span> **/*.md<br></code></pre></td></tr></table></figure><p>Vim将为 <code>food.txt</code>所在 <em>窗口</em>创建一个位置列表，用于存储所有的bagel搜索结果。用 <code>:lopen</code>命令可以查看位置列表。现在转到另一个窗口 <code>drinks.txt</code>，运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">:lvimgrep <span class="hljs-regexp">/milk/</span> **/*.md<br></code></pre></td></tr></table></figure><p>Vim将为 <code>drinks.txt</code>所在 <em>窗口</em>再创建一个 <em>单独</em>的位置列表，用于存储所有关于milk的搜索结果。</p><p>对于每个不同的窗口中您运行的位置命令，Vim都会单独创建一个位置列表。如果您有10个不同的窗口，您就可以有最多10个不同的位置列表。对比前面介绍的快速修复列表，快速修复列表任何时候都只能有1个。就算您有10个不同的窗口，您也只能有1个快速修复列表。</p><p>大多数位置列表命令都和快速修复列表命令相似，唯一不同就是位置列表命令有一个 <code>l-</code>前缀，比如： <code>:lvimgrep</code>, <code>:lgrep</code>, 还有 <code>:lmake</code>。在快速修复列表命令中与之对应的是: <code>:vimgrep</code>, <code>:grep</code>, 以及 <code>:make</code>。操作位置列表窗口的方式和快速修复窗口也很相似：<code>:lopen</code>, <code>:lclose</code>, <code>:lfirst</code>, <code>:llast</code>, <code>:lnext</code>, 还有<code>:lprev</code>，与之对应快速修复版本是：<code>:copen</code>, <code>:cclose</code>, <code>:cfirst</code>, <code>:clast</code>, <code>:cnext</code>, and <code>:cprev</code>。</p><p>两个位置列表参数的多文件操作命令也和快速修复列表的多文件操作命令也很类似：<code>:ldo</code> 和 <code>:lfdo</code>。<code>:ldo</code> 对位置列表中每一个元素执行命令，而 <code>:lfdo</code> 对位置列表中每一个文件执行命令。可以查阅 <code>:h location-list</code>了解更多信息。</p><h2 id="在Vim中运行多文件操作命令"><a href="#在Vim中运行多文件操作命令" class="headerlink" title="在Vim中运行多文件操作命令"></a>在Vim中运行多文件操作命令</h2><p>在编辑工作中，知道如何进行多文件操作是一个非常有用的技能。当您需要在多个文件中改变一个变量名字的时候，您肯定想一个操作就全部搞定。Vim有8种不同的方法支持你完成这个事。</p><p>事实上，您可能并不会用到所有8种方法。您会慢慢倾向于其中1中或2种。当您刚开始时，选择其中1个（我个人建议从参数列表开始 <code>:argdo</code>）并掌握它。当您习惯了其中1个，然后再学下一个。您将会发现，学习第二个、第三个、第四个时要容易多了。记得要创造性的使用，即将它和其他各种不同命令组合起来使用。坚持练习直到您可以不经思考地高效的使用它。让它成为您的肌肉记忆。</p><p>就像前面已经说过的，您现在已经掌握了Vim的编辑功能。恭喜您！</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-Vimrc</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch22_vimrc/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch22_vimrc/</url>
    
    <content type="html"><![CDATA[<h1 id="Ch22-Vimrc"><a href="#Ch22-Vimrc" class="headerlink" title="Ch22. Vimrc"></a>Ch22. Vimrc</h1><p>在先前的章节中，您学习了如何使用Vim。在本章，您将学习如何组织和配置Vimrc。</p><h2 id="Vim如何找到Vimrc"><a href="#Vim如何找到Vimrc" class="headerlink" title="Vim如何找到Vimrc"></a>Vim如何找到Vimrc</h2><p>对于Vimrc，常见的理解是在根目录下添加一个 <code>.vimrc</code> 点文件（根据您使用的操作系统，文件路径名可能不同）。</p><p>实际上，Vim在多个地方查找vimrc文件。下面是Vim检查的路径：</p><ul><li><code>$VIMINIT</code></li><li><code>$HOME/.vimrc</code></li><li><code>$HOME/.vim/vimrc</code></li><li><code>$EXINIT</code></li><li><code>$HOME/.exrc</code></li><li><code>$VIMRUNTIME/default.vim</code></li></ul><p>当您启动Vim时，它将在上面列出的6个位置按顺序检查vimrc文件，第一个被找到的vimrc文件将被加载，而其余的将被忽略。</p><p>首先，Vim将查找环境变量 <code>$VIMINIT</code>。如果没有找到，Vim将检查 <code>$HOME/.vimrc</code>。如果还没找到，VIm就检查 <code>$HOME/.vim/vimrc</code>。如果Vim找到了vimrc文件，它就停止查找，并使用 <code>$HOME/.vim/vimrc</code>。</p><p>关于第一个位置，<code>$VIMINIT</code> 是一个环境变量。默认情况下它是未定义的。如果您想将 <code>~/dotfiles/testvimrc</code> 作为 <code>$VIMINTI</code> 的值，您可以创建一个包含那个vimrc路径的环境变量。当您运行 <code>export VIMINIT=&#39;let $MYVIMRC=&quot;$HOME/dotfiles/testvimrc&quot; | source $MYVIMRC&#39;</code>后，VIm将使用 <code>~/dotfiles/testvimrc</code> 作为您的vimrc文件。</p><p>第二个位置，<code>$HOME/.vimrc</code> 是很多Vim用户习惯使用的路径。<code>$HOME</code> 大部分情况下是您的根目录（<code>~</code>）。如果您有一个 <code>~/.vimrc</code> 文件，Vim将使用它作为您的vimrc文件。</p><p>第三个，<code>$HOME/.vim/vimrc</code>，位于 <code>~/.vim</code> 目录中。您可能已经有了一个 <code>~/.vim</code> 目录用于存放插件、自定义脚本、或视图文件。注意这里的vimrc文件名没有“点”（<code>$HOME/.vim/.vimrc</code> 不会被识别，但 <code>$HOME/.vim/vimrc</code>能被识别）。</p><p>第四个，<code>$EXINIT</code> 工作方式与 <code>$VIMINIT</code> 类似。</p><p>第五个，<code>$HOME/.exrc</code> 工作方式与 <code>$HOME/.vimrc</code> 类似。</p><p>第六个，<code>$VIMRUNTIME/defaults.vim</code> 是Vim编译时自带的默认vimrc文件。在我的电脑中，我是使用Homebrew安装的Vim8.2，所以我的路径是（<code>/usr/local/share/vim/vim82</code>）。如果Vim在前5个位置都没有找到vimrc文件，它将使用这个Vim自带的vimrc文件。</p><p>在本章剩余部分，我将假设vimrc使用的路径是 <code>~/.vimrc</code>。</p><h2 id="应该把什么放在Vimrc中？"><a href="#应该把什么放在Vimrc中？" class="headerlink" title="应该把什么放在Vimrc中？"></a>应该把什么放在Vimrc中？</h2><p>我刚开始配置Vimrc时，曾问过一个问题，“我究竟该把什么放在Vimrc文件中？”。</p><p>答案是，“任何您想放的东西”。 直接复制粘贴别人的vimrc文件的确是一个诱惑，但您应当抵制这个诱惑。如果您仍然坚持使用别人的vimrc文件，确保您知道这个vimrc干了什么，为什么他&#x2F;她要用这些设置？以及他&#x2F;她如何使用这些设置？还有最重要的是，这个vimrc文件是否符合你的实际需要？别人使用并不代表您也要使用。</p><h2 id="Vimrc基础内容"><a href="#Vimrc基础内容" class="headerlink" title="Vimrc基础内容"></a>Vimrc基础内容</h2><p>简单地说，一个vimrc是以下内容的集合：</p><ul><li>插件</li><li>设置</li><li>自定义函数</li><li>自定义命令</li><li>键盘映射</li></ul><p>当然还有一些上面没有提到的内容，但总体说，已经涵盖了绝大部分使用场景。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>在前面的章节中，我曾提到很多不同的插件，比如<a href="https://github.com/junegunn/fzf.vim">fzf.vim</a>, <a href="https://github.com/simnalamburt/vim-mundo">vim-mundo</a>, 还有 <a href="https://github.com/tpope/vim-fugitive">vim-fugitive</a>.</p><p>十年前，管理插件插件是一个噩梦。但随着很多现代插件管理器的开发，现在安装插件可以在几秒内完成。我现在正在使用<a href="https://github.com/junegunn/vim-plug">vim-plug</a>作为我的插件管理器，所以我在本节中将使用它。相关概念和其他流行的插件管理器应该是类似的。我强烈建议您多试试几个插件管理器，比如：</p><ul><li><a href="https://github.com/VundleVim/Vundle.vim">vundle.vim</a></li><li><a href="https://github.com/tpope/vim-pathogen">vim-pathogen</a></li><li><a href="https://github.com/Shougo/dein.vim">dein.vim</a></li></ul><p>除了上面列出的，还有很多插件管理器，可以随便看看。要想安装 vim-plug，如果您使用的是Unix，运行：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">curl -fLo ~<span class="hljs-regexp">/.vim/</span>autoload<span class="hljs-regexp">/plug.vim --create-dirs https:/</span><span class="hljs-regexp">/raw.githubusercontent.com/</span>junegunn<span class="hljs-regexp">/vim-plug/m</span>aster/plug.vim<br></code></pre></td></tr></table></figure><p>要添加新的插件，将您的插件名(比如，<code>Plug &#39;github-username/repository-name&#39;</code>) 放置在 <code>call plug#begin()</code> 和 <code>call plug#end()</code> 之间的行中. 所以，如果您想安装 <code>emmet-vim</code> 和 <code>nerdtree</code>，将下面的片段放到您的vimrc中：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">begin</span><span class="hljs-params">(&#x27;~/.<span class="hljs-variable">vim</span>/<span class="hljs-variable">plugged</span>&#x27;)</span></span><br>  Plug &#x27;mattn/emmet-vim&#x27;<br>  Plug &#x27;preservim/nerdtree&#x27;<br>call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">end</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>然后保存修改，加载当前vimrc (<code>:source %</code>), 然后运行 <code>:PlugInstall</code> 安装插件。</p><p>如果以后您想删除不使用的插件，您只需将插件名从 <code>call</code> 代码块之间移除，保存并加载，然后运行 <code>:PlugClean</code> 命令将它从机器上删除。</p><p>Vim 8 有自己的内置包管理器。您可以查阅 <code>:h packages</code> 了解更多信息。在后面一章中，我将向您展示如何使用它。</p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p>在任意一个vimrc文件中都可以看到大量的 <code>set</code> 选项。 如果您在命令行模式中运行 set 命令，它只是暂时的。当您关闭Vim，设置就会丢失。比如，为了避免您每次运行Vim时都必须在命令行模式运行 <code>:set relativenumber number</code> 命令，您可以将这个命令添加在vimrc中：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">set</span> relativenumber <span class="hljs-built_in">number</span><br></code></pre></td></tr></table></figure><p>有一些设置需要您赋予一个值，比如 <code>set tabstop=2</code>。想了解一个设置可以接收什么类型的值，可以查看帮助页。</p><p>您也可以使用 <code>let</code> 来代替 <code>set</code>（确保在选项前添加一个 <code>&amp;</code>号）。使用 <code>let</code> ，您可以使用表达式进行赋值。比如，要想仅当某个路径存在时，才将该路径赋予 <code>&#39;dictionary&#39;</code> 选项：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-variable">s:english_dict</span> = <span class="hljs-string">&quot;/usr/share/dict/words&quot;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">filereadable</span>(<span class="hljs-variable">s:english_dict</span>)<br>  <span class="hljs-keyword">let</span> &amp;dictionary=<span class="hljs-variable">s:english_dict</span><br><span class="hljs-keyword">endif</span><br></code></pre></td></tr></table></figure><p>在后面的章节中您将了解关于Vimscript赋值和条件的知识。</p><p>要查看Vim中所有可用的选项，查阅 <code>:h E355</code>。</p><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>Vimrc是一个很好的用来放置自定义函数的地方。在后面的章节中您将学习如何写您自己的Vimscript函数。</p><h3 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h3><p>您可以使用 <code>command</code> 创建一个自定义命令行命令。</p><p>比如，创建一个用于显示今天日期的基本命令 <code>GimmeDate</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:<span class="hljs-built_in">command</span>! GimmeDate <span class="hljs-built_in">echo</span> call(<span class="hljs-string">&quot;strftime&quot;</span>, [<span class="hljs-string">&quot;%F&quot;</span>])<br></code></pre></td></tr></table></figure><p>当您运行 <code>:GimmeDate</code> 时，Vim将显示一个类似 “2021-01-1”的日期。</p><p>要创建一个可以接收输入的基本命令，您可以使用 <code>&lt;args&gt;</code> 。如果您想向 <code>GimmeDate</code> 传递一个时间&#x2F;日期格式参数：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">:command! GimmeDate echo call(&quot;strftime&quot;, [&lt;args&gt;])<br><br>:GimmeDate &quot;%F&quot;<br>&quot; 2020-01-01<br><br><span class="hljs-meta">:GimmeDate &quot;%H:%M&quot;</span><br>&quot; 11:30<br></code></pre></td></tr></table></figure><p>如果您想限定参数的数目，您可以使用 <code>-nargs</code> 标志。<code>-nargs=0</code> 表示没有参数，<code>-nargs=1</code> 表示传递1个参数，<code>-nargs=+</code> 表示至少1个参数，<code>-nargs=*</code> 表示传递任意数量的参数，<code>-nargs=?</code> 表示传递0个或1个参数。如果您想传递n个参数，使用 <code>-nargs=n</code>（这里 <code>n</code> 是一个任意整数）。</p><p><code>&lt;args&gt;</code> 有两个变体：<code>&lt;f-args&gt;</code> 和 <code>&lt;q-args&gt;</code> 。前者用来向Vimscript函数传递参数，后者用来将用户输入自动转换为字符串。</p><p>使用 <code>args</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">:command! -nargs=<span class="hljs-number">1</span> Hello <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span> . <span class="hljs-symbol">&lt;args&gt;</span><br>:Hello <span class="hljs-string">&quot;Iggy&quot;</span><br><span class="hljs-comment">&quot; returns &#x27;Hello Iggy&#x27;</span><br><br>:Hello Iggy<br><span class="hljs-comment">&quot; Undefined variable error</span><br></code></pre></td></tr></table></figure><p>使用 <code>q-args</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">:command! -nargs=<span class="hljs-number">1</span> Hello <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span> . <span class="hljs-symbol">&lt;q-args&gt;</span><br>:Hello Iggy<br><span class="hljs-comment">&quot; returns &#x27;Hello Iggy&#x27;</span><br></code></pre></td></tr></table></figure><p>使用 <code>f-args</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">function!</span> <span class="hljs-title">PrintHello</span><span class="hljs-params">(person1, person2)</span><br>:  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello &quot;</span> . <span class="hljs-variable">a:person1</span> . <span class="hljs-string">&quot; and &quot;</span> . <span class="hljs-variable">a:person2</span><br>:<span class="hljs-keyword">endfunction</span><br><br>:command! -nargs=* Hello <span class="hljs-keyword">call</span> PrintHello(<span class="hljs-symbol">&lt;f-args&gt;</span>)<br><br>:Hello Iggy1 Iggy2<br><span class="hljs-string">&quot; returns &quot;</span>Hello Iggy1 <span class="hljs-built_in">and</span> Iggy2<span class="hljs-comment">&quot;</span><br></code></pre></td></tr></table></figure><p>当您学了关于Vimscript函数的章节后，上面的函数将更有意义。</p><p>查阅 <code>:h command</code> 和 <code>:args</code> 了解更多关于command和args的信息。</p><h3 id="键盘映射"><a href="#键盘映射" class="headerlink" title="键盘映射"></a>键盘映射</h3><p>如果您发现您重复地执行一些相同的复杂操作，那么为这些复杂操作建立一个键盘映射将会很有用：</p><p>比如，在我的vimrc文件中有2个键盘映射：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-f&gt;</span> :GFiles<span class="hljs-symbol">&lt;CR&gt;</span><br><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">tn</span> :<span class="hljs-keyword">call</span> ToggleNumber()<span class="hljs-symbol">&lt;CR&gt;</span><br></code></pre></td></tr></table></figure><p>在第一个中，我将 <code>Ctrl-F</code> 映射到 <a href="https://github.com/junegunn/fzf.vim">fzf.vim</a> 插件的 <code>:Gfiles</code> 命令(快速搜索Git文件)上。在第二个中，我将 <code>&lt;leader&gt;tn</code> 映射到调用一个自定义函数 <code>ToggleNumber</code> （切换 <code>norelativenumber</code> 和 <code>relativenumber</code> 选项）。<code>Ctrl-f</code> 映射覆盖了Vim的原生的页面滚动。如果发生冲突，您的映射将会覆盖Vim的设置。因为从几乎从来不用Vim原生的页面滚动功能，所以我认为可以安全地覆盖它。</p><p>另外，在 <code>&lt;Leader&gt;tn</code> 中的 “leader” 键到底是什么?</p><p>Vim有一个leader键用来辅助键盘映射。比如，我将 <code>&lt;leader&gt;tn</code> 映射为运行 <code>ToggleNumber()</code> 函数。如果没有leader键，我可能会用 <code>tn</code>，但Vim中的 <code>t</code> 已经用做其他功能（”till”搜索导航命令）了。有了leader键，我现在先按定义好的leader键作为开头，然后按 <code>tn</code>，而不用干扰已经存在的命令。您可以设置leader键作为您映射的连续按键的第一个按键。默认Vim使用反斜杠作为leader键（所以 <code>&lt;Leader&gt;tn</code> 会变成 “反斜杠-t-n”）。</p><p>我个人喜欢使用空格 <code>&lt;Space&gt;</code> 作为leader键，代替默认的反斜杠。要想改变您的leader键，将下面的文本添加到您的vimrc中：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-keyword">let</span> <span class="hljs-attr">mapleader</span> = <span class="hljs-string">&quot;\&lt;space&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>上面的 <code>nnoremap</code> 命令可以分解为三个部分：</p><ul><li><code>n</code> 表示普通模式。</li><li><code>nore</code> 表示禁止递归。</li><li><code>map</code> 是键盘映射命令。</li></ul><p>如果不想使用 <code>nnoremap</code>，您至少也得使用 <code>nmap</code> (<code>nmap &lt;silent&gt; &lt;C-f&gt; :Gfiles&lt;CR&gt;</code>)。但是，最好还是使用禁止递归的版本，这样是为了避免键盘映射时潜在的无限循环风险。</p><p>如果您进行键盘映射时不使用禁止递归，下面例子演示了会发生什么。假设您想给 <code>B</code> 添加一个键盘映射，用来在一行的末尾添加一个分号，然后跳回前一个词组（回想一下，<code>B</code> 是Vim普通模式的一个导航命令，用来跳回前一个词组)。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nmap <span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span>;&lt;esc&gt;<span class="hljs-selector-tag">B</span><br></code></pre></td></tr></table></figure><p>当您按下 <code>B</code> …哦豁，Vim开始失控了，开始无止尽的添加<code>;</code>（用 <code>Ctrl-c</code>终止）。为什么会发生这样的情况？因为在键盘映射 <code>A;&lt;esc&gt;B</code>中，这个 <code>B</code>不再是Vim原生的导航命令，它已经被映射到您刚才创建的键盘映射中了。这是您实际上执行的操作序列：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>;&lt;esc&gt;<span class="hljs-selector-tag">A</span>;&lt;esc&gt;<span class="hljs-selector-tag">A</span>;&lt;esc&gt;<span class="hljs-selector-tag">A</span>;esc&gt;...<br></code></pre></td></tr></table></figure><p>要解决这个问题，您需要指定键盘映射禁止递归：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nnoremap <span class="hljs-selector-tag">B</span> <span class="hljs-selector-tag">A</span>;&lt;esc&gt;<span class="hljs-selector-tag">B</span><br></code></pre></td></tr></table></figure><p>现在再按一下 <code>B</code> 试试。这一次它成功地在行尾添加了一个 <code>;</code>，然后跳回到前一个词组。这个映射中的 <code>B</code> 就表示Vim原生的 <code>B</code>了。</p><p>Vim针对不同的模式有不同的键盘映射命令。如果您想创建一个插入模式下的键盘映射 <code>jk</code>，用来退出插入模式：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">inoremap</span> jk <span class="hljs-symbol">&lt;esc&gt;</span><br></code></pre></td></tr></table></figure><p>其他模式的键盘映射命令有：<code>map</code>（普通、可视、选择、以及操作符等待模式）， <code>vmap</code>（可视、选择）， <code>smap</code>（选择）， <code>xmap</code>（可视）， <code>omap</code>（操作符等待模式）， <code>map!</code>（插入、命令行）， <code>lmap</code>（插入，命令行，Lang-arg模式）， <code>cmap</code>（命令行）， 还有<code>tmap</code>（终端任务）。在这里我不会详细的讲解它们，要了解更多信息，查阅 <code>:h map.txt</code>。</p><p>创建最直观、最一致、最易于记忆的键盘映射。</p><h2 id="组织管理Vimrc"><a href="#组织管理Vimrc" class="headerlink" title="组织管理Vimrc"></a>组织管理Vimrc</h2><p>一段时候键，您的vimrc文件就会变大且复杂得难以阅读。有两种方法让您的vimrc文件保持整洁：</p><ul><li>将您的vimrc文件划分为几个文件</li><li>折叠您的vimrc文件</li></ul><h3 id="划分您的vimrc"><a href="#划分您的vimrc" class="headerlink" title="划分您的vimrc"></a>划分您的vimrc</h3><p>您可以使用Vim的 <code>:source</code> 命令将您的vimrc文件划分为多个文件。这个命令可以根据给定的文件参数，读取文件中的命令行命令。</p><p>让我们在 <code>~/.vim</code> 下创建一个子文件夹，取名为 <code>/settings</code>（<code>~/.vim/settings</code>）。名字可以取为任意您喜欢的名字。</p><p>然后你在这个文件夹下创建4个文件：</p><ul><li>第三方插件 (<code>~/.vim/settings/plugins.vim</code>).</li><li>通用设置 (<code>~/.vim/settings/configs.vim</code>).</li><li>自定义函数 (<code>~/.vim/settings/functions.vim</code>).</li><li>键盘映射 (<code>~/.vim/settings/mappings.vim</code>) .</li></ul><p>在 <code>~/.vimrc</code> 里面添加:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">source <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/.vim/</span>settings/plugins.vim<br>source <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/.vim/</span>settings/configs.vim<br>source <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/.vim/</span>settings/functions.vim<br>source <span class="hljs-variable">$HOME</span><span class="hljs-regexp">/.vim/</span>settings/mappings.vim<br></code></pre></td></tr></table></figure><p>在 <code>~/.vim/settings/plugins.vim</code> 里面:</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs leaf">call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">begin</span><span class="hljs-params">(&#x27;~/.<span class="hljs-variable">vim</span>/<span class="hljs-variable">plugged</span>&#x27;)</span></span><br>  Plug &#x27;mattn/emmet-vim&#x27;<br>  Plug &#x27;preservim/nerdtree&#x27;<br>call plug<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">end</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>在 <code>~/.vim/settings/configs.vim</code> 里面:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> nocompatible<br><span class="hljs-built_in">set</span> relativenumber<br><span class="hljs-built_in">set</span> number<br></code></pre></td></tr></table></figure><p>在 <code>~/.vim/settings/functions.vim</code> 里面:</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">function</span><span class="hljs-variable">!</span> <span class="hljs-function"><span class="hljs-title">ToggleNumber</span>()</span><br>  <span class="hljs-function"><span class="hljs-title">if</span>(&amp;<span class="hljs-variable">relativenumber</span> == <span class="hljs-number">1</span>)</span><br>    <span class="hljs-variable">set</span> <span class="hljs-variable">norelativenumber</span><br>  <span class="hljs-variable"><span class="hljs-keyword">else</span></span><br>    <span class="hljs-variable">set</span> <span class="hljs-variable">relativenumber</span><br>  <span class="hljs-variable"><span class="hljs-keyword">endif</span></span><br><span class="hljs-variable">endfunc</span><br></code></pre></td></tr></table></figure><p>在 <code>~/.vim/settings/mappings.vim</code> 里面:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">inoremap</span> jk <span class="hljs-symbol">&lt;esc&gt;</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-f&gt;</span> :GFiles<span class="hljs-symbol">&lt;CR&gt;</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">tn</span> :<span class="hljs-keyword">call</span> ToggleNumber()<span class="hljs-symbol">&lt;CR&gt;</span><br></code></pre></td></tr></table></figure><p>这样您的vimrc文件依然能够正常工作，但现在它只有4行了。</p><p>使用这样的设置，您可以轻易知道到哪去修改配置。如果您要添加一些键盘映射，就将它们添加在 <code>/mappings.vim</code> 文件中。以后，当您的vimrc变大时，您总是可以新建几个子文件来缩小它的大小。比如，如果您想为主题配色创建相关设置，您可以添加 <code>~/.vim/settings/themes.vim</code>。</p><h3 id="保持单独的一个Vimrc文件"><a href="#保持单独的一个Vimrc文件" class="headerlink" title="保持单独的一个Vimrc文件"></a>保持单独的一个Vimrc文件</h3><p>如果您倾向于保持一个单独的vimrc文件，以使它更加便于携带，您可以使用标志折叠让它保持有序。在vimrc文件的顶部添加一下内容：</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">&quot; setup folds </span><span class="hljs-template-variable">&#123;&#123;&#123;</span><br><span class="hljs-template-variable"><span class="hljs-name">augroup</span> filetype_vim</span><br><span class="hljs-template-variable">  autocmd!</span><br><span class="hljs-template-variable">  autocmd FileType vim setlocal <span class="hljs-attr">foldmethod</span>=marker</span><br><span class="hljs-template-variable">augroup END</span><br><span class="hljs-template-variable"><span class="hljs-string">&quot; &#125;&#125;&#125;</span></span><br></code></pre></td></tr></table></figure><p>Vim能够检测当前buffer所属的文件类型 (<code>:set filetype?</code>). 如果发现属于 <code>vim</code> 类型，您可以使用标志折叠。回想一个标志折叠的用法，它使用 <code>&#123;&#123;&#123;` 和 `&#125;&#125;&#125;</code> 来指明折叠的开始和结束。</p><p>添加 <code>&#123;&#123;&#123;` 和 `&#125;&#125;&#125;</code> 标志将您的vimrc文件其他部分折叠起来。(别忘了使用 <code>&quot;</code> 对标志进行注释):</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; setup folds &#123;&#123;&#123;</span><br><span class="hljs-keyword">augroup</span> filetype_vim<br>  autocmd!<br>  <span class="hljs-keyword">autocmd</span> FileType <span class="hljs-keyword">vim</span> <span class="hljs-keyword">setlocal</span> foldmethod=marker<br><span class="hljs-keyword">augroup</span> END<br><span class="hljs-comment">&quot; &#125;&#125;&#125;</span><br><br><span class="hljs-comment">&quot; plugins &#123;&#123;&#123;</span><br><span class="hljs-keyword">call</span> plug#begin(<span class="hljs-string">&#x27;~/.vim/plugged&#x27;</span>)<br>  Plug <span class="hljs-string">&#x27;mattn/emmet-vim&#x27;</span><br>  Plug <span class="hljs-string">&#x27;preservim/nerdtree&#x27;</span><br><span class="hljs-keyword">call</span> plug#end()<br><span class="hljs-comment">&quot; &#125;&#125;&#125;</span><br><br><span class="hljs-comment">&quot; configs &#123;&#123;&#123;</span><br><span class="hljs-keyword">set</span> nocompatible<br><span class="hljs-keyword">set</span> relativenumber<br><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span><br><span class="hljs-comment">&quot; &#125;&#125;&#125;</span><br><br><span class="hljs-comment">&quot; functions &#123;&#123;&#123;</span><br><span class="hljs-keyword">function!</span> <span class="hljs-title">ToggleNumber</span><span class="hljs-params">()</span><br>  <span class="hljs-keyword">if</span>(&amp;relativenumber == <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">set</span> norelativenumber<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">set</span> relativenumber<br>  <span class="hljs-keyword">endif</span><br>endfunc<br><span class="hljs-comment">&quot; &#125;&#125;&#125;</span><br><br><span class="hljs-comment">&quot; mappings &#123;&#123;&#123;</span><br><span class="hljs-keyword">inoremap</span> jk <span class="hljs-symbol">&lt;esc&gt;</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;silent&gt;</span> <span class="hljs-symbol">&lt;C-f&gt;</span> :GFiles<span class="hljs-symbol">&lt;CR&gt;</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;Leader&gt;</span><span class="hljs-keyword">tn</span> :<span class="hljs-keyword">call</span> ToggleNumber()<span class="hljs-symbol">&lt;CR&gt;</span><br><span class="hljs-comment">&quot; &#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>您的vimrc文件将会看起来类似下面：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-comment">-- 6 lines: setup folds -----</span><br><br>+<span class="hljs-comment">-- 6 lines: plugins ---------</span><br><br>+<span class="hljs-comment">-- 5 lines: configs ---------</span><br><br>+<span class="hljs-comment">-- 9 lines: functions -------</span><br><br>+<span class="hljs-comment">-- 5 lines: mappings --------</span><br></code></pre></td></tr></table></figure><h2 id="启动Vim时加载-x2F-不加载Vimrc和插件"><a href="#启动Vim时加载-x2F-不加载Vimrc和插件" class="headerlink" title="启动Vim时加载&#x2F;不加载Vimrc和插件"></a>启动Vim时加载&#x2F;不加载Vimrc和插件</h2><p>如果您要启动Vim时，既不加载Vimrc，也不加载插件，运行：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">vim -u <span class="hljs-built_in">NONE</span><br></code></pre></td></tr></table></figure><p>如果您要启动Vim时，不加载Vimrc，但加载插件，运行：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">vim -u NORC</span><br></code></pre></td></tr></table></figure><p>如果您要启动Vim时，加载Vimrc，但不加载插件，运行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">vim <span class="hljs-comment">--noplugin</span><br></code></pre></td></tr></table></figure><p>如果您要Vim启动加载一个 <em>其他的</em> vimrc, 比如 <code>~/.vimrc-backup</code>, 运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim -u ~/.vimrc-backup<br></code></pre></td></tr></table></figure><h2 id="聪明地配置Vimrc"><a href="#聪明地配置Vimrc" class="headerlink" title="聪明地配置Vimrc"></a>聪明地配置Vimrc</h2><p>Vimrc是定制Vim时的一个重要组件，学习构建您的Vimrc最好是首先阅读他人的vimrc文件，然后逐渐地建立自己的。最好的vimrc并不是谁谁谁使用的，而是最适合您的工作需要和编辑风格的。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-Vim软件包</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch23_vim_packages/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch23_vim_packages/</url>
    
    <content type="html"><![CDATA[<h1 id="第22章-Vim软件包"><a href="#第22章-Vim软件包" class="headerlink" title="第22章 Vim软件包"></a>第22章 Vim软件包</h1><p>在前面的章节中，我提到使用第三方插件管理器来安装插件。从Vim 8开始，Vim自带了一个内置的插件管理器，名叫 <em>软件包（packages）</em>。在本章，您将学习如何使用Vim软件包来安装插件。</p><p>要看您的Vim编译版本是否能够使用软件包，运行 <code>:version</code>。然后查看是否有 <code>+packages</code>属性。另外，您也可以运行 <code>:echo has(&#39;packages&#39;)</code>（如果返回1，表示可以使用软件包）。</p><h2 id="包目录"><a href="#包目录" class="headerlink" title="包目录"></a>包目录</h2><p>在根目录下查看您是否有一个 <code>~/.vim</code> 文件夹。如果没有就新建一个。在文件夹里面，创建一个子文件夹取名 <code>pack</code>(<code>~/.vim/pack/</code>)。Vim会在这个子文件夹内自动搜索插件。</p><h2 id="两种加载方式"><a href="#两种加载方式" class="headerlink" title="两种加载方式"></a>两种加载方式</h2><p>Vim软件包有两种加载机制：自动加载和手动加载。</p><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3><p>要想让Vim启动时自动加载插件，你需要将它们放置在 <code>start/</code>子目录中。路径看起来像这样：</p><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/*/</span>start/<br></code></pre></td></tr></table></figure><p>现在您可能会问，为什么在<code>pack/</code> 和 <code>start/</code> 之间有一个 <code>*</code> ？这个星号可以是任意名字。让我们将它取为<code>packdemo/</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/packdemo/</span>start/<br></code></pre></td></tr></table></figure><p>记住，如果您忽略这一点，用下面的路径代替的话：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/start/</span><br></code></pre></td></tr></table></figure><p>软件包系统是不会正常工作的。 必须在<code>pack/</code> 和 <code>start/</code>之间添加一个名字才能正常运行。</p><p>在这个示例中，让我们尝试安装 [NERDTree](<a href="https://github.com/preservim/nThe">https://github.com/preservim/nThe</a> package system won’t work. It is imperative to put a name between <code>pack/</code> and <code>start/</code>.erdtree) 插件。用任意方法进入 <code>start/</code> 目录（<code>cd ~/.vim/pack/packdemo/start/</code>），然后将NERDTree的仓库克隆下来：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/preservim/</span>nerdtree.git<br></code></pre></td></tr></table></figure><p>完成了！您已经完成了安装。下一次您启动Vim，您可以立即执行 NERDTree 命令 <code>:NERDTreeToggle</code>。</p><p>在 <code>~/.vim/pack/*/start/</code> 目录中，您想克隆多少插件仓库就克隆多少。Vim将会自动加载每一个插件。如果您删除了克隆的仓库（<code>rm -rf nerdtree</code>），那么插件就失效了。</p><h3 id="手动加载"><a href="#手动加载" class="headerlink" title="手动加载"></a>手动加载</h3><p>要想在Vim启动时手动加载插件，您得将相关插件放置在 <code>opt/</code> 目录中，类似于自动加载，这个路径看起来像这样：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/*/</span>opt/<br></code></pre></td></tr></table></figure><p>让我们继续使用前面的 <code>packdemo/</code> 这个名字：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/packdemo/</span>opt/<br></code></pre></td></tr></table></figure><p>这一次，让我们安装<a href="https://github.com/vim/killersheep">killersheep</a> 游戏（需要Vim8.2以上版本）。进入<code>opt/</code> 目录(<code>cd ~/.vim/pack/packdemo/opt/</code>) 然后克隆仓库：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/vim/</span>killersheep.git<br></code></pre></td></tr></table></figure><p>启动Vim。执行游戏的命令是 <code>:KillKillKill</code>。试着运行一下。Vim将会提示这不是一个有效的编辑命令。您需要首先 <em>手动</em> 加载插件，运行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:packadd</span> killersheep<br></code></pre></td></tr></table></figure><p>现在再运行一下 <code>:KillKillKill</code> 。命令已经可以使用了。</p><p>您可能好奇，“为什么我需要手动加载插件？启动时自动加载岂不是更好？”</p><p>很好的问题。有时候有些插件我们并不是所有的时候都在用，比如 KillerSheep 游戏。您可能不会想要加载10个不同的游戏导致Vim启动变慢。但是偶尔当您觉得乏味的时候，您可能想要玩几个游戏，使用手动加载一些非必须的插件。</p><p>您也可以使用这个方法有条件的加载插件。可能您同时使用了Neovim和Vim，有一些插件是为NeoVim优化过的。您可以添加类似下列的内容到您的vimrc中：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;nvim&#x27;</span>)<br>  packadd! neovim-<span class="hljs-keyword">only</span>-plugin<br><span class="hljs-keyword">else</span><br>  packadd! generic-<span class="hljs-keyword">vim</span>-plugin<br><span class="hljs-keyword">endif</span><br></code></pre></td></tr></table></figure><h2 id="组织管理软件包"><a href="#组织管理软件包" class="headerlink" title="组织管理软件包"></a>组织管理软件包</h2><p>回想一下，要使用Vim的软件包系统必须有以下需求：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/*/</span>start/<br></code></pre></td></tr></table></figure><p>或者:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/*/</span>opt/<br></code></pre></td></tr></table></figure><p>实际上，<code>*</code>星号可以使 <em>任意</em> 名字，这个名字就可以用来管理您的插件。假设您想将您的插件根据类型（颜色、语法、游戏）分组：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/colors/</span><br>~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/syntax/</span><br>~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/games/</span><br></code></pre></td></tr></table></figure><p>您仍然可以使用各个目录下的 <code>start/</code> 和 <code>opt/</code> 。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/colors/</span>start/<br>~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/colors/</span>opt/<br><br>~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/syntax/</span>start/<br>~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/syntax/</span>opt/<br><br>~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/games/</span>start/<br>~<span class="hljs-regexp">/.vim/</span>pack<span class="hljs-regexp">/games/</span>opt/<br></code></pre></td></tr></table></figure><h2 id="聪明地添加插件"><a href="#聪明地添加插件" class="headerlink" title="聪明地添加插件"></a>聪明地添加插件</h2><p>您可能好奇，Vim软件包是否让一些流行的插件管理器，比如 vim-pathogen, vundle.vim, dein.vim, a还有vim-plug面临淘汰？</p><p>答案永远是：“看情况而定。”</p><p>我仍然使用vim-plug，因为使用它添加、删除、更新插件很容易。如果您使用了很多插件，插件管理器的好处更加明显，因为使用它可以对很多插件进行同时更新。有些插件管理器同时也提供了一些异步功能。</p><p>如果您是极简主义者，可以尝试一下Vim软件包。如果您是一名插件重度使用者，您可能需要一个插件管理器。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-Vim Rumtime</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch24_vim_runtime/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch24_vim_runtime/</url>
    
    <content type="html"><![CDATA[<h1 id="第24章-Vim-Rumtime"><a href="#第24章-Vim-Rumtime" class="headerlink" title="第24章 Vim Rumtime"></a>第24章 Vim Rumtime</h1><p>在前面的章节中，我提到Vim会自动查找一些特殊的路径，比如在<code>~/.vim/</code> 中的 <code>pack/</code>(第23章) <code>compiler/</code>（第19章）。这些都是Vim runtime路径的例子。</p><p>除了上面提到的两个，Vim还有更多runtime路径。在本章，您将学习关于Vim runtime路径的高层次概述。本章的目标是向您展示它们什么时候被调用。知道这些知识能够帮您更进一步理解和定制Vim。</p><h2 id="Runtime路径"><a href="#Runtime路径" class="headerlink" title="Runtime路径"></a>Runtime路径</h2><p>在一台Unix机器中，其中一个vim runtime路径就是 <code>$HOME/.vim/</code> （如果您用的是其他操作系统，比如Windows，您的路径可能有所不同）。要查看不同的操作系统有什么样的runtime路径，查阅 <code>:h runtimepath</code>。在本章，我将使用 <code>~/.vim/</code> 作为默认的runtime路径。</p><h2 id="Plugin脚本"><a href="#Plugin脚本" class="headerlink" title="Plugin脚本"></a>Plugin脚本</h2><p>Vim有一个runtime路径 plugin，每次Vim启动时都会执行这个路径中的所有脚本。不要把这个名字 “plugin” 和Vim的外部插件（external plugins，比如NERDTree, fzf.vim, 等)搞混了。</p><p>进入 <code>~/.vim/</code> 目录，然后创建 <code>plugin/</code> 子目录。 创建两个文件： <code>donut.vim</code> 和 <code>chocolate.vim</code>。</p><p>在 <code>~/.vim/plugin/donut.vim</code>里面:</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;donut!&quot;</span><br></code></pre></td></tr></table></figure><p>在 <code>~/.vim/plugin/chocolate.vim</code>里面:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;chocolate!&quot;</span><br></code></pre></td></tr></table></figure><p>现在关闭Vim。下次您启动Vim，您将会看到 <code>&quot;donut!&quot;</code> 和 <code>:chocolate!</code> 的显示。此 plugin runtime路径可以用来执行一些初始化脚本。</p><h2 id="文件类型检测"><a href="#文件类型检测" class="headerlink" title="文件类型检测"></a>文件类型检测</h2><p>在开始之前，为保证检测能正常运行，确保在您的vimrc中至少包含了下列的行：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">filetype</span> plugin <span class="hljs-built_in">indent</span> <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure><p>查阅 <code>:h filetype-overview</code> 了解更多信息。本质上，这条代码开启Vim的文件类型检测。</p><p>当您打开一个新的文件，Vim通常知道这个文件是什么类型。如果您有一个文件 <code>hello.rb</code>，运行 <code>:set filetype?</code> 会返回正确的相应 <code>filetype=ruby</code>。</p><p>Vim知道如何检测 “常见” 的文件类型（Ruby, Python, Javascript, 等）。但如果是一个自定义文件会怎样呢？您需要告诉Vim去检测它，并给它指派一个正确的文件类型。</p><p>有两种检测方法：使用文件名和使用文件内容</p><h3 id="文件名检测"><a href="#文件名检测" class="headerlink" title="文件名检测"></a>文件名检测</h3><p>文件名检测使用一个文件的文件名来检测文件类型。当您打开 <code>hello.rb</code>文件时，Vim依靠扩展名 <code>.rb</code> 知道它是一个Ruby文件。</p><p>有两种方法实现文件名检测：一是使用 <code>ftdetect</code> runtime目录，二是使用 <code>filetype.vim</code> runtime文件。我们两个都看一看。</p><h4 id="ftdetect"><a href="#ftdetect" class="headerlink" title="ftdetect/"></a><code>ftdetect/</code></h4><p>让我们创建一个古怪（但优雅）的名字，<code>hello.chocodonut</code>。当您打开它后运行 <code>:set filetype?</code> ，因为它的后缀名不是常见的文件名，Vim不知道它是什么类型，会返回 <code>filetype=</code>。</p><p>您需要指示Vim将所有以 <code>.chocodonut</code>结尾的文件设置为 “chocodonut”类型的文件。在runtime路径根目录(<code>~/.vim/</code>)创建一个子目录，名为 <code>ftdetect/</code> 。在子目录里面，再创建一个名叫 <code>chocodonut.vim</code> 的文件（<code>~/.vim/ftdetect/chocodonut.vim</code>），在文件里面，添加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">autocmd BufNewFile,BufRead *.chocodonut <span class="hljs-built_in">set</span> <span class="hljs-attribute">filetype</span>=chocodonut<br></code></pre></td></tr></table></figure><p>当您创建新buffer或打开新buffer时，事件<code>BufNewFile</code> 和 <code>BufRead</code> 就会被触发。 <code>*.chocodonut</code> 意思是只有当新打开的buffer文件名后缀是 <code>.chocodonut</code> 时事件才会被触发。最后，<code>set filetype=chocodonut</code> 命令将文件类型设置为chocodonut类型。</p><p>重启Vim。新建一个 <code>hello.chocodonut</code> 文件然后运行 <code>:set filetype?</code>。它将返回 <code>filetype=chocodonut</code>.</p><p>好极了！只要您想，您可以将任意多的文件放置在 <code>ftdetect/</code> 中。以后，如果您想扩展您的 donut 文件类型，你可以添加 <code>ftdetect/strawberrydonut.vim</code>, <code>ftdetect/plaindonut.vim</code> 等等。</p><p>在Vim中，实际上有两种方法设置文件类型。其中给一个是您刚刚使用的 <code>set filetype=chocodonut</code>。另一种方法是运行 <code>setfiletype chocodonut</code>。前一个命令 <code>set filetype=chocodonut</code> 将 <em>总是</em> 设置文件类型为chocodonut。 而后者<code>setfiletype chocodonut</code>只有当文件类型尚未设置时，才会将文件类型设置为chocodonut。</p><h4 id="文件类型文件"><a href="#文件类型文件" class="headerlink" title="文件类型文件"></a>文件类型文件</h4><p>第二种文件类型检测需要你创建一个名为 <code>filetype.vim</code>的文件，并将它放置在根目录(<code>~/.vim/filetype.vim</code>)。在文件内添加一下内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">autocmd BufNewFile,BufRead *.plaindonut <span class="hljs-built_in">set</span> <span class="hljs-attribute">filetype</span>=plaindonut<br></code></pre></td></tr></table></figure><p>创建一个名为 <code>hello.plaindonut</code> 的文件。当你打开它后运行 <code>:set filetype?</code> Vim会显示正确的自定义文件类型 <code>filetype=plaindonut</code>。</p><p>太好了，修改生效了。另外，如果您仔细看看 <code>filetype.vim</code> ，您会发现当您打开<code>hello.plaindonut</code>时，这个文件文件运行了多次。为防止这一点，您可以添加一个守卫，让主脚本只运行一次。更新 <code>filetype.vim</code>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-built_in">exists</span>(<span class="hljs-string">&quot;did_load_filetypes&quot;</span>)<br>  <span class="hljs-keyword">finish</span><br><span class="hljs-keyword">endif</span><br><br><span class="hljs-keyword">augroup</span> donutfiletypedetection<br>  autocmd! BufRead,BufNewFile *.plaindonut <span class="hljs-keyword">setfiletype</span> plaindonut<br><span class="hljs-keyword">augroup</span> END<br></code></pre></td></tr></table></figure><p><code>finish</code> 是一个Vim命令，用来停止执行剩余的脚本。表达式<code>&quot;did_load_filetypes&quot;</code> 并 <em>不是</em> 一个Vim内置函数。它实际上是<code>$VIMRUNTIME/filetype.vim</code> 中的一个全局变量。如果您好奇，运行<code>:e $VIMRUNTIME/filetype.vim</code>。您将会发现以下内容：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-built_in">exists</span>(<span class="hljs-string">&quot;did_load_filetypes&quot;</span>)<br>  <span class="hljs-keyword">finish</span><br><span class="hljs-keyword">endif</span><br><br><span class="hljs-keyword">let</span> did_load_filetypes = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>当Vim调用这个文件时，它会定义 <code>did_load_filetypes</code> 变量，并将它设置为 1 。在Vim中，1 表示真。你可以试着读完 <code>filetype.vim</code> 剩余的内容，看看您是否能够理解当Vim调用它时干了什么。</p><h3 id="文件类型脚本"><a href="#文件类型脚本" class="headerlink" title="文件类型脚本"></a>文件类型脚本</h3><p>让我们学习如何基于文件内容检测文件类型。</p><p>假设您有一个无扩展名的文件的集合。这些文件唯一相同的地方是，第一行都是以 “donutify” 开头。您现在想给这些文件指派一个 <code>donut</code> 的文件类型。创建新文件，起名为 <code>sugardonut</code>, <code>glazeddonut</code>, 还有 <code>frieddonut</code>（没有扩展名）。在每个文件中，添加下列内容：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">donutify</span><br></code></pre></td></tr></table></figure><p>当您在<code>sugardonut</code>中运行 <code>:set filetype?</code>，Vim无法知道应该给这个文件指派什么文件类型，会返回 <code>filetype=</code>。</p><p>在runtime根目录，添加一个 <code>scripts.vim</code> 文件(<code>~/.vim/scripts.vim</code>)，在文件中，添加一下内容：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">if</span> <span class="hljs-built_in">did_filetype</span>()<br>  <span class="hljs-keyword">finish</span><br><span class="hljs-keyword">endif</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">getline</span>(<span class="hljs-number">1</span>) =~ <span class="hljs-string">&#x27;^\\&lt;donutify\\&gt;&#x27;</span><br>  <span class="hljs-keyword">setfiletype</span> donut<br><span class="hljs-keyword">endif</span><br></code></pre></td></tr></table></figure><p>函数 <code>getline(1)</code> 返回文件第一行的内容。它检查第一行是否以 “donutify” 开头。函数 <code>did_filetype()</code> 是Vim的内置函数，当一个与文件类型相关的事件发生至少一次时，它返回真。它用来做守卫，防止文件类型事件反复运行。</p><p>打开文件 <code>sugardonut</code> 然后运行 <code>:set filetype?</code>，Vim现在返回 <code>filetype=donut</code>。如果您打开另外一个donut文件 (<code>glazeddonut</code> 和 <code>frieddonut</code>)，Vim同样会将它们的文件类型定义为 <code>donut</code> 类型。</p><p>注意，<code>scripts.vim</code> 仅当Vim打开一个未知文件类型的文件时才会运行。如果Vim打开一个已知文件类型的文件，<code>scripts.vim</code> 将不会运行。</p><h2 id="文件类型插件"><a href="#文件类型插件" class="headerlink" title="文件类型插件"></a>文件类型插件</h2><p>如果您想让Vim仅当您打开一个 chocodonut 文件时才运行 chocodonut 相关的特殊脚本，而当您打开的是 plaindonut 文件时，Vim就不运行这些脚本。能否做到呢？</p><p>您可以使用文件类型插件runtime路径(<code>~/.vim/ftplugin/</code>)来完成这个功能。Vim会在这个目录中查找一个文件，这个文件的文件名与您打开的文件类型一样。创建一个文件，起名为<code>chocodonut.vim</code> (<code>~/.vim/ftplugin/chocodonut.vim</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Calling from chocodonut ftplugin&quot;</span><br></code></pre></td></tr></table></figure><p>创建另一个 ftplugin 文件，起名为<code>plaindonut.vim</code> (<code>~/.vim/ftplugin/plaindonut.vim</code>):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Calling from plaindonut ftplugin&quot;</span><br></code></pre></td></tr></table></figure><p>现在，每次您打开一个 chocodonut 类型的文件时，Vim会运行 <code>~/.vim/ftplugin/chocodonut.vim</code>中的脚本。每次您打开 plaindonut 类型的文件时，Vim会运行 <code>~/.vim/ftplugin/plaindonut.vim</code> 中的脚本。</p><p>一个警告：每当一个buffer的文件类型被设置时(比如，<code>set filetype=chocodonut</code>)，上述脚本就会运行一次。如果您打开3个不同的 chocodonut 文件，该脚本将运行 <em>总共</em> 3次。</p><h2 id="缩进文件"><a href="#缩进文件" class="headerlink" title="缩进文件"></a>缩进文件</h2><p>Vim有一个 缩进runtime路径，其工作方式与ftplugin类似，Vim也会在这个目录中查找一个与打开的文件类型名字一样的文件。缩进runtime路径的目的是存储缩进相关的代码。如果您有文件 <code>~/.vim/indent/chocodonut.vim</code>，它仅当您打开一个 chocodonut 类型的文件时执行。您可以将 chocodonut 文件中缩进相关的代码存储在这里。</p><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>Vim 有一个颜色runtime路径 (<code>~/.vim/colors/</code>) ，用来存储颜色主题。这个目录中的任何文件都会在命令行命令 <code>:color</code> 中显示出来。</p><p>如果您有一个文件 <code>~/.vim/colors/beautifulprettycolors.vim</code>，当您运行 <code>:color</code> 然后按 Tab，您将会看到 <code>beautifulprettycolors</code> 出现在颜色选项中。  如果您想添加自己的颜色主题，就放在这个地方。</p><p>如果您想看其他人做的颜色主题，有一个好地方值得推荐：<a href="https://vimcolors.com/">vimcolors</a>。</p><h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><p>Vim有一个语法runtime路径 (<code>~/.vim/syntax/</code>)，用来定义语法高亮。</p><p>假设您有一个文件 <code>hello.chocodonut</code>，在文件里面有以下内容：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">donut</span> <span class="hljs-string">&quot;tasty&quot;</span>)<br>(<span class="hljs-name">donut</span> <span class="hljs-string">&quot;savory&quot;</span>)<br></code></pre></td></tr></table></figure><p>虽然Vim现在知道了正确的文件类型，但所有的文本都是相同的颜色。让我们添加语法高亮规则，使 “donut” 关键词高亮显示。创建一个新的 chocodonut 语法文件 <code>~/.vim/syntax/chocodonut.vim</code>，在文件中添加：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">syntax <span class="hljs-built_in">keyword</span> donutKeyword donut<br><br>highlight <span class="hljs-keyword">link</span> donutKeyword <span class="hljs-built_in">Keyword</span><br></code></pre></td></tr></table></figure><p>现在重新打开 <code>hello.chocodonut</code> 文件，关键词 <code>donut</code> 已经高亮显示了。</p><p>本章不会详细介绍语法高亮。它是一个庞大的主题。如果您感兴趣，可以查阅 <code>:h syntax.txt</code>。</p><p><a href="https://github.com/sheerun/vim-polyglot">vim-polyglot</a> 插件非常的棒，它提供了很多流行的编程语言的语法高亮。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>如果您写了一个插件，您还得创建一个您自己的文档。您可以使用文档runtime路径完成这个。</p><p>让我们为 chocodonut 和 plaindonut 关键字创建一个基本文档。创建文件 <code>donut.txt</code> (<code>~/.vim/doc/donut.txt</code>)。在文件中，添加一下内容：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*chocodonut* Delicious chocolate donut</span><br><br><span class="hljs-comment">*plaindonut* No choco goodness but still delicious nonetheless</span><br></code></pre></td></tr></table></figure><p>如果您试着搜索 <code>chocodonut</code> 或 <code>plaindonut</code> (<code>:h chocodonut</code> 或 <code>:h plaindonut</code>)，您找不到任何东西。</p><p>首先，你需要运行 <code>:helptags</code>来创建新的帮助入口。运行 <code>:helptags ~/.vim/doc/</code></p><p>现在，如果您运行 <code>:h chocodonut</code> 或 <code>:h plaindonut</code>，您将找到上面那些新的帮助入口。注意，现在文件是只读的，而且类型是 “help”。</p><h2 id="延时加载脚本"><a href="#延时加载脚本" class="headerlink" title="延时加载脚本"></a>延时加载脚本</h2><p>到现在，本章您学到的所有runtime路径都是自动运行的。如果您想手动加载一个脚本，可使用 autoload runtime路径。</p><p>创建一个目录名为 autoload(<code>~/.vim/autoload/</code>)。在目录中，创建一个新文件，起名为 <code>tasty.vim</code> (<code>~/.vim/autoload/tasty.vim</code>)。在文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tasty.vim global&quot;</span><br><br><span class="hljs-keyword">function</span> tasty<span class="hljs-comment">#donut()</span><br>  <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tasty#donut&quot;</span><br>endfunction<br></code></pre></td></tr></table></figure><p>注意，函数名是 <code>tasty#donut</code> 而不是 <code>donut()</code>。要想使用autoload功能，井号(<code>#</code>)是必须的。在使用autoload功能时，函数的命名惯例是：</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs leaf">function fileName<span class="hljs-function"><span class="hljs-keyword">#</span><span class="hljs-title">functionName</span><span class="hljs-params">()</span></span><br>  ...<br>endfunction<br></code></pre></td></tr></table></figure><p>在本例中，文件名是 <code>tasty.vim</code>，而函数名是<code>donut</code>。</p><p>要调用一个函数，可以使用 <code>call</code> 命令。让我们call这个函数 <code>:call tasty#donut()</code>。</p><p>您第一次调用这个函数时，您应当会 <em>同时</em> 看到两条信息 (“tasty.vim global” 和 “tasty#donut”) 。后面再调用 <code>tasty#donut</code> 函数，将只会显示 “testy#donut”。</p><p>当您在Vim中打开一个文件，不像前面说的runtime路径，autoload脚本不会被自动加载。仅当您显式地调用 <code>tasty#donut()</code>，Vim才会查找文件<code>tasty.vim</code>，然后加载文件中的内容，包括函数 <code>tasty#donut()</code>。有些函数会占用大量资源，但我们又不常用，这时候 Autoload runtime路径就是最佳的解决方案。 </p><p>您可以在autoload目录任意添加嵌套的目录。如果您有一个runtime路径 <code>~/.vim/autoload/one/two/three/tasty.vim</code>，您可以使用<code>:call one#two#three#tasty#donut()</code>来调用函数。</p><h2 id="After脚本"><a href="#After脚本" class="headerlink" title="After脚本"></a>After脚本</h2><p>Vim有一个 after runtime路径 (<code>~/.vim/after/</code>) ，它的结构是 <code>~/.vim/</code>的镜像。在此目录中的任何脚本都会最后执行，所以开发者通常使用这个路径来重载脚本。</p><p>比如，如果您想重载 <code>plugin/chocolate.vim</code> 中的脚本，您可以创建<code>~/.vim/after/plugin/chocolate.vim</code>来放置重载脚本。Vim将会先运行 <code>~/.vim/plugin/chocolate.vim</code>， <em>然后运行</em> <code>~/.vim/after/plugin/chocolate.vim</code></p><h2 id="VIMRUNTIME"><a href="#VIMRUNTIME" class="headerlink" title="$VIMRUNTIME"></a>$VIMRUNTIME</h2><p>Vim有一个环境变量 <code>$VIMRUNTIME</code> 用来加载默认脚本和支持文件。您可以运行 <code>:e $VIMRUNTIME</code>查看。</p><p>它的结构应该看起来很熟悉。它包含的很多runtime路径都是我们本章前面学过的。</p><p>回想第22章，当您打开Vim时，它会在6个不同的位置查找vimrc文件。当时我说最后一个位置就是 <code>$VIMRUNTIME/default.vim</code>，如果Vim在前5个位置查找用户vimrc文件失败，就会使用<code>default.vim</code> 作为vimrc。</p><p>不知您是否尝试过，运行Vim是不加载比如vim-polyglot之类的语法插件，但您的文件依然有语法高亮?这是因为当Vim在runtime路径查找语法文件失败时，会从<code>$VIMRUNTIME</code> 的语法目录中查找语法文件。</p><p>查阅 <code>:h $VIMRUNTIME</code>了解更多信息。</p><h2 id="Runtimepath选项"><a href="#Runtimepath选项" class="headerlink" title="Runtimepath选项"></a>Runtimepath选项</h2><p>运行 <code>:set runtimepath?</code>，可以查看您的runtime路径。</p><p>如果您使用 Vim-Plug 或其他流行的第三方插件管理器，它应该会显示一个目录列表。比如，我的显示如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">runtimepath=~<span class="hljs-regexp">/.vim,~/</span>.vim<span class="hljs-regexp">/plugged/</span>vim-signify,~<span class="hljs-regexp">/.vim/</span>plugged<span class="hljs-regexp">/base16-vim,~/</span>.vim<span class="hljs-regexp">/plugged/</span>fzf.vim,~<span class="hljs-regexp">/.vim/</span>plugged<span class="hljs-regexp">/fzf,~/</span>.vim<span class="hljs-regexp">/plugged/</span>vim-gutentags,~<span class="hljs-regexp">/.vim/</span>plugged<span class="hljs-regexp">/tcomment_vim,~/</span>.vim<span class="hljs-regexp">/plugged/</span>emmet-vim,~<span class="hljs-regexp">/.vim/</span>plugged<span class="hljs-regexp">/vim-fugitive,~/</span>.vim<span class="hljs-regexp">/plugged/</span>vim-sensible,~<span class="hljs-regexp">/.vim/</span>plugged/lightline.vim, ...<br></code></pre></td></tr></table></figure><p>插件管理器做了一件事，就是将每个插件添加到runtime路径中。每个runtime路径都有一个类似 <code>~/.vim/</code>的目录结构。</p><p>如果您有一个目录 <code>~/box/of/donuts/</code>，然后您想将这个目录添加到您的runtime路径中，您可以在vimrc中添加以下内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">set rtp+=<span class="hljs-variable">$HOME</span><span class="hljs-regexp">/box/</span>of<span class="hljs-regexp">/donuts/</span><br></code></pre></td></tr></table></figure><p>如果在 <code>~/box/of/donuts/</code> 里面，您有一个plugin目录 (<code>~/box/of/donuts/plugin/hello.vim</code>) 以及ftplugin目录 (<code>~/box/of/donuts/ftplugin/chocodonut.vim</code>)，当您打开Vim时，Vim将会运行 <code>plugin/hello.vim</code> 中所有脚本。同样，当您打开一个 chocodonut 文件时，Vim 将会运行 <code>ftplugin/chocodonut.vim</code>。</p><p>自己试着做一下：创建一个任意目录，然后将它添加到您的 runtimepath中。添加一些我们本章学到的runtime路径。确保它们按预期工作。</p><h2 id="聪明地学习Runtime"><a href="#聪明地学习Runtime" class="headerlink" title="聪明地学习Runtime"></a>聪明地学习Runtime</h2><p>花点时间阅读本章，还有认真研究一下这些runtime路径。看一下真实环境下runtime路径是如何使用的。浏览一下您最喜欢的Vim插件仓库，仔细研究一下它的目录结构，您应该能够理解它们中的绝大部分。试着领会重点并跟着做。现在您已经理解了Vim的目录结构，您可以准备学习Vimscript了。</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VIM-视图、会话和 Viminfo</title>
    <link href="/2022/04/05/Learn-Vim_zh_cn/ch20_views_sessions_viminfo/"/>
    <url>/2022/04/05/Learn-Vim_zh_cn/ch20_views_sessions_viminfo/</url>
    
    <content type="html"><![CDATA[<h1 id="第20章-视图、会话和-Viminfo"><a href="#第20章-视图、会话和-Viminfo" class="headerlink" title="第20章 视图、会话和 Viminfo"></a>第20章 视图、会话和 Viminfo</h1><p>当您做了一段时间的项目后，您可能会发现这个项目逐渐形了成自己的设置、折叠、缓冲区、布局等，就像住了一段时间公寓后，精心装饰了它一样。问题是，关闭 Vim 后，所有的这些更改都会丢失。如果能保留这些更改，等到下次打开 Vim 时，一切恢复如初，岂不美哉？</p><p>本章中，您将学习如何使用 视图、会话 和 Viminfo 来保存项目的“快照”。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是这三个部分（视图、会话、Viminfo）中的最小子集，它是单个窗口相关设置的集合。如果您长时间在一个窗口上工作，并且想要保留其映射和折叠，您可以使用视图。</p><p>我们来创建一个 <code>foo.txt</code> 文件：</p><figure class="highlight gcode"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs gcode">fo<span class="hljs-meta">o1</span><br>fo<span class="hljs-meta">o2</span><br>fo<span class="hljs-meta">o3</span><br>fo<span class="hljs-meta">o4</span><br>fo<span class="hljs-meta">o5</span><br>fo<span class="hljs-meta">o6</span><br>fo<span class="hljs-meta">o7</span><br>fo<span class="hljs-meta">o8</span><br>fo<span class="hljs-meta">o9</span><br>fo<span class="hljs-meta">o10</span><br></code></pre></td></tr></table></figure><p>在这个文件中，做三次修改：</p><ol><li>在第 1 行，创建一个手动折叠 <code>zf4j</code>（折叠接下来 4 行）。</li><li>更改 <code>number</code> 设置：<code>setlocal nonumber norelativenumber</code>。这会移除窗口左侧的数字指示器。</li><li>创建本地映射，每当按一次 <code>j</code> 时，向下两行：<code>:nnoremap &lt;buffer&gt; j jj</code>。</li></ol><p>您的文件看起来应该像：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-comment">-- 5 lines: foo1 -----</span><br>foo6<br>foo7<br>foo8<br>foo9<br>foo10<br></code></pre></td></tr></table></figure><h3 id="配置视图属性"><a href="#配置视图属性" class="headerlink" title="配置视图属性"></a>配置视图属性</h3><p>运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> viewoptions?<br></code></pre></td></tr></table></figure><p>默认情况下会显示（根据您的 vimrc 可能会有所不同）：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">viewoptions</span>=folds,cursor,curdir<br></code></pre></td></tr></table></figure><p>我们来配置 <code>viewoptions</code>。要保留的三个属性分别是折叠、映射和本地设置选项。如果您的设置和我的相似，那么您已经有了 <code>folds</code> 选项。运行下列命令使视图记住 <code>localoptions</code>：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> viewoptions+=localoptions<br></code></pre></td></tr></table></figure><p>查阅 <code>:h viewoptions</code> 可了解 <code>viewoptions</code> 的其他可用选项。现在运行 <code>:set viewoptions?</code>，您将看到：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">viewoptions</span>=folds,cursor,curdir,localoptions<br></code></pre></td></tr></table></figure><h3 id="保存视图"><a href="#保存视图" class="headerlink" title="保存视图"></a>保存视图</h3><p>在 <code>foo.txt</code> 窗口经过适当折叠并设置了 <code>nonumber norelativenumber</code> 选项后，现在我们来保存视图。运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:mkview</span><br></code></pre></td></tr></table></figure><p>Vim 创建了一个视图文件。</p><h3 id="视图文件"><a href="#视图文件" class="headerlink" title="视图文件"></a>视图文件</h3><p>您可能会想“Vim 将这个视图文件保存到哪儿了呢？”，运行下列命令就可以看到答案了：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> viewdir?<br></code></pre></td></tr></table></figure><p>默认情况下会显示 <code>~/.vim/view</code>（根据您的操作系统，可能会有不同的路径。查阅 <code>:h viewdir</code> 获得更多信息）。如果您运行的是基于Unix的操作系统，想修改该路径，可以在您的 vimrc 中添加下列内容：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">viewdir</span>=<span class="hljs-variable">$HOME</span>/else/where<br></code></pre></td></tr></table></figure><h3 id="加载视图文件"><a href="#加载视图文件" class="headerlink" title="加载视图文件"></a>加载视图文件</h3><p>关闭并重新打开 <code>foo.txt</code>，您会看到原来的文本，没有任何改变。这是预期行为。运行下列命令可以加载视图文件：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:loadview</span><br></code></pre></td></tr></table></figure><p>现在您将看到：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">+<span class="hljs-comment">-- 5 lines: foo1 -----</span><br>foo6<br>foo7<br>foo8<br>foo9<br>foo10<br></code></pre></td></tr></table></figure><p>那些折叠、本地设置以及映射都恢复了。如果您细心还可以发现，光标位于上一次您运行 <code>:mkview</code> 时所处的行上。只要您有 <code>cursor</code> 选项，视图将记住光标位置。</p><h3 id="多个视图"><a href="#多个视图" class="headerlink" title="多个视图"></a>多个视图</h3><p>Vim 允许您保存 9 个编号的视图（1-9）。</p><p>假设您想用 <code>:9,10 fold</code> 来额外折叠最后两行，我们把这存为视图 1。运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:mkview</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>如果您又想用 <code>:6,7 fold</code> 再折叠一次，并存为不同的视图，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:mkview</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>关闭并重新打开 <code>foo.txt</code> 文件，运行下列命令可以加载视图 1：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:loadview</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>要加载视图 2，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:loadview</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>要加载原始视图，运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:loadview</span><br></code></pre></td></tr></table></figure><h3 id="自动创建视图"><a href="#自动创建视图" class="headerlink" title="自动创建视图"></a>自动创建视图</h3><p>有一件可能会发生的很倒霉的事情是，您花了很长时间在一个大文件中进行折叠，一不小心关闭了窗口，接着丢失了所有折叠信息。您可以在 vimrc 中添加下列内容，使得在关闭缓冲区后 Vim 能自动创建视图，防止此类灾难发生：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">autocmd</span> BufWinLeave <span class="hljs-regexp">*.txt</span> mkview<br></code></pre></td></tr></table></figure><p>另外也能在打开缓冲区后自动加载视图：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> BufWinEnter *.txt <span class="hljs-keyword">silent</span> <span class="hljs-keyword">loadview</span><br></code></pre></td></tr></table></figure><p>现在，当您编辑 <code>txt</code> 文件时，不用再担心创建和加载视图了。但也注意，随着时间的推移，视图文件会不断积累，记得每隔几个月清理一次。</p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>如果说视图保存了某个窗口的设置，那么会话则保存了所有窗口（包括布局）的信息。</p><h3 id="创建新会话"><a href="#创建新会话" class="headerlink" title="创建新会话"></a>创建新会话</h3><p>假设您在 <code>foobarbaz</code> 工程中编辑着 3 个文件：</p><p><code>foo.txt</code> 的内容：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gcode">fo<span class="hljs-meta">o1</span><br>fo<span class="hljs-meta">o2</span><br>fo<span class="hljs-meta">o3</span><br>fo<span class="hljs-meta">o4</span><br>fo<span class="hljs-meta">o5</span><br>fo<span class="hljs-meta">o6</span><br>fo<span class="hljs-meta">o7</span><br>fo<span class="hljs-meta">o8</span><br>fo<span class="hljs-meta">o9</span><br>fo<span class="hljs-meta">o10</span><br></code></pre></td></tr></table></figure><p><code>bar.txt</code> 的内容：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bar1</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar2</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar3</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar4</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar5</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar6</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar7</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar8</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar9</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">bar10</span><br></code></pre></td></tr></table></figure><p><code>baz.txt</code> 的内容：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">baz1</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz2</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz3</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz4</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz5</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz6</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz7</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz8</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz9</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">baz10</span><br></code></pre></td></tr></table></figure><p>假设您的窗口布局如下所示（适当地使用 <code>split</code> 和 <code>vsplit</code> 来放置）：</p><p><img src="/images/session-layout.png" alt="Session Layout"></p><p>要保留这个外观，您需要保存会话。运行：</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-symbol">:mksession</span><br></code></pre></td></tr></table></figure><p>与默认存储在 <code>~/.vim/view</code> 的 <code>mkview</code> 不同，<code>mksession</code> 在当前目录存储会话文件（<code>Session.vim</code>）。如果好奇，您可以看看文件。</p><p>如果您想将会话文件另存他处，可以将参数传递给 <code>mksession</code>：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">:mksession ~/<span class="hljs-keyword">some</span>/<span class="hljs-keyword">where</span>/<span class="hljs-keyword">else</span>.vim<br></code></pre></td></tr></table></figure><p>使用 <code>!</code> 来调用命令可以覆盖一个已存在的会话文件（<code>:mksession! ~/some/where/else.vim</code>）。</p><h3 id="加载会话"><a href="#加载会话" class="headerlink" title="加载会话"></a>加载会话</h3><p>运行下列命令可以加载会话：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">source</span> Session.<span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure><p>现在 Vim 看起来就像您离开它时的样子！或者，您也可以从终端加载会话文件：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vim</span> -S Session.<span class="hljs-keyword">vim</span><br></code></pre></td></tr></table></figure><h3 id="配置会话属性"><a href="#配置会话属性" class="headerlink" title="配置会话属性"></a>配置会话属性</h3><p>您可以配置会话要保存的属性。若要查看当前哪些属性正被保存，请运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> sessionoptions?<br></code></pre></td></tr></table></figure><p>我的显示：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">blank,<span class="hljs-keyword">buffers</span>,curdir,folds,<span class="hljs-keyword">help</span>,tabpages,<span class="hljs-keyword">winsize</span>,terminal<br></code></pre></td></tr></table></figure><p>如果在保存会话时不想存储 <code>terminal</code>，可以运行下列命令将其从会话选项中删除：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> <span class="hljs-attribute">sessionoptions-</span>=terminal<br></code></pre></td></tr></table></figure><p>如果要在保存会话时存储 <code>options</code>，请运行：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">:<span class="hljs-keyword">set</span> sessionoptions+=<span class="hljs-keyword">options</span><br></code></pre></td></tr></table></figure><p>下面是一些 <code>sessionoptions</code> 可以存储的属性：</p><ul><li><code>blank</code> 存储空窗口</li><li><code>buffers</code> 存储缓冲区</li><li><code>folds</code> 存储折叠</li><li><code>globals</code> 存储全局变量（必须以大写字母开头，并且至少包含一个小写字母）</li><li><code>options</code> 存储选项和映射</li><li><code>resize</code> 存储窗口行列</li><li><code>winpos</code> 存储窗口位置</li><li><code>winsize</code> 存储窗口大小</li><li><code>tabpages</code> 存储选项卡</li><li><code>unix</code> 以 Unix 格式存储文件</li></ul><p>查阅 <code>:h &#39;sessionoptions&#39;</code> 来获取完整列表。</p><p>会话是保存项目外部属性的好工具。但是，一些内部属性不存储在会话中，如本地标记、寄存器、历史记录等。要保存它们，您需要使用 Viminfo！</p><h2 id="Viminfo"><a href="#Viminfo" class="headerlink" title="Viminfo"></a>Viminfo</h2><p>如果您留意，在复制一个单词进寄存器 a，再退出并重新打开 Vim 后，您仍然可以看到存储在寄存器中的文本。这就是 Viminfo 的功劳。没有它，在您关闭 Vim 后，Vim 会忘记这些寄存器。</p><p>如果您使用 Vim 8 或更高版本，Vim 会默认启用 Viminfo。因此您可能一直在使用 Viminfo，而您对它毫不知情！</p><p>您可能会问：Viminfo 存储了什么？与会话有何不同？</p><p>要使用 Viminfo，您必须启用了 <code>+viminfo</code> 特性（<code>:version</code>）。Viminfo 存储着：</p><ul><li>命令行历史记录。</li><li>字符串搜索历史记录。</li><li>输入行历史记录。</li><li>非空寄存器的内容。</li><li>多个文件的标记。</li><li>文件标记，它指向文件中的位置。</li><li>上次搜索 &#x2F; 替换模式（用于 “n” 和 “&amp;”）。</li><li>缓冲区列表。</li><li>全局变量。</li></ul><p>通常，会话存储“外部”属性，Viminfo 存储“内部”属性。</p><p>每个项目可以有一个会话文件，而 Viminfo 与会话不同，通常每台计算机只使用一个 Viminfo。Viminfo 是项目无关的。</p><p>对于 Unix，Viminfo 的默认位置是 <code>$HOME/.viminfo</code>（<code>~/.viminfo</code>）。如果您用其他操作系统，Viminfo 位置可能会有所不同。可以查阅 <code>:h viminfo-file-name</code>。每一次您做出的“内部”更改，如将文本复制进一个寄存器，Vim 都会自动更新 Viminfo 文件。</p><p><em>请确保您设置了 <code>nocompatible</code> 选项（<code>set nocompatible</code>），否则您的 Viminfo 将不起作用。</em></p><h3 id="读写-Viminfo"><a href="#读写-Viminfo" class="headerlink" title="读写 Viminfo"></a>读写 Viminfo</h3><p>尽管只使用一个 Viminfo 文件，但您还是可以创建多个 Viminfo 文件。使用 <code>:wviminfo</code> 命令（缩写为 <code>:wv</code>）来创建多个 Viminfo 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:wv ~/.viminfo_extra<br></code></pre></td></tr></table></figure><p>要覆盖现有的 Viminfo 文件，向 <code>wv</code> 命令多添加一个叹号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:wv! ~/.viminfo_extra<br></code></pre></td></tr></table></figure><p>Vim 默认情况下会读取 <code>~/.viminfo</code> 文件。运行 <code>:rviminfo</code>（缩写为 <code>:rv</code>）可以读取不同的 Vimfile 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">:rv ~/.viminfo_extra<br></code></pre></td></tr></table></figure><p>要在终端使用不同的 Viminfo 文件来启动 Vim，请使用 “i” 标志：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">vim -<span class="hljs-selector-tag">i</span> viminfo_extra<br></code></pre></td></tr></table></figure><p>如果您要将 Vim 用于不同的任务，比如写代码和写作，您可以创建两个 Viminfo，一个针对写作优化，另一个为写代码优化。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">vim -<span class="hljs-selector-tag">i</span> viminfo_writing<br><br>vim -<span class="hljs-selector-tag">i</span> viminfo_coding<br></code></pre></td></tr></table></figure><h3 id="不使用-Viminfo-启动-Vim"><a href="#不使用-Viminfo-启动-Vim" class="headerlink" title="不使用 Viminfo 启动 Vim"></a>不使用 Viminfo 启动 Vim</h3><p>要不使用 Viminfo 启动 Vim，可以在终端运行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">vim -<span class="hljs-selector-tag">i</span> <span class="hljs-attribute">NONE</span><br></code></pre></td></tr></table></figure><p>要永不使用 Viminfo，可以在您的 vimrc 文件添加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> <span class="hljs-attribute">viminfo</span>=<span class="hljs-string">&quot;NONE&quot;</span><br></code></pre></td></tr></table></figure><h3 id="配置-Viminfo-属性"><a href="#配置-Viminfo-属性" class="headerlink" title="配置 Viminfo 属性"></a>配置 Viminfo 属性</h3><p>和 <code>viewoptions</code> 以及 <code>sessionoptions</code> 类似，您可以用 <code>viminfo</code> 选项指定要存储的属性。请运行：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">:<span class="hljs-built_in">set</span> viminfo?<br></code></pre></td></tr></table></figure><p>您会得到：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-addition">!,&#x27;100,&lt;50,s10,h</span><br></code></pre></td></tr></table></figure><p>看起来有点晦涩难懂。命令分解如下：</p><ul><li><code>!</code> 保存以大写字母开头、却不包含小写字母的全局变量。回想一下 <code>g:</code> 代表了一个全局变量。例如，假设您写了赋值语句 <code>let g:FOO = &quot;foo&quot;</code>，Viminfo 将存储全局变量 <code>FOO</code>。然而如果您写了 <code>let g:Foo = &quot;foo&quot;</code>，Viminfo 将不存储它，因为它包含了小写字母。没有 <code>!</code>，Vim 不会存储这些全局变量。</li><li><code>&#39;100</code> 代表标记。在这个例子中，Viminfo 将保存最近 100 个文件的本地标记（a-z）。注意，如果存储的文件过多，Vim 会变得很慢，1000 左右就可以了。</li><li><code>&lt;50</code> 告诉 Viminfo 每个寄存器最多保存多少行（这个例子中是 50 行）。如果我复制 100 行文本进寄存器 a（<code>&quot;ay99j</code>）后关闭 Vim，下次打开 Vim 并从寄存器 a（<code>&quot;ap</code>）粘贴时，Vim 最多只粘贴 50 行；如果不指定最大行号， <em>所有</em> 行都将被保存；如果指定 0，什么都不保存了。</li><li><code>s10</code> 为寄存器设置大小限制（kb）。在这个例子中，任何大于 10kb 的寄存器都会被排除。</li><li><code>h</code> 禁用高亮显示（<code>hlsearch</code> 时）。</li></ul><p>可以查阅 <code>:h &#39;viminfo&#39;</code> 来了解其他更多选项。</p><h2 id="聪明地使用视图、会话和-Viminfo"><a href="#聪明地使用视图、会话和-Viminfo" class="headerlink" title="聪明地使用视图、会话和 Viminfo"></a>聪明地使用视图、会话和 Viminfo</h2><p>Vim 能使用视图、会话和 Viminfo 来保存不同级别的 Vim 环境快照。对于微型项目，可以使用视图；对于大型项目，可以使用会话。您应该花些时间来查阅视图、会话和 Viminfo 提供的所有选项。</p><p>为您的编辑风格创建属于您自己的视图、会话和 Viminfo。如果您要换台计算机使用 Vim，只需加载您的设置，立刻就会感到就像在家里的工作环境一样！</p>]]></content>
    
    
    <categories>
      
      <category>编辑器</category>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VIM</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
